
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003ca0  08003ca0  00013ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb8  08003cb8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cc0  08003cc0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000010  08003cd8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003cd8  00020108  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da27  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea2  00000000  00000000  0002da65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0002f908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  000305f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272a5  00000000  00000000  00031210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f130  00000000  00000000  000584b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6a26  00000000  00000000  000675e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015e00b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003578  00000000  00000000  0015e060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08003c88 	.word	0x08003c88

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08003c88 	.word	0x08003c88

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <MX_GPIO_Init+0x5c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a14      	ldr	r2, [pc, #80]	; (800058c <MX_GPIO_Init+0x5c>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <MX_GPIO_Init+0x5c>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <MX_GPIO_Init+0x5c>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a0e      	ldr	r2, [pc, #56]	; (800058c <MX_GPIO_Init+0x5c>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <MX_GPIO_Init+0x5c>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0302 	and.w	r3, r3, #2
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <MX_GPIO_Init+0x5c>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a08      	ldr	r2, [pc, #32]	; (800058c <MX_GPIO_Init+0x5c>)
 800056c:	f043 0308 	orr.w	r3, r3, #8
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <MX_GPIO_Init+0x5c>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0308 	and.w	r3, r3, #8
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	40023800 	.word	0x40023800

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fad1 	bl	8000b3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f834 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f7ff ffc8 	bl	8000530 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005a0:	f000 f92a 	bl	80007f8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80005a4:	f000 fa2c 	bl	8000a00 <MX_USART3_UART_Init>
	  /*HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
	  HAL_Delay(100);
	  HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_3);
	  pwm = (GPIOB->IDR & GPIO_PIN_10)>>10;*/

	  htim2.Instance -> CCR3 = (10000-1)*dutyCycle;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <main+0x60>)
 80005aa:	edd3 7a00 	vldr	s15, [r3]
 80005ae:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80005f4 <main+0x64>
 80005b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <main+0x68>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005be:	ee17 2a90 	vmov	r2, s15
 80005c2:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 80005c4:	2108      	movs	r1, #8
 80005c6:	480c      	ldr	r0, [pc, #48]	; (80005f8 <main+0x68>)
 80005c8:	f001 ff7e 	bl	80024c8 <HAL_TIM_PWM_Start>
	  HAL_Delay(100);
 80005cc:	2064      	movs	r0, #100	; 0x64
 80005ce:	f000 fb11 	bl	8000bf4 <HAL_Delay>
	  HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_3);
 80005d2:	2108      	movs	r1, #8
 80005d4:	4808      	ldr	r0, [pc, #32]	; (80005f8 <main+0x68>)
 80005d6:	f002 f871 	bl	80026bc <HAL_TIM_PWM_Stop>
	  pwm = ((GPIOB->IDR & GPIO_PIN_10)>>10);
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <main+0x6c>)
 80005dc:	691b      	ldr	r3, [r3, #16]
 80005de:	0a9b      	lsrs	r3, r3, #10
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <main+0x70>)
 80005ea:	701a      	strb	r2, [r3, #0]
	  htim2.Instance -> CCR3 = (10000-1)*dutyCycle;
 80005ec:	e7dc      	b.n	80005a8 <main+0x18>
 80005ee:	bf00      	nop
 80005f0:	20000000 	.word	0x20000000
 80005f4:	461c3c00 	.word	0x461c3c00
 80005f8:	20000034 	.word	0x20000034
 80005fc:	40020400 	.word	0x40020400
 8000600:	20000030 	.word	0x20000030

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b0b8      	sub	sp, #224	; 0xe0
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800060e:	2234      	movs	r2, #52	; 0x34
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fb30 	bl	8003c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2290      	movs	r2, #144	; 0x90
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f003 fb21 	bl	8003c78 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b3b      	ldr	r3, [pc, #236]	; (8000724 <SystemClock_Config+0x120>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	4a3a      	ldr	r2, [pc, #232]	; (8000724 <SystemClock_Config+0x120>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	6413      	str	r3, [r2, #64]	; 0x40
 8000642:	4b38      	ldr	r3, [pc, #224]	; (8000724 <SystemClock_Config+0x120>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064e:	4b36      	ldr	r3, [pc, #216]	; (8000728 <SystemClock_Config+0x124>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a35      	ldr	r2, [pc, #212]	; (8000728 <SystemClock_Config+0x124>)
 8000654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000658:	6013      	str	r3, [r2, #0]
 800065a:	4b33      	ldr	r3, [pc, #204]	; (8000728 <SystemClock_Config+0x124>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000666:	2302      	movs	r3, #2
 8000668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2310      	movs	r3, #16
 8000674:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067e:	2300      	movs	r3, #0
 8000680:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000684:	2308      	movs	r3, #8
 8000686:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800068a:	23d8      	movs	r3, #216	; 0xd8
 800068c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fdaa 	bl	8001200 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006b2:	f000 f83b 	bl	800072c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006b6:	f000 fd53 	bl	8001160 <HAL_PWREx_EnableOverDrive>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c0:	f000 f834 	bl	800072c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2302      	movs	r3, #2
 80006cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006ea:	2107      	movs	r1, #7
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 f835 	bl	800175c <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80006f8:	f000 f818 	bl	800072c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80006fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000700:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000702:	2300      	movs	r3, #0
 8000704:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	4618      	mov	r0, r3
 800070c:	f001 f9fc 	bl	8001b08 <HAL_RCCEx_PeriphCLKConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000716:	f000 f809 	bl	800072c <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	37e0      	adds	r7, #224	; 0xe0
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_MspInit+0x44>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <HAL_MspInit+0x44>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_MspInit+0x44>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_MspInit+0x44>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_MspInit+0x44>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6453      	str	r3, [r2, #68]	; 0x44
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_MspInit+0x44>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <NMI_Handler+0x4>

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <MemManage_Handler+0x4>

08000792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <UsageFault_Handler+0x4>

0800079e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f9f2 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <SystemInit+0x20>)
 80007da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <SystemInit+0x20>)
 80007e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08e      	sub	sp, #56	; 0x38
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000818:	463b      	mov	r3, r7
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
 8000826:	615a      	str	r2, [r3, #20]
 8000828:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800082a:	4b3b      	ldr	r3, [pc, #236]	; (8000918 <MX_TIM2_Init+0x120>)
 800082c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000830:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 8000832:	4b39      	ldr	r3, [pc, #228]	; (8000918 <MX_TIM2_Init+0x120>)
 8000834:	f240 4237 	movw	r2, #1079	; 0x437
 8000838:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083a:	4b37      	ldr	r3, [pc, #220]	; (8000918 <MX_TIM2_Init+0x120>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000840:	4b35      	ldr	r3, [pc, #212]	; (8000918 <MX_TIM2_Init+0x120>)
 8000842:	f242 720f 	movw	r2, #9999	; 0x270f
 8000846:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000848:	4b33      	ldr	r3, [pc, #204]	; (8000918 <MX_TIM2_Init+0x120>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084e:	4b32      	ldr	r3, [pc, #200]	; (8000918 <MX_TIM2_Init+0x120>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000854:	4830      	ldr	r0, [pc, #192]	; (8000918 <MX_TIM2_Init+0x120>)
 8000856:	f001 fd7f 	bl	8002358 <HAL_TIM_Base_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000860:	f7ff ff64 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800086a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800086e:	4619      	mov	r1, r3
 8000870:	4829      	ldr	r0, [pc, #164]	; (8000918 <MX_TIM2_Init+0x120>)
 8000872:	f002 f8b3 	bl	80029dc <HAL_TIM_ConfigClockSource>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800087c:	f7ff ff56 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000880:	4825      	ldr	r0, [pc, #148]	; (8000918 <MX_TIM2_Init+0x120>)
 8000882:	f001 fdc0 	bl	8002406 <HAL_TIM_PWM_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800088c:	f7ff ff4e 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	481e      	ldr	r0, [pc, #120]	; (8000918 <MX_TIM2_Init+0x120>)
 80008a0:	f002 fd20 	bl	80032e4 <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80008aa:	f7ff ff3f 	bl	800072c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ae:	2360      	movs	r3, #96	; 0x60
 80008b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	4619      	mov	r1, r3
 80008c4:	4814      	ldr	r0, [pc, #80]	; (8000918 <MX_TIM2_Init+0x120>)
 80008c6:	f001 ff79 	bl	80027bc <HAL_TIM_PWM_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80008d0:	f7ff ff2c 	bl	800072c <Error_Handler>
  }
  sConfigOC.Pulse = 10000/4-1;
 80008d4:	f640 13c3 	movw	r3, #2499	; 0x9c3
 80008d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008da:	463b      	mov	r3, r7
 80008dc:	2208      	movs	r2, #8
 80008de:	4619      	mov	r1, r3
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_TIM2_Init+0x120>)
 80008e2:	f001 ff6b 	bl	80027bc <HAL_TIM_PWM_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80008ec:	f7ff ff1e 	bl	800072c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	220c      	movs	r2, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	4807      	ldr	r0, [pc, #28]	; (8000918 <MX_TIM2_Init+0x120>)
 80008fc:	f001 ff5e 	bl	80027bc <HAL_TIM_PWM_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8000906:	f7ff ff11 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800090a:	4803      	ldr	r0, [pc, #12]	; (8000918 <MX_TIM2_Init+0x120>)
 800090c:	f000 f824 	bl	8000958 <HAL_TIM_MspPostInit>

}
 8000910:	bf00      	nop
 8000912:	3738      	adds	r7, #56	; 0x38
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000034 	.word	0x20000034

0800091c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800092c:	d10b      	bne.n	8000946 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_TIM_Base_MspInit+0x38>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_TIM_Base_MspInit+0x38>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_TIM_Base_MspInit+0x38>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000978:	d138      	bne.n	80009ec <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <HAL_TIM_MspPostInit+0x9c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a1d      	ldr	r2, [pc, #116]	; (80009f4 <HAL_TIM_MspPostInit+0x9c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <HAL_TIM_MspPostInit+0x9c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <HAL_TIM_MspPostInit+0x9c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <HAL_TIM_MspPostInit+0x9c>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_TIM_MspPostInit+0x9c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80009aa:	2309      	movs	r3, #9
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009ba:	2301      	movs	r3, #1
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <HAL_TIM_MspPostInit+0xa0>)
 80009c6:	f000 fa1f 	bl	8000e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009dc:	2301      	movs	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <HAL_TIM_MspPostInit+0xa4>)
 80009e8:	f000 fa0e 	bl	8000e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020400 	.word	0x40020400

08000a00 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a06:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <MX_USART3_UART_Init+0x5c>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a44:	f002 fcdc 	bl	8003400 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a4e:	f7ff fe6d 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000080 	.word	0x20000080
 8000a5c:	40004800 	.word	0x40004800

08000a60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a17      	ldr	r2, [pc, #92]	; (8000adc <HAL_UART_MspInit+0x7c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d128      	bne.n	8000ad4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_UART_MspInit+0x80>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <HAL_UART_MspInit+0x80>)
 8000a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0x80>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_UART_MspInit+0x80>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <HAL_UART_MspInit+0x80>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_UART_MspInit+0x80>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ab2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <HAL_UART_MspInit+0x84>)
 8000ad0:	f000 f99a 	bl	8000e08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	; 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40004800 	.word	0x40004800
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020c00 	.word	0x40020c00

08000ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aec:	480d      	ldr	r0, [pc, #52]	; (8000b24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aee:	490e      	ldr	r1, [pc, #56]	; (8000b28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b04:	4c0b      	ldr	r4, [pc, #44]	; (8000b34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b12:	f7ff fe5f 	bl	80007d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b16:	f003 f88b 	bl	8003c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1a:	f7ff fd39 	bl	8000590 <main>
  bx  lr    
 8000b1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b20:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b2c:	08003cc8 	.word	0x08003cc8
  ldr r2, =_sbss
 8000b30:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b34:	20000108 	.word	0x20000108

08000b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC_IRQHandler>

08000b3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f000 f92e 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b44:	200f      	movs	r0, #15
 8000b46:	f000 f805 	bl	8000b54 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b4a:	f7ff fdf5 	bl	8000738 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x54>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x58>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f93b 	bl	8000dee <HAL_SYSTICK_Config>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00e      	b.n	8000ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d80a      	bhi.n	8000b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f000 f911 	bl	8000db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <HAL_InitTick+0x5c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000004 	.word	0x20000004
 8000bac:	2000000c 	.word	0x2000000c
 8000bb0:	20000008 	.word	0x20000008

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	20000104 	.word	0x20000104

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000104 	.word	0x20000104

08000bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bfc:	f7ff ffee 	bl	8000bdc <HAL_GetTick>
 8000c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c0c:	d005      	beq.n	8000c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_Delay+0x44>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4413      	add	r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c1a:	bf00      	nop
 8000c1c:	f7ff ffde 	bl	8000bdc <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d8f7      	bhi.n	8000c1c <HAL_Delay+0x28>
  {
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000000c 	.word	0x2000000c

08000c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <__NVIC_SetPriorityGrouping+0x40>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	4313      	orrs	r3, r2
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x40>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00
 8000c80:	05fa0000 	.word	0x05fa0000

08000c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <__NVIC_GetPriorityGrouping+0x18>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	f003 0307 	and.w	r3, r3, #7
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	; 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d6c:	d301      	bcc.n	8000d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00f      	b.n	8000d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <SysTick_Config+0x40>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f7ff ff8e 	bl	8000ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <SysTick_Config+0x40>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <SysTick_Config+0x40>)
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	e000e010 	.word	0xe000e010

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff47 	bl	8000c3c <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff5c 	bl	8000c84 <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ff8e 	bl	8000cf4 <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff5d 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffb0 	bl	8000d5c <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
 8000e26:	e175      	b.n	8001114 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	f040 8164 	bne.w	800110e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d00b      	beq.n	8000e66 <HAL_GPIO_Init+0x5e>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d007      	beq.n	8000e66 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e5a:	2b11      	cmp	r3, #17
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b12      	cmp	r3, #18
 8000e64:	d130      	bne.n	8000ec8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	f003 0201 	and.w	r2, r3, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x100>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b12      	cmp	r3, #18
 8000f06:	d123      	bne.n	8000f50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	08da      	lsrs	r2, r3, #3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3208      	adds	r2, #8
 8000f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	691a      	ldr	r2, [r3, #16]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	08da      	lsrs	r2, r3, #3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3208      	adds	r2, #8
 8000f4a:	69b9      	ldr	r1, [r7, #24]
 8000f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0203 	and.w	r2, r3, #3
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 80be 	beq.w	800110e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	4b66      	ldr	r3, [pc, #408]	; (800112c <HAL_GPIO_Init+0x324>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a65      	ldr	r2, [pc, #404]	; (800112c <HAL_GPIO_Init+0x324>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b63      	ldr	r3, [pc, #396]	; (800112c <HAL_GPIO_Init+0x324>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000faa:	4a61      	ldr	r2, [pc, #388]	; (8001130 <HAL_GPIO_Init+0x328>)
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a58      	ldr	r2, [pc, #352]	; (8001134 <HAL_GPIO_Init+0x32c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d037      	beq.n	8001046 <HAL_GPIO_Init+0x23e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a57      	ldr	r2, [pc, #348]	; (8001138 <HAL_GPIO_Init+0x330>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d031      	beq.n	8001042 <HAL_GPIO_Init+0x23a>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a56      	ldr	r2, [pc, #344]	; (800113c <HAL_GPIO_Init+0x334>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d02b      	beq.n	800103e <HAL_GPIO_Init+0x236>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a55      	ldr	r2, [pc, #340]	; (8001140 <HAL_GPIO_Init+0x338>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d025      	beq.n	800103a <HAL_GPIO_Init+0x232>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a54      	ldr	r2, [pc, #336]	; (8001144 <HAL_GPIO_Init+0x33c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d01f      	beq.n	8001036 <HAL_GPIO_Init+0x22e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a53      	ldr	r2, [pc, #332]	; (8001148 <HAL_GPIO_Init+0x340>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d019      	beq.n	8001032 <HAL_GPIO_Init+0x22a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a52      	ldr	r2, [pc, #328]	; (800114c <HAL_GPIO_Init+0x344>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d013      	beq.n	800102e <HAL_GPIO_Init+0x226>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a51      	ldr	r2, [pc, #324]	; (8001150 <HAL_GPIO_Init+0x348>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d00d      	beq.n	800102a <HAL_GPIO_Init+0x222>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a50      	ldr	r2, [pc, #320]	; (8001154 <HAL_GPIO_Init+0x34c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d007      	beq.n	8001026 <HAL_GPIO_Init+0x21e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4f      	ldr	r2, [pc, #316]	; (8001158 <HAL_GPIO_Init+0x350>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_GPIO_Init+0x21a>
 800101e:	2309      	movs	r3, #9
 8001020:	e012      	b.n	8001048 <HAL_GPIO_Init+0x240>
 8001022:	230a      	movs	r3, #10
 8001024:	e010      	b.n	8001048 <HAL_GPIO_Init+0x240>
 8001026:	2308      	movs	r3, #8
 8001028:	e00e      	b.n	8001048 <HAL_GPIO_Init+0x240>
 800102a:	2307      	movs	r3, #7
 800102c:	e00c      	b.n	8001048 <HAL_GPIO_Init+0x240>
 800102e:	2306      	movs	r3, #6
 8001030:	e00a      	b.n	8001048 <HAL_GPIO_Init+0x240>
 8001032:	2305      	movs	r3, #5
 8001034:	e008      	b.n	8001048 <HAL_GPIO_Init+0x240>
 8001036:	2304      	movs	r3, #4
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x240>
 800103a:	2303      	movs	r3, #3
 800103c:	e004      	b.n	8001048 <HAL_GPIO_Init+0x240>
 800103e:	2302      	movs	r3, #2
 8001040:	e002      	b.n	8001048 <HAL_GPIO_Init+0x240>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x240>
 8001046:	2300      	movs	r3, #0
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	f002 0203 	and.w	r2, r2, #3
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	4093      	lsls	r3, r2
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001058:	4935      	ldr	r1, [pc, #212]	; (8001130 <HAL_GPIO_Init+0x328>)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001066:	4b3d      	ldr	r3, [pc, #244]	; (800115c <HAL_GPIO_Init+0x354>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800108a:	4a34      	ldr	r2, [pc, #208]	; (800115c <HAL_GPIO_Init+0x354>)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001090:	4b32      	ldr	r3, [pc, #200]	; (800115c <HAL_GPIO_Init+0x354>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b4:	4a29      	ldr	r2, [pc, #164]	; (800115c <HAL_GPIO_Init+0x354>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ba:	4b28      	ldr	r3, [pc, #160]	; (800115c <HAL_GPIO_Init+0x354>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010de:	4a1f      	ldr	r2, [pc, #124]	; (800115c <HAL_GPIO_Init+0x354>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <HAL_GPIO_Init+0x354>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001108:	4a14      	ldr	r2, [pc, #80]	; (800115c <HAL_GPIO_Init+0x354>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3301      	adds	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	2b0f      	cmp	r3, #15
 8001118:	f67f ae86 	bls.w	8000e28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40013800 	.word	0x40013800
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40021000 	.word	0x40021000
 8001148:	40021400 	.word	0x40021400
 800114c:	40021800 	.word	0x40021800
 8001150:	40021c00 	.word	0x40021c00
 8001154:	40022000 	.word	0x40022000
 8001158:	40022400 	.word	0x40022400
 800115c:	40013c00 	.word	0x40013c00

08001160 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800118e:	f7ff fd25 	bl	8000bdc <HAL_GetTick>
 8001192:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001194:	e009      	b.n	80011aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001196:	f7ff fd21 	bl	8000bdc <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011a4:	d901      	bls.n	80011aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e022      	b.n	80011f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b6:	d1ee      	bne.n	8001196 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80011be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c4:	f7ff fd0a 	bl	8000bdc <HAL_GetTick>
 80011c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011ca:	e009      	b.n	80011e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011cc:	f7ff fd06 	bl	8000bdc <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011da:	d901      	bls.n	80011e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e007      	b.n	80011f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011ec:	d1ee      	bne.n	80011cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e29b      	b.n	800174e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8087 	beq.w	8001332 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001224:	4b96      	ldr	r3, [pc, #600]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b04      	cmp	r3, #4
 800122e:	d00c      	beq.n	800124a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001230:	4b93      	ldr	r3, [pc, #588]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 030c 	and.w	r3, r3, #12
 8001238:	2b08      	cmp	r3, #8
 800123a:	d112      	bne.n	8001262 <HAL_RCC_OscConfig+0x62>
 800123c:	4b90      	ldr	r3, [pc, #576]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001248:	d10b      	bne.n	8001262 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124a:	4b8d      	ldr	r3, [pc, #564]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d06c      	beq.n	8001330 <HAL_RCC_OscConfig+0x130>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d168      	bne.n	8001330 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e275      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126a:	d106      	bne.n	800127a <HAL_RCC_OscConfig+0x7a>
 800126c:	4b84      	ldr	r3, [pc, #528]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a83      	ldr	r2, [pc, #524]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	e02e      	b.n	80012d8 <HAL_RCC_OscConfig+0xd8>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0x9c>
 8001282:	4b7f      	ldr	r3, [pc, #508]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a7e      	ldr	r2, [pc, #504]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b7c      	ldr	r3, [pc, #496]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a7b      	ldr	r2, [pc, #492]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e01d      	b.n	80012d8 <HAL_RCC_OscConfig+0xd8>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0xc0>
 80012a6:	4b76      	ldr	r3, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a75      	ldr	r2, [pc, #468]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b73      	ldr	r3, [pc, #460]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a72      	ldr	r2, [pc, #456]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0xd8>
 80012c0:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a6e      	ldr	r2, [pc, #440]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b6c      	ldr	r3, [pc, #432]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a6b      	ldr	r2, [pc, #428]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d013      	beq.n	8001308 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fc7c 	bl	8000bdc <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fc78 	bl	8000bdc <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e229      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b61      	ldr	r3, [pc, #388]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0xe8>
 8001306:	e014      	b.n	8001332 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff fc68 	bl	8000bdc <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fc64 	bl	8000bdc <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e215      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	4b57      	ldr	r3, [pc, #348]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x110>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d069      	beq.n	8001412 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800133e:	4b50      	ldr	r3, [pc, #320]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00b      	beq.n	8001362 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134a:	4b4d      	ldr	r3, [pc, #308]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b08      	cmp	r3, #8
 8001354:	d11c      	bne.n	8001390 <HAL_RCC_OscConfig+0x190>
 8001356:	4b4a      	ldr	r3, [pc, #296]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d116      	bne.n	8001390 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001362:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <HAL_RCC_OscConfig+0x17a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e1e9      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137a:	4b41      	ldr	r3, [pc, #260]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	493d      	ldr	r1, [pc, #244]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	e040      	b.n	8001412 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d023      	beq.n	80013e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001398:	4b39      	ldr	r3, [pc, #228]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a38      	ldr	r2, [pc, #224]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a4:	f7ff fc1a 	bl	8000bdc <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ac:	f7ff fc16 	bl	8000bdc <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1c7      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013be:	4b30      	ldr	r3, [pc, #192]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4929      	ldr	r1, [pc, #164]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
 80013de:	e018      	b.n	8001412 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a26      	ldr	r2, [pc, #152]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fbf6 	bl	8000bdc <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff fbf2 	bl	8000bdc <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1a3      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d038      	beq.n	8001490 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d019      	beq.n	800145a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142a:	4a15      	ldr	r2, [pc, #84]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001432:	f7ff fbd3 	bl	8000bdc <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143a:	f7ff fbcf 	bl	8000bdc <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e180      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800144e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x23a>
 8001458:	e01a      	b.n	8001490 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800145c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001460:	f023 0301 	bic.w	r3, r3, #1
 8001464:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001466:	f7ff fbb9 	bl	8000bdc <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	e00a      	b.n	8001484 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff fbb5 	bl	8000bdc <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d903      	bls.n	8001484 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e166      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
 8001480:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b92      	ldr	r3, [pc, #584]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1ee      	bne.n	800146e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a4 	beq.w	80015e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b8c      	ldr	r3, [pc, #560]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10d      	bne.n	80014c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a88      	ldr	r2, [pc, #544]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b86      	ldr	r3, [pc, #536]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c2:	2301      	movs	r3, #1
 80014c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c6:	4b83      	ldr	r3, [pc, #524]	; (80016d4 <HAL_RCC_OscConfig+0x4d4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d118      	bne.n	8001504 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014d2:	4b80      	ldr	r3, [pc, #512]	; (80016d4 <HAL_RCC_OscConfig+0x4d4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a7f      	ldr	r2, [pc, #508]	; (80016d4 <HAL_RCC_OscConfig+0x4d4>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014de:	f7ff fb7d 	bl	8000bdc <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e6:	f7ff fb79 	bl	8000bdc <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b64      	cmp	r3, #100	; 0x64
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e12a      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f8:	4b76      	ldr	r3, [pc, #472]	; (80016d4 <HAL_RCC_OscConfig+0x4d4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x31a>
 800150c:	4b70      	ldr	r3, [pc, #448]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a6f      	ldr	r2, [pc, #444]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	e02d      	b.n	8001576 <HAL_RCC_OscConfig+0x376>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x33c>
 8001522:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a6a      	ldr	r2, [pc, #424]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
 800152e:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a67      	ldr	r2, [pc, #412]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
 800153a:	e01c      	b.n	8001576 <HAL_RCC_OscConfig+0x376>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b05      	cmp	r3, #5
 8001542:	d10c      	bne.n	800155e <HAL_RCC_OscConfig+0x35e>
 8001544:	4b62      	ldr	r3, [pc, #392]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001548:	4a61      	ldr	r2, [pc, #388]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800154a:	f043 0304 	orr.w	r3, r3, #4
 800154e:	6713      	str	r3, [r2, #112]	; 0x70
 8001550:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	4a5e      	ldr	r2, [pc, #376]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6713      	str	r3, [r2, #112]	; 0x70
 800155c:	e00b      	b.n	8001576 <HAL_RCC_OscConfig+0x376>
 800155e:	4b5c      	ldr	r3, [pc, #368]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001562:	4a5b      	ldr	r2, [pc, #364]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	6713      	str	r3, [r2, #112]	; 0x70
 800156a:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156e:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001570:	f023 0304 	bic.w	r3, r3, #4
 8001574:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d015      	beq.n	80015aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157e:	f7ff fb2d 	bl	8000bdc <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff fb29 	bl	8000bdc <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f241 3288 	movw	r2, #5000	; 0x1388
 8001594:	4293      	cmp	r3, r2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e0d8      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159c:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0ee      	beq.n	8001586 <HAL_RCC_OscConfig+0x386>
 80015a8:	e014      	b.n	80015d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015aa:	f7ff fb17 	bl	8000bdc <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7ff fb13 	bl	8000bdc <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e0c2      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c8:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1ee      	bne.n	80015b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d105      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a3c      	ldr	r2, [pc, #240]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80015e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80ae 	beq.w	800174c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f0:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d06d      	beq.n	80016d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d14b      	bne.n	800169c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001604:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a31      	ldr	r2, [pc, #196]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800160a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800160e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fae4 	bl	8000bdc <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fae0 	bl	8000bdc <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e091      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69da      	ldr	r2, [r3, #28]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	019b      	lsls	r3, r3, #6
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	085b      	lsrs	r3, r3, #1
 800164e:	3b01      	subs	r3, #1
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	061b      	lsls	r3, r3, #24
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	071b      	lsls	r3, r3, #28
 8001662:	491b      	ldr	r1, [pc, #108]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800166e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fab2 	bl	8000bdc <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff faae 	bl	8000bdc <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e05f      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x47c>
 800169a:	e057      	b.n	800174c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80016a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fa98 	bl	8000bdc <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff fa94 	bl	8000bdc <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e045      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4b0>
 80016ce:	e03d      	b.n	800174c <HAL_RCC_OscConfig+0x54c>
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_RCC_OscConfig+0x558>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d030      	beq.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d129      	bne.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	429a      	cmp	r2, r3
 8001700:	d122      	bne.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001708:	4013      	ands	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800170e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001710:	4293      	cmp	r3, r2
 8001712:	d119      	bne.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	085b      	lsrs	r3, r3, #1
 8001720:	3b01      	subs	r3, #1
 8001722:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d10f      	bne.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d107      	bne.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0d0      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001774:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d910      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b67      	ldr	r3, [pc, #412]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 020f 	bic.w	r2, r3, #15
 800178a:	4965      	ldr	r1, [pc, #404]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0b8      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	494d      	ldr	r1, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d040      	beq.n	8001880 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d115      	bne.n	800183e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	4b41      	ldr	r3, [pc, #260]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e073      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e06b      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183e:	4b39      	ldr	r3, [pc, #228]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f023 0203 	bic.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4936      	ldr	r1, [pc, #216]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001850:	f7ff f9c4 	bl	8000bdc <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	e00a      	b.n	800186e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7ff f9c0 	bl	8000bdc <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e053      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 020c 	and.w	r2, r3, #12
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	429a      	cmp	r2, r3
 800187e:	d1eb      	bne.n	8001858 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d210      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 020f 	bic.w	r2, r3, #15
 8001896:	4922      	ldr	r1, [pc, #136]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e032      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4916      	ldr	r1, [pc, #88]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 f821 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	490a      	ldr	r1, [pc, #40]	; (8001928 <HAL_RCC_ClockConfig+0x1cc>)
 8001900:	5ccb      	ldrb	r3, [r1, r3]
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1d0>)
 8001908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1d4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f920 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00
 8001924:	40023800 	.word	0x40023800
 8001928:	08003ca0 	.word	0x08003ca0
 800192c:	20000004 	.word	0x20000004
 8001930:	20000008 	.word	0x20000008

08001934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001934:	b5b0      	push	{r4, r5, r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800193a:	2100      	movs	r1, #0
 800193c:	6079      	str	r1, [r7, #4]
 800193e:	2100      	movs	r1, #0
 8001940:	60f9      	str	r1, [r7, #12]
 8001942:	2100      	movs	r1, #0
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001946:	2100      	movs	r1, #0
 8001948:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800194a:	4952      	ldr	r1, [pc, #328]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x160>)
 800194c:	6889      	ldr	r1, [r1, #8]
 800194e:	f001 010c 	and.w	r1, r1, #12
 8001952:	2908      	cmp	r1, #8
 8001954:	d00d      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x3e>
 8001956:	2908      	cmp	r1, #8
 8001958:	f200 8094 	bhi.w	8001a84 <HAL_RCC_GetSysClockFreq+0x150>
 800195c:	2900      	cmp	r1, #0
 800195e:	d002      	beq.n	8001966 <HAL_RCC_GetSysClockFreq+0x32>
 8001960:	2904      	cmp	r1, #4
 8001962:	d003      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x38>
 8001964:	e08e      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001966:	4b4c      	ldr	r3, [pc, #304]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x164>)
 8001968:	60bb      	str	r3, [r7, #8]
      break;
 800196a:	e08e      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800196c:	4b4b      	ldr	r3, [pc, #300]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x168>)
 800196e:	60bb      	str	r3, [r7, #8]
      break;
 8001970:	e08b      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001972:	4948      	ldr	r1, [pc, #288]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001974:	6849      	ldr	r1, [r1, #4]
 8001976:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800197a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800197c:	4945      	ldr	r1, [pc, #276]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x160>)
 800197e:	6849      	ldr	r1, [r1, #4]
 8001980:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001984:	2900      	cmp	r1, #0
 8001986:	d024      	beq.n	80019d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001988:	4942      	ldr	r1, [pc, #264]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x160>)
 800198a:	6849      	ldr	r1, [r1, #4]
 800198c:	0989      	lsrs	r1, r1, #6
 800198e:	4608      	mov	r0, r1
 8001990:	f04f 0100 	mov.w	r1, #0
 8001994:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001998:	f04f 0500 	mov.w	r5, #0
 800199c:	ea00 0204 	and.w	r2, r0, r4
 80019a0:	ea01 0305 	and.w	r3, r1, r5
 80019a4:	493d      	ldr	r1, [pc, #244]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x168>)
 80019a6:	fb01 f003 	mul.w	r0, r1, r3
 80019aa:	2100      	movs	r1, #0
 80019ac:	fb01 f102 	mul.w	r1, r1, r2
 80019b0:	1844      	adds	r4, r0, r1
 80019b2:	493a      	ldr	r1, [pc, #232]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x168>)
 80019b4:	fba2 0101 	umull	r0, r1, r2, r1
 80019b8:	1863      	adds	r3, r4, r1
 80019ba:	4619      	mov	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	461a      	mov	r2, r3
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	f7fe fc38 	bl	8000238 <__aeabi_uldivmod>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4613      	mov	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	e04a      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d2:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x160>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	099b      	lsrs	r3, r3, #6
 80019d8:	461a      	mov	r2, r3
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019e2:	f04f 0100 	mov.w	r1, #0
 80019e6:	ea02 0400 	and.w	r4, r2, r0
 80019ea:	ea03 0501 	and.w	r5, r3, r1
 80019ee:	4620      	mov	r0, r4
 80019f0:	4629      	mov	r1, r5
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	014b      	lsls	r3, r1, #5
 80019fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a00:	0142      	lsls	r2, r0, #5
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	1b00      	subs	r0, r0, r4
 8001a08:	eb61 0105 	sbc.w	r1, r1, r5
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	018b      	lsls	r3, r1, #6
 8001a16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a1a:	0182      	lsls	r2, r0, #6
 8001a1c:	1a12      	subs	r2, r2, r0
 8001a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a22:	f04f 0000 	mov.w	r0, #0
 8001a26:	f04f 0100 	mov.w	r1, #0
 8001a2a:	00d9      	lsls	r1, r3, #3
 8001a2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a30:	00d0      	lsls	r0, r2, #3
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	1912      	adds	r2, r2, r4
 8001a38:	eb45 0303 	adc.w	r3, r5, r3
 8001a3c:	f04f 0000 	mov.w	r0, #0
 8001a40:	f04f 0100 	mov.w	r1, #0
 8001a44:	0299      	lsls	r1, r3, #10
 8001a46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a4a:	0290      	lsls	r0, r2, #10
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	461a      	mov	r2, r3
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	f7fe fbec 	bl	8000238 <__aeabi_uldivmod>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4613      	mov	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	0c1b      	lsrs	r3, r3, #16
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	3301      	adds	r3, #1
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	60bb      	str	r3, [r7, #8]
      break;
 8001a82:	e002      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x164>)
 8001a86:	60bb      	str	r3, [r7, #8]
      break;
 8001a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bdb0      	pop	{r4, r5, r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	00f42400 	.word	0x00f42400
 8001a9c:	017d7840 	.word	0x017d7840

08001aa0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000004 	.word	0x20000004

08001ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001abc:	f7ff fff0 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	0a9b      	lsrs	r3, r3, #10
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	4903      	ldr	r1, [pc, #12]	; (8001adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ace:	5ccb      	ldrb	r3, [r1, r3]
 8001ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	08003cb0 	.word	0x08003cb0

08001ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ae4:	f7ff ffdc 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	0b5b      	lsrs	r3, r3, #13
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	4903      	ldr	r1, [pc, #12]	; (8001b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001af6:	5ccb      	ldrb	r3, [r1, r3]
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	08003cb0 	.word	0x08003cb0

08001b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d012      	beq.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b30:	4b69      	ldr	r3, [pc, #420]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a68      	ldr	r2, [pc, #416]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b3a:	6093      	str	r3, [r2, #8]
 8001b3c:	4b66      	ldr	r3, [pc, #408]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b44:	4964      	ldr	r1, [pc, #400]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001b52:	2301      	movs	r3, #1
 8001b54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d017      	beq.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b62:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b70:	4959      	ldr	r1, [pc, #356]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b80:	d101      	bne.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d017      	beq.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b9e:	4b4e      	ldr	r3, [pc, #312]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ba4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	494a      	ldr	r1, [pc, #296]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 808b 	beq.w	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bec:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	4a39      	ldr	r2, [pc, #228]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf8:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c04:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a34      	ldr	r2, [pc, #208]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c10:	f7fe ffe4 	bl	8000bdc <HAL_GetTick>
 8001c14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c18:	f7fe ffe0 	bl	8000bdc <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e38f      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c2a:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d035      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d02e      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c54:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001c76:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c7c:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d114      	bne.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7fe ffa8 	bl	8000bdc <HAL_GetTick>
 8001c8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c90:	f7fe ffa4 	bl	8000bdc <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e351      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0ee      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001cbe:	d111      	bne.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cce:	400b      	ands	r3, r1
 8001cd0:	4901      	ldr	r1, [pc, #4]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	0ffffcff 	.word	0x0ffffcff
 8001ce4:	4bb3      	ldr	r3, [pc, #716]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4ab2      	ldr	r2, [pc, #712]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001cee:	6093      	str	r3, [r2, #8]
 8001cf0:	4bb0      	ldr	r3, [pc, #704]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfc:	49ad      	ldr	r1, [pc, #692]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d010      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d0e:	4ba9      	ldr	r3, [pc, #676]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d14:	4aa7      	ldr	r2, [pc, #668]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d1e:	4ba5      	ldr	r3, [pc, #660]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d28:	49a2      	ldr	r1, [pc, #648]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00a      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d3c:	4b9d      	ldr	r3, [pc, #628]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d4a:	499a      	ldr	r1, [pc, #616]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00a      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d5e:	4b95      	ldr	r3, [pc, #596]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d6c:	4991      	ldr	r1, [pc, #580]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00a      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d80:	4b8c      	ldr	r3, [pc, #560]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d8e:	4989      	ldr	r1, [pc, #548]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00a      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001da2:	4b84      	ldr	r3, [pc, #528]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db0:	4980      	ldr	r1, [pc, #512]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00a      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dc4:	4b7b      	ldr	r3, [pc, #492]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dca:	f023 0203 	bic.w	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4978      	ldr	r1, [pc, #480]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00a      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001de6:	4b73      	ldr	r3, [pc, #460]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	f023 020c 	bic.w	r2, r3, #12
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df4:	496f      	ldr	r1, [pc, #444]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00a      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e08:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	4967      	ldr	r1, [pc, #412]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00a      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e2a:	4b62      	ldr	r3, [pc, #392]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e38:	495e      	ldr	r1, [pc, #376]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00a      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e4c:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5a:	4956      	ldr	r1, [pc, #344]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e6e:	4b51      	ldr	r3, [pc, #324]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	494d      	ldr	r1, [pc, #308]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00a      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001e90:	4b48      	ldr	r3, [pc, #288]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9e:	4945      	ldr	r1, [pc, #276]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00a      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001eb2:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec0:	493c      	ldr	r1, [pc, #240]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00a      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ed4:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ee2:	4934      	ldr	r1, [pc, #208]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d011      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ef6:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f04:	492b      	ldr	r1, [pc, #172]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f14:	d101      	bne.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00a      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f36:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f44:	491b      	ldr	r1, [pc, #108]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00b      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f58:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f68:	4912      	ldr	r1, [pc, #72]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f8c:	4909      	ldr	r1, [pc, #36]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00f      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fa6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb0:	e002      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	4986      	ldr	r1, [pc, #536]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00b      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001fcc:	4b81      	ldr	r3, [pc, #516]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fdc:	497d      	ldr	r1, [pc, #500]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d006      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80d6 	beq.w	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ff8:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a75      	ldr	r2, [pc, #468]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ffe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002004:	f7fe fdea 	bl	8000bdc <HAL_GetTick>
 8002008:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800200c:	f7fe fde6 	bl	8000bdc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	; 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e195      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800201e:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d021      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203a:	2b00      	cmp	r3, #0
 800203c:	d11d      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800203e:	4b65      	ldr	r3, [pc, #404]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002044:	0c1b      	lsrs	r3, r3, #16
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800204c:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800204e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002052:	0e1b      	lsrs	r3, r3, #24
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	019a      	lsls	r2, r3, #6
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	041b      	lsls	r3, r3, #16
 8002064:	431a      	orrs	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	071b      	lsls	r3, r3, #28
 8002072:	4958      	ldr	r1, [pc, #352]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800208e:	d00a      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002098:	2b00      	cmp	r3, #0
 800209a:	d02e      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a4:	d129      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020a6:	4b4b      	ldr	r3, [pc, #300]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ac:	0c1b      	lsrs	r3, r3, #16
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020b4:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ba:	0f1b      	lsrs	r3, r3, #28
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	019a      	lsls	r2, r3, #6
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	041b      	lsls	r3, r3, #16
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	061b      	lsls	r3, r3, #24
 80020d4:	431a      	orrs	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	071b      	lsls	r3, r3, #28
 80020da:	493e      	ldr	r1, [pc, #248]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80020e2:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020e8:	f023 021f 	bic.w	r2, r3, #31
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	3b01      	subs	r3, #1
 80020f2:	4938      	ldr	r1, [pc, #224]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d01d      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002106:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800210c:	0e1b      	lsrs	r3, r3, #24
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002114:	4b2f      	ldr	r3, [pc, #188]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800211a:	0f1b      	lsrs	r3, r3, #28
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	019a      	lsls	r2, r3, #6
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	041b      	lsls	r3, r3, #16
 800212e:	431a      	orrs	r2, r3
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	061b      	lsls	r3, r3, #24
 8002134:	431a      	orrs	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	071b      	lsls	r3, r3, #28
 800213a:	4926      	ldr	r1, [pc, #152]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d011      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	019a      	lsls	r2, r3, #6
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	041b      	lsls	r3, r3, #16
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	061b      	lsls	r3, r3, #24
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	071b      	lsls	r3, r3, #28
 800216a:	491a      	ldr	r1, [pc, #104]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002178:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800217c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800217e:	f7fe fd2d 	bl	8000bdc <HAL_GetTick>
 8002182:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002186:	f7fe fd29 	bl	8000bdc <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b64      	cmp	r3, #100	; 0x64
 8002192:	d901      	bls.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e0d8      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002198:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	f040 80ce 	bne.w	8002348 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b8:	f7fe fd10 	bl	8000bdc <HAL_GetTick>
 80021bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021be:	e00b      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021c0:	f7fe fd0c 	bl	8000bdc <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d904      	bls.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e0bb      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021d8:	4b5e      	ldr	r3, [pc, #376]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021e4:	d0ec      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002202:	2b00      	cmp	r3, #0
 8002204:	d02e      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	d12a      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800220e:	4b51      	ldr	r3, [pc, #324]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800221c:	4b4d      	ldr	r3, [pc, #308]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	0f1b      	lsrs	r3, r3, #28
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	019a      	lsls	r2, r3, #6
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	061b      	lsls	r3, r3, #24
 800223c:	431a      	orrs	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	071b      	lsls	r3, r3, #28
 8002242:	4944      	ldr	r1, [pc, #272]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800224a:	4b42      	ldr	r3, [pc, #264]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800224c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002250:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	3b01      	subs	r3, #1
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	493d      	ldr	r1, [pc, #244]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d022      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002278:	d11d      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800227a:	4b36      	ldr	r3, [pc, #216]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002280:	0e1b      	lsrs	r3, r3, #24
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002288:	4b32      	ldr	r3, [pc, #200]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	0f1b      	lsrs	r3, r3, #28
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	019a      	lsls	r2, r3, #6
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	041b      	lsls	r3, r3, #16
 80022a2:	431a      	orrs	r2, r3
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	061b      	lsls	r3, r3, #24
 80022a8:	431a      	orrs	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	071b      	lsls	r3, r3, #28
 80022ae:	4929      	ldr	r1, [pc, #164]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d028      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022c2:	4b24      	ldr	r3, [pc, #144]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c8:	0e1b      	lsrs	r3, r3, #24
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	019a      	lsls	r2, r3, #6
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	041b      	lsls	r3, r3, #16
 80022e8:	431a      	orrs	r2, r3
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	061b      	lsls	r3, r3, #24
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	071b      	lsls	r3, r3, #28
 80022f6:	4917      	ldr	r1, [pc, #92]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	4911      	ldr	r1, [pc, #68]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0e      	ldr	r2, [pc, #56]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002320:	f7fe fc5c 	bl	8000bdc <HAL_GetTick>
 8002324:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002328:	f7fe fc58 	bl	8000bdc <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e007      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002346:	d1ef      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e049      	b.n	80023fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7fe facc 	bl	800091c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3304      	adds	r3, #4
 8002394:	4619      	mov	r1, r3
 8002396:	4610      	mov	r0, r2
 8002398:	f000 fbe6 	bl	8002b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e049      	b.n	80024ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d106      	bne.n	8002432 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f841 	bl	80024b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2202      	movs	r2, #2
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3304      	adds	r3, #4
 8002442:	4619      	mov	r1, r3
 8002444:	4610      	mov	r0, r2
 8002446:	f000 fb8f 	bl	8002b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d109      	bne.n	80024ec <HAL_TIM_PWM_Start+0x24>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	bf14      	ite	ne
 80024e4:	2301      	movne	r3, #1
 80024e6:	2300      	moveq	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e03c      	b.n	8002566 <HAL_TIM_PWM_Start+0x9e>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d109      	bne.n	8002506 <HAL_TIM_PWM_Start+0x3e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	bf14      	ite	ne
 80024fe:	2301      	movne	r3, #1
 8002500:	2300      	moveq	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	e02f      	b.n	8002566 <HAL_TIM_PWM_Start+0x9e>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d109      	bne.n	8002520 <HAL_TIM_PWM_Start+0x58>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b01      	cmp	r3, #1
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	e022      	b.n	8002566 <HAL_TIM_PWM_Start+0x9e>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d109      	bne.n	800253a <HAL_TIM_PWM_Start+0x72>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	bf14      	ite	ne
 8002532:	2301      	movne	r3, #1
 8002534:	2300      	moveq	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	e015      	b.n	8002566 <HAL_TIM_PWM_Start+0x9e>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b10      	cmp	r3, #16
 800253e:	d109      	bne.n	8002554 <HAL_TIM_PWM_Start+0x8c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	e008      	b.n	8002566 <HAL_TIM_PWM_Start+0x9e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e092      	b.n	8002694 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d104      	bne.n	800257e <HAL_TIM_PWM_Start+0xb6>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800257c:	e023      	b.n	80025c6 <HAL_TIM_PWM_Start+0xfe>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b04      	cmp	r3, #4
 8002582:	d104      	bne.n	800258e <HAL_TIM_PWM_Start+0xc6>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800258c:	e01b      	b.n	80025c6 <HAL_TIM_PWM_Start+0xfe>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b08      	cmp	r3, #8
 8002592:	d104      	bne.n	800259e <HAL_TIM_PWM_Start+0xd6>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800259c:	e013      	b.n	80025c6 <HAL_TIM_PWM_Start+0xfe>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b0c      	cmp	r3, #12
 80025a2:	d104      	bne.n	80025ae <HAL_TIM_PWM_Start+0xe6>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025ac:	e00b      	b.n	80025c6 <HAL_TIM_PWM_Start+0xfe>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d104      	bne.n	80025be <HAL_TIM_PWM_Start+0xf6>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025bc:	e003      	b.n	80025c6 <HAL_TIM_PWM_Start+0xfe>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2202      	movs	r2, #2
 80025c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2201      	movs	r2, #1
 80025cc:	6839      	ldr	r1, [r7, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fe62 	bl	8003298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a30      	ldr	r2, [pc, #192]	; (800269c <HAL_TIM_PWM_Start+0x1d4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d004      	beq.n	80025e8 <HAL_TIM_PWM_Start+0x120>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a2f      	ldr	r2, [pc, #188]	; (80026a0 <HAL_TIM_PWM_Start+0x1d8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d101      	bne.n	80025ec <HAL_TIM_PWM_Start+0x124>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <HAL_TIM_PWM_Start+0x126>
 80025ec:	2300      	movs	r3, #0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a25      	ldr	r2, [pc, #148]	; (800269c <HAL_TIM_PWM_Start+0x1d4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d022      	beq.n	8002652 <HAL_TIM_PWM_Start+0x18a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002614:	d01d      	beq.n	8002652 <HAL_TIM_PWM_Start+0x18a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <HAL_TIM_PWM_Start+0x1dc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d018      	beq.n	8002652 <HAL_TIM_PWM_Start+0x18a>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a20      	ldr	r2, [pc, #128]	; (80026a8 <HAL_TIM_PWM_Start+0x1e0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_TIM_PWM_Start+0x18a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1f      	ldr	r2, [pc, #124]	; (80026ac <HAL_TIM_PWM_Start+0x1e4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00e      	beq.n	8002652 <HAL_TIM_PWM_Start+0x18a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <HAL_TIM_PWM_Start+0x1d8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_TIM_PWM_Start+0x18a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1b      	ldr	r2, [pc, #108]	; (80026b0 <HAL_TIM_PWM_Start+0x1e8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_TIM_PWM_Start+0x18a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a19      	ldr	r2, [pc, #100]	; (80026b4 <HAL_TIM_PWM_Start+0x1ec>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d115      	bne.n	800267e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <HAL_TIM_PWM_Start+0x1f0>)
 800265a:	4013      	ands	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b06      	cmp	r3, #6
 8002662:	d015      	beq.n	8002690 <HAL_TIM_PWM_Start+0x1c8>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266a:	d011      	beq.n	8002690 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267c:	e008      	b.n	8002690 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e000      	b.n	8002692 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002690:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40010000 	.word	0x40010000
 80026a0:	40010400 	.word	0x40010400
 80026a4:	40000400 	.word	0x40000400
 80026a8:	40000800 	.word	0x40000800
 80026ac:	40000c00 	.word	0x40000c00
 80026b0:	40014000 	.word	0x40014000
 80026b4:	40001800 	.word	0x40001800
 80026b8:	00010007 	.word	0x00010007

080026bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2200      	movs	r2, #0
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fde2 	bl	8003298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a36      	ldr	r2, [pc, #216]	; (80027b4 <HAL_TIM_PWM_Stop+0xf8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d004      	beq.n	80026e8 <HAL_TIM_PWM_Stop+0x2c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a35      	ldr	r2, [pc, #212]	; (80027b8 <HAL_TIM_PWM_Stop+0xfc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d101      	bne.n	80026ec <HAL_TIM_PWM_Stop+0x30>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <HAL_TIM_PWM_Stop+0x32>
 80026ec:	2300      	movs	r3, #0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d017      	beq.n	8002722 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6a1a      	ldr	r2, [r3, #32]
 80026f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10f      	bne.n	8002722 <HAL_TIM_PWM_Stop+0x66>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6a1a      	ldr	r2, [r3, #32]
 8002708:	f240 4344 	movw	r3, #1092	; 0x444
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <HAL_TIM_PWM_Stop+0x66>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002720:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6a1a      	ldr	r2, [r3, #32]
 8002728:	f241 1311 	movw	r3, #4369	; 0x1111
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10f      	bne.n	8002752 <HAL_TIM_PWM_Stop+0x96>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6a1a      	ldr	r2, [r3, #32]
 8002738:	f240 4344 	movw	r3, #1092	; 0x444
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d107      	bne.n	8002752 <HAL_TIM_PWM_Stop+0x96>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0201 	bic.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d104      	bne.n	8002762 <HAL_TIM_PWM_Stop+0xa6>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002760:	e023      	b.n	80027aa <HAL_TIM_PWM_Stop+0xee>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b04      	cmp	r3, #4
 8002766:	d104      	bne.n	8002772 <HAL_TIM_PWM_Stop+0xb6>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002770:	e01b      	b.n	80027aa <HAL_TIM_PWM_Stop+0xee>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b08      	cmp	r3, #8
 8002776:	d104      	bne.n	8002782 <HAL_TIM_PWM_Stop+0xc6>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002780:	e013      	b.n	80027aa <HAL_TIM_PWM_Stop+0xee>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b0c      	cmp	r3, #12
 8002786:	d104      	bne.n	8002792 <HAL_TIM_PWM_Stop+0xd6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002790:	e00b      	b.n	80027aa <HAL_TIM_PWM_Stop+0xee>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b10      	cmp	r3, #16
 8002796:	d104      	bne.n	80027a2 <HAL_TIM_PWM_Stop+0xe6>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027a0:	e003      	b.n	80027aa <HAL_TIM_PWM_Stop+0xee>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40010400 	.word	0x40010400

080027bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e0fd      	b.n	80029d2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b14      	cmp	r3, #20
 80027e2:	f200 80f0 	bhi.w	80029c6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80027e6:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80027e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ec:	08002841 	.word	0x08002841
 80027f0:	080029c7 	.word	0x080029c7
 80027f4:	080029c7 	.word	0x080029c7
 80027f8:	080029c7 	.word	0x080029c7
 80027fc:	08002881 	.word	0x08002881
 8002800:	080029c7 	.word	0x080029c7
 8002804:	080029c7 	.word	0x080029c7
 8002808:	080029c7 	.word	0x080029c7
 800280c:	080028c3 	.word	0x080028c3
 8002810:	080029c7 	.word	0x080029c7
 8002814:	080029c7 	.word	0x080029c7
 8002818:	080029c7 	.word	0x080029c7
 800281c:	08002903 	.word	0x08002903
 8002820:	080029c7 	.word	0x080029c7
 8002824:	080029c7 	.word	0x080029c7
 8002828:	080029c7 	.word	0x080029c7
 800282c:	08002945 	.word	0x08002945
 8002830:	080029c7 	.word	0x080029c7
 8002834:	080029c7 	.word	0x080029c7
 8002838:	080029c7 	.word	0x080029c7
 800283c:	08002985 	.word	0x08002985
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fa2e 	bl	8002ca8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0208 	orr.w	r2, r2, #8
 800285a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0204 	bic.w	r2, r2, #4
 800286a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6999      	ldr	r1, [r3, #24]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	619a      	str	r2, [r3, #24]
      break;
 800287e:	e0a3      	b.n	80029c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fa80 	bl	8002d8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800289a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6999      	ldr	r1, [r3, #24]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	021a      	lsls	r2, r3, #8
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	619a      	str	r2, [r3, #24]
      break;
 80028c0:	e082      	b.n	80029c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fad7 	bl	8002e7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69da      	ldr	r2, [r3, #28]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0208 	orr.w	r2, r2, #8
 80028dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69da      	ldr	r2, [r3, #28]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0204 	bic.w	r2, r2, #4
 80028ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69d9      	ldr	r1, [r3, #28]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	61da      	str	r2, [r3, #28]
      break;
 8002900:	e062      	b.n	80029c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fb2d 	bl	8002f68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69da      	ldr	r2, [r3, #28]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800291c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69da      	ldr	r2, [r3, #28]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69d9      	ldr	r1, [r3, #28]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	021a      	lsls	r2, r3, #8
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	61da      	str	r2, [r3, #28]
      break;
 8002942:	e041      	b.n	80029c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fb64 	bl	8003018 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0208 	orr.w	r2, r2, #8
 800295e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0204 	bic.w	r2, r2, #4
 800296e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002982:	e021      	b.n	80029c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fb96 	bl	80030bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800299e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	021a      	lsls	r2, r3, #8
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80029c4:	e000      	b.n	80029c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80029c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop

080029dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_TIM_ConfigClockSource+0x18>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e0b3      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x180>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4b55      	ldr	r3, [pc, #340]	; (8002b64 <HAL_TIM_ConfigClockSource+0x188>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a2c:	d03e      	beq.n	8002aac <HAL_TIM_ConfigClockSource+0xd0>
 8002a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a32:	f200 8087 	bhi.w	8002b44 <HAL_TIM_ConfigClockSource+0x168>
 8002a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3a:	f000 8085 	beq.w	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a42:	d87f      	bhi.n	8002b44 <HAL_TIM_ConfigClockSource+0x168>
 8002a44:	2b70      	cmp	r3, #112	; 0x70
 8002a46:	d01a      	beq.n	8002a7e <HAL_TIM_ConfigClockSource+0xa2>
 8002a48:	2b70      	cmp	r3, #112	; 0x70
 8002a4a:	d87b      	bhi.n	8002b44 <HAL_TIM_ConfigClockSource+0x168>
 8002a4c:	2b60      	cmp	r3, #96	; 0x60
 8002a4e:	d050      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x116>
 8002a50:	2b60      	cmp	r3, #96	; 0x60
 8002a52:	d877      	bhi.n	8002b44 <HAL_TIM_ConfigClockSource+0x168>
 8002a54:	2b50      	cmp	r3, #80	; 0x50
 8002a56:	d03c      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0xf6>
 8002a58:	2b50      	cmp	r3, #80	; 0x50
 8002a5a:	d873      	bhi.n	8002b44 <HAL_TIM_ConfigClockSource+0x168>
 8002a5c:	2b40      	cmp	r3, #64	; 0x40
 8002a5e:	d058      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x136>
 8002a60:	2b40      	cmp	r3, #64	; 0x40
 8002a62:	d86f      	bhi.n	8002b44 <HAL_TIM_ConfigClockSource+0x168>
 8002a64:	2b30      	cmp	r3, #48	; 0x30
 8002a66:	d064      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x156>
 8002a68:	2b30      	cmp	r3, #48	; 0x30
 8002a6a:	d86b      	bhi.n	8002b44 <HAL_TIM_ConfigClockSource+0x168>
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d060      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x156>
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d867      	bhi.n	8002b44 <HAL_TIM_ConfigClockSource+0x168>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d05c      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x156>
 8002a78:	2b10      	cmp	r3, #16
 8002a7a:	d05a      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a7c:	e062      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6899      	ldr	r1, [r3, #8]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f000 fbe3 	bl	8003258 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002aa0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	609a      	str	r2, [r3, #8]
      break;
 8002aaa:	e04e      	b.n	8002b4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f000 fbcc 	bl	8003258 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ace:	609a      	str	r2, [r3, #8]
      break;
 8002ad0:	e03b      	b.n	8002b4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f000 fb40 	bl	8003164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2150      	movs	r1, #80	; 0x50
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fb99 	bl	8003222 <TIM_ITRx_SetConfig>
      break;
 8002af0:	e02b      	b.n	8002b4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6859      	ldr	r1, [r3, #4]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	461a      	mov	r2, r3
 8002b00:	f000 fb5f 	bl	80031c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2160      	movs	r1, #96	; 0x60
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fb89 	bl	8003222 <TIM_ITRx_SetConfig>
      break;
 8002b10:	e01b      	b.n	8002b4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6859      	ldr	r1, [r3, #4]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f000 fb20 	bl	8003164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2140      	movs	r1, #64	; 0x40
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fb79 	bl	8003222 <TIM_ITRx_SetConfig>
      break;
 8002b30:	e00b      	b.n	8002b4a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	f000 fb70 	bl	8003222 <TIM_ITRx_SetConfig>
        break;
 8002b42:	e002      	b.n	8002b4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b44:	bf00      	nop
 8002b46:	e000      	b.n	8002b4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	fffeff88 	.word	0xfffeff88

08002b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a40      	ldr	r2, [pc, #256]	; (8002c7c <TIM_Base_SetConfig+0x114>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b86:	d00f      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a3d      	ldr	r2, [pc, #244]	; (8002c80 <TIM_Base_SetConfig+0x118>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00b      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a3c      	ldr	r2, [pc, #240]	; (8002c84 <TIM_Base_SetConfig+0x11c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d007      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a3b      	ldr	r2, [pc, #236]	; (8002c88 <TIM_Base_SetConfig+0x120>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d003      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a3a      	ldr	r2, [pc, #232]	; (8002c8c <TIM_Base_SetConfig+0x124>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d108      	bne.n	8002bba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a2f      	ldr	r2, [pc, #188]	; (8002c7c <TIM_Base_SetConfig+0x114>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d02b      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d027      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a2c      	ldr	r2, [pc, #176]	; (8002c80 <TIM_Base_SetConfig+0x118>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d023      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a2b      	ldr	r2, [pc, #172]	; (8002c84 <TIM_Base_SetConfig+0x11c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01f      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a2a      	ldr	r2, [pc, #168]	; (8002c88 <TIM_Base_SetConfig+0x120>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01b      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a29      	ldr	r2, [pc, #164]	; (8002c8c <TIM_Base_SetConfig+0x124>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d017      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a28      	ldr	r2, [pc, #160]	; (8002c90 <TIM_Base_SetConfig+0x128>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a27      	ldr	r2, [pc, #156]	; (8002c94 <TIM_Base_SetConfig+0x12c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00f      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a26      	ldr	r2, [pc, #152]	; (8002c98 <TIM_Base_SetConfig+0x130>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00b      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a25      	ldr	r2, [pc, #148]	; (8002c9c <TIM_Base_SetConfig+0x134>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d007      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a24      	ldr	r2, [pc, #144]	; (8002ca0 <TIM_Base_SetConfig+0x138>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d003      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a23      	ldr	r2, [pc, #140]	; (8002ca4 <TIM_Base_SetConfig+0x13c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d108      	bne.n	8002c2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <TIM_Base_SetConfig+0x114>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d003      	beq.n	8002c60 <TIM_Base_SetConfig+0xf8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <TIM_Base_SetConfig+0x124>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d103      	bne.n	8002c68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	615a      	str	r2, [r3, #20]
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	40000400 	.word	0x40000400
 8002c84:	40000800 	.word	0x40000800
 8002c88:	40000c00 	.word	0x40000c00
 8002c8c:	40010400 	.word	0x40010400
 8002c90:	40014000 	.word	0x40014000
 8002c94:	40014400 	.word	0x40014400
 8002c98:	40014800 	.word	0x40014800
 8002c9c:	40001800 	.word	0x40001800
 8002ca0:	40001c00 	.word	0x40001c00
 8002ca4:	40002000 	.word	0x40002000

08002ca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	f023 0201 	bic.w	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4b2b      	ldr	r3, [pc, #172]	; (8002d80 <TIM_OC1_SetConfig+0xd8>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0303 	bic.w	r3, r3, #3
 8002cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f023 0302 	bic.w	r3, r3, #2
 8002cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <TIM_OC1_SetConfig+0xdc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d003      	beq.n	8002d0c <TIM_OC1_SetConfig+0x64>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a20      	ldr	r2, [pc, #128]	; (8002d88 <TIM_OC1_SetConfig+0xe0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d10c      	bne.n	8002d26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f023 0308 	bic.w	r3, r3, #8
 8002d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f023 0304 	bic.w	r3, r3, #4
 8002d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a16      	ldr	r2, [pc, #88]	; (8002d84 <TIM_OC1_SetConfig+0xdc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d003      	beq.n	8002d36 <TIM_OC1_SetConfig+0x8e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a15      	ldr	r2, [pc, #84]	; (8002d88 <TIM_OC1_SetConfig+0xe0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d111      	bne.n	8002d5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	621a      	str	r2, [r3, #32]
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	fffeff8f 	.word	0xfffeff8f
 8002d84:	40010000 	.word	0x40010000
 8002d88:	40010400 	.word	0x40010400

08002d8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f023 0210 	bic.w	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <TIM_OC2_SetConfig+0xe4>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f023 0320 	bic.w	r3, r3, #32
 8002dd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <TIM_OC2_SetConfig+0xe8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d003      	beq.n	8002df4 <TIM_OC2_SetConfig+0x68>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a22      	ldr	r2, [pc, #136]	; (8002e78 <TIM_OC2_SetConfig+0xec>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d10d      	bne.n	8002e10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <TIM_OC2_SetConfig+0xe8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d003      	beq.n	8002e20 <TIM_OC2_SetConfig+0x94>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <TIM_OC2_SetConfig+0xec>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d113      	bne.n	8002e48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	621a      	str	r2, [r3, #32]
}
 8002e62:	bf00      	nop
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	feff8fff 	.word	0xfeff8fff
 8002e74:	40010000 	.word	0x40010000
 8002e78:	40010400 	.word	0x40010400

08002e7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <TIM_OC3_SetConfig+0xe0>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 0303 	bic.w	r3, r3, #3
 8002eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a22      	ldr	r2, [pc, #136]	; (8002f60 <TIM_OC3_SetConfig+0xe4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d003      	beq.n	8002ee2 <TIM_OC3_SetConfig+0x66>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <TIM_OC3_SetConfig+0xe8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d10d      	bne.n	8002efe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <TIM_OC3_SetConfig+0xe4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d003      	beq.n	8002f0e <TIM_OC3_SetConfig+0x92>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a16      	ldr	r2, [pc, #88]	; (8002f64 <TIM_OC3_SetConfig+0xe8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d113      	bne.n	8002f36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	621a      	str	r2, [r3, #32]
}
 8002f50:	bf00      	nop
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	fffeff8f 	.word	0xfffeff8f
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40010400 	.word	0x40010400

08002f68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4b1e      	ldr	r3, [pc, #120]	; (800300c <TIM_OC4_SetConfig+0xa4>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	031b      	lsls	r3, r3, #12
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a13      	ldr	r2, [pc, #76]	; (8003010 <TIM_OC4_SetConfig+0xa8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d003      	beq.n	8002fd0 <TIM_OC4_SetConfig+0x68>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a12      	ldr	r2, [pc, #72]	; (8003014 <TIM_OC4_SetConfig+0xac>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d109      	bne.n	8002fe4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	019b      	lsls	r3, r3, #6
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	621a      	str	r2, [r3, #32]
}
 8002ffe:	bf00      	nop
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	feff8fff 	.word	0xfeff8fff
 8003010:	40010000 	.word	0x40010000
 8003014:	40010400 	.word	0x40010400

08003018 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <TIM_OC5_SetConfig+0x98>)
 8003044:	4013      	ands	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003058:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a12      	ldr	r2, [pc, #72]	; (80030b4 <TIM_OC5_SetConfig+0x9c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d003      	beq.n	8003076 <TIM_OC5_SetConfig+0x5e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a11      	ldr	r2, [pc, #68]	; (80030b8 <TIM_OC5_SetConfig+0xa0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d109      	bne.n	800308a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	621a      	str	r2, [r3, #32]
}
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	fffeff8f 	.word	0xfffeff8f
 80030b4:	40010000 	.word	0x40010000
 80030b8:	40010400 	.word	0x40010400

080030bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <TIM_OC6_SetConfig+0x9c>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	051b      	lsls	r3, r3, #20
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a13      	ldr	r2, [pc, #76]	; (800315c <TIM_OC6_SetConfig+0xa0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <TIM_OC6_SetConfig+0x60>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a12      	ldr	r2, [pc, #72]	; (8003160 <TIM_OC6_SetConfig+0xa4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d109      	bne.n	8003130 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003122:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	029b      	lsls	r3, r3, #10
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	621a      	str	r2, [r3, #32]
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	feff8fff 	.word	0xfeff8fff
 800315c:	40010000 	.word	0x40010000
 8003160:	40010400 	.word	0x40010400

08003164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f023 0201 	bic.w	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800318e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f023 030a 	bic.w	r3, r3, #10
 80031a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	621a      	str	r2, [r3, #32]
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b087      	sub	sp, #28
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f023 0210 	bic.w	r2, r3, #16
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	031b      	lsls	r3, r3, #12
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	f043 0307 	orr.w	r3, r3, #7
 8003244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	609a      	str	r2, [r3, #8]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	431a      	orrs	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4313      	orrs	r3, r2
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	609a      	str	r2, [r3, #8]
}
 800328c:	bf00      	nop
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	2201      	movs	r2, #1
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a1a      	ldr	r2, [r3, #32]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	401a      	ands	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1a      	ldr	r2, [r3, #32]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	431a      	orrs	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	621a      	str	r2, [r3, #32]
}
 80032d6:	bf00      	nop
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e06d      	b.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a30      	ldr	r2, [pc, #192]	; (80033e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2f      	ldr	r2, [pc, #188]	; (80033e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d108      	bne.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003336:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003348:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a20      	ldr	r2, [pc, #128]	; (80033e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d022      	beq.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336e:	d01d      	beq.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d018      	beq.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00e      	beq.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a15      	ldr	r2, [pc, #84]	; (80033e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a15      	ldr	r2, [pc, #84]	; (80033fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d10c      	bne.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	40010000 	.word	0x40010000
 80033e8:	40010400 	.word	0x40010400
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000800 	.word	0x40000800
 80033f4:	40000c00 	.word	0x40000c00
 80033f8:	40014000 	.word	0x40014000
 80033fc:	40001800 	.word	0x40001800

08003400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e040      	b.n	8003494 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd fb1c 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f82c 	bl	800349c <UART_SetConfig>
 8003444:	4603      	mov	r3, r0
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e022      	b.n	8003494 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa82 	bl	8003960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800346a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800347a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fb09 	bl	8003aa4 <UART_CheckIdleState>
 8003492:	4603      	mov	r3, r0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4ba7      	ldr	r3, [pc, #668]	; (8003764 <UART_SetConfig+0x2c8>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	6979      	ldr	r1, [r7, #20]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a95      	ldr	r2, [pc, #596]	; (8003768 <UART_SetConfig+0x2cc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d120      	bne.n	800355a <UART_SetConfig+0xbe>
 8003518:	4b94      	ldr	r3, [pc, #592]	; (800376c <UART_SetConfig+0x2d0>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b03      	cmp	r3, #3
 8003524:	d816      	bhi.n	8003554 <UART_SetConfig+0xb8>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <UART_SetConfig+0x90>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	0800353d 	.word	0x0800353d
 8003530:	08003549 	.word	0x08003549
 8003534:	08003543 	.word	0x08003543
 8003538:	0800354f 	.word	0x0800354f
 800353c:	2301      	movs	r3, #1
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e14f      	b.n	80037e2 <UART_SetConfig+0x346>
 8003542:	2302      	movs	r3, #2
 8003544:	77fb      	strb	r3, [r7, #31]
 8003546:	e14c      	b.n	80037e2 <UART_SetConfig+0x346>
 8003548:	2304      	movs	r3, #4
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e149      	b.n	80037e2 <UART_SetConfig+0x346>
 800354e:	2308      	movs	r3, #8
 8003550:	77fb      	strb	r3, [r7, #31]
 8003552:	e146      	b.n	80037e2 <UART_SetConfig+0x346>
 8003554:	2310      	movs	r3, #16
 8003556:	77fb      	strb	r3, [r7, #31]
 8003558:	e143      	b.n	80037e2 <UART_SetConfig+0x346>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a84      	ldr	r2, [pc, #528]	; (8003770 <UART_SetConfig+0x2d4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d132      	bne.n	80035ca <UART_SetConfig+0x12e>
 8003564:	4b81      	ldr	r3, [pc, #516]	; (800376c <UART_SetConfig+0x2d0>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d828      	bhi.n	80035c4 <UART_SetConfig+0x128>
 8003572:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <UART_SetConfig+0xdc>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	080035ad 	.word	0x080035ad
 800357c:	080035c5 	.word	0x080035c5
 8003580:	080035c5 	.word	0x080035c5
 8003584:	080035c5 	.word	0x080035c5
 8003588:	080035b9 	.word	0x080035b9
 800358c:	080035c5 	.word	0x080035c5
 8003590:	080035c5 	.word	0x080035c5
 8003594:	080035c5 	.word	0x080035c5
 8003598:	080035b3 	.word	0x080035b3
 800359c:	080035c5 	.word	0x080035c5
 80035a0:	080035c5 	.word	0x080035c5
 80035a4:	080035c5 	.word	0x080035c5
 80035a8:	080035bf 	.word	0x080035bf
 80035ac:	2300      	movs	r3, #0
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e117      	b.n	80037e2 <UART_SetConfig+0x346>
 80035b2:	2302      	movs	r3, #2
 80035b4:	77fb      	strb	r3, [r7, #31]
 80035b6:	e114      	b.n	80037e2 <UART_SetConfig+0x346>
 80035b8:	2304      	movs	r3, #4
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e111      	b.n	80037e2 <UART_SetConfig+0x346>
 80035be:	2308      	movs	r3, #8
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e10e      	b.n	80037e2 <UART_SetConfig+0x346>
 80035c4:	2310      	movs	r3, #16
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e10b      	b.n	80037e2 <UART_SetConfig+0x346>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a69      	ldr	r2, [pc, #420]	; (8003774 <UART_SetConfig+0x2d8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d120      	bne.n	8003616 <UART_SetConfig+0x17a>
 80035d4:	4b65      	ldr	r3, [pc, #404]	; (800376c <UART_SetConfig+0x2d0>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035de:	2b30      	cmp	r3, #48	; 0x30
 80035e0:	d013      	beq.n	800360a <UART_SetConfig+0x16e>
 80035e2:	2b30      	cmp	r3, #48	; 0x30
 80035e4:	d814      	bhi.n	8003610 <UART_SetConfig+0x174>
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d009      	beq.n	80035fe <UART_SetConfig+0x162>
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d810      	bhi.n	8003610 <UART_SetConfig+0x174>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <UART_SetConfig+0x15c>
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d006      	beq.n	8003604 <UART_SetConfig+0x168>
 80035f6:	e00b      	b.n	8003610 <UART_SetConfig+0x174>
 80035f8:	2300      	movs	r3, #0
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e0f1      	b.n	80037e2 <UART_SetConfig+0x346>
 80035fe:	2302      	movs	r3, #2
 8003600:	77fb      	strb	r3, [r7, #31]
 8003602:	e0ee      	b.n	80037e2 <UART_SetConfig+0x346>
 8003604:	2304      	movs	r3, #4
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e0eb      	b.n	80037e2 <UART_SetConfig+0x346>
 800360a:	2308      	movs	r3, #8
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	e0e8      	b.n	80037e2 <UART_SetConfig+0x346>
 8003610:	2310      	movs	r3, #16
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	e0e5      	b.n	80037e2 <UART_SetConfig+0x346>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a57      	ldr	r2, [pc, #348]	; (8003778 <UART_SetConfig+0x2dc>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d120      	bne.n	8003662 <UART_SetConfig+0x1c6>
 8003620:	4b52      	ldr	r3, [pc, #328]	; (800376c <UART_SetConfig+0x2d0>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800362a:	2bc0      	cmp	r3, #192	; 0xc0
 800362c:	d013      	beq.n	8003656 <UART_SetConfig+0x1ba>
 800362e:	2bc0      	cmp	r3, #192	; 0xc0
 8003630:	d814      	bhi.n	800365c <UART_SetConfig+0x1c0>
 8003632:	2b80      	cmp	r3, #128	; 0x80
 8003634:	d009      	beq.n	800364a <UART_SetConfig+0x1ae>
 8003636:	2b80      	cmp	r3, #128	; 0x80
 8003638:	d810      	bhi.n	800365c <UART_SetConfig+0x1c0>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <UART_SetConfig+0x1a8>
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d006      	beq.n	8003650 <UART_SetConfig+0x1b4>
 8003642:	e00b      	b.n	800365c <UART_SetConfig+0x1c0>
 8003644:	2300      	movs	r3, #0
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e0cb      	b.n	80037e2 <UART_SetConfig+0x346>
 800364a:	2302      	movs	r3, #2
 800364c:	77fb      	strb	r3, [r7, #31]
 800364e:	e0c8      	b.n	80037e2 <UART_SetConfig+0x346>
 8003650:	2304      	movs	r3, #4
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	e0c5      	b.n	80037e2 <UART_SetConfig+0x346>
 8003656:	2308      	movs	r3, #8
 8003658:	77fb      	strb	r3, [r7, #31]
 800365a:	e0c2      	b.n	80037e2 <UART_SetConfig+0x346>
 800365c:	2310      	movs	r3, #16
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e0bf      	b.n	80037e2 <UART_SetConfig+0x346>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a45      	ldr	r2, [pc, #276]	; (800377c <UART_SetConfig+0x2e0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d125      	bne.n	80036b8 <UART_SetConfig+0x21c>
 800366c:	4b3f      	ldr	r3, [pc, #252]	; (800376c <UART_SetConfig+0x2d0>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800367a:	d017      	beq.n	80036ac <UART_SetConfig+0x210>
 800367c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003680:	d817      	bhi.n	80036b2 <UART_SetConfig+0x216>
 8003682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003686:	d00b      	beq.n	80036a0 <UART_SetConfig+0x204>
 8003688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368c:	d811      	bhi.n	80036b2 <UART_SetConfig+0x216>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <UART_SetConfig+0x1fe>
 8003692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003696:	d006      	beq.n	80036a6 <UART_SetConfig+0x20a>
 8003698:	e00b      	b.n	80036b2 <UART_SetConfig+0x216>
 800369a:	2300      	movs	r3, #0
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e0a0      	b.n	80037e2 <UART_SetConfig+0x346>
 80036a0:	2302      	movs	r3, #2
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e09d      	b.n	80037e2 <UART_SetConfig+0x346>
 80036a6:	2304      	movs	r3, #4
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e09a      	b.n	80037e2 <UART_SetConfig+0x346>
 80036ac:	2308      	movs	r3, #8
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e097      	b.n	80037e2 <UART_SetConfig+0x346>
 80036b2:	2310      	movs	r3, #16
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e094      	b.n	80037e2 <UART_SetConfig+0x346>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a30      	ldr	r2, [pc, #192]	; (8003780 <UART_SetConfig+0x2e4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d125      	bne.n	800370e <UART_SetConfig+0x272>
 80036c2:	4b2a      	ldr	r3, [pc, #168]	; (800376c <UART_SetConfig+0x2d0>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036d0:	d017      	beq.n	8003702 <UART_SetConfig+0x266>
 80036d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036d6:	d817      	bhi.n	8003708 <UART_SetConfig+0x26c>
 80036d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036dc:	d00b      	beq.n	80036f6 <UART_SetConfig+0x25a>
 80036de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e2:	d811      	bhi.n	8003708 <UART_SetConfig+0x26c>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <UART_SetConfig+0x254>
 80036e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ec:	d006      	beq.n	80036fc <UART_SetConfig+0x260>
 80036ee:	e00b      	b.n	8003708 <UART_SetConfig+0x26c>
 80036f0:	2301      	movs	r3, #1
 80036f2:	77fb      	strb	r3, [r7, #31]
 80036f4:	e075      	b.n	80037e2 <UART_SetConfig+0x346>
 80036f6:	2302      	movs	r3, #2
 80036f8:	77fb      	strb	r3, [r7, #31]
 80036fa:	e072      	b.n	80037e2 <UART_SetConfig+0x346>
 80036fc:	2304      	movs	r3, #4
 80036fe:	77fb      	strb	r3, [r7, #31]
 8003700:	e06f      	b.n	80037e2 <UART_SetConfig+0x346>
 8003702:	2308      	movs	r3, #8
 8003704:	77fb      	strb	r3, [r7, #31]
 8003706:	e06c      	b.n	80037e2 <UART_SetConfig+0x346>
 8003708:	2310      	movs	r3, #16
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e069      	b.n	80037e2 <UART_SetConfig+0x346>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1c      	ldr	r2, [pc, #112]	; (8003784 <UART_SetConfig+0x2e8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d137      	bne.n	8003788 <UART_SetConfig+0x2ec>
 8003718:	4b14      	ldr	r3, [pc, #80]	; (800376c <UART_SetConfig+0x2d0>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003722:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003726:	d017      	beq.n	8003758 <UART_SetConfig+0x2bc>
 8003728:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800372c:	d817      	bhi.n	800375e <UART_SetConfig+0x2c2>
 800372e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003732:	d00b      	beq.n	800374c <UART_SetConfig+0x2b0>
 8003734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003738:	d811      	bhi.n	800375e <UART_SetConfig+0x2c2>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <UART_SetConfig+0x2aa>
 800373e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003742:	d006      	beq.n	8003752 <UART_SetConfig+0x2b6>
 8003744:	e00b      	b.n	800375e <UART_SetConfig+0x2c2>
 8003746:	2300      	movs	r3, #0
 8003748:	77fb      	strb	r3, [r7, #31]
 800374a:	e04a      	b.n	80037e2 <UART_SetConfig+0x346>
 800374c:	2302      	movs	r3, #2
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e047      	b.n	80037e2 <UART_SetConfig+0x346>
 8003752:	2304      	movs	r3, #4
 8003754:	77fb      	strb	r3, [r7, #31]
 8003756:	e044      	b.n	80037e2 <UART_SetConfig+0x346>
 8003758:	2308      	movs	r3, #8
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e041      	b.n	80037e2 <UART_SetConfig+0x346>
 800375e:	2310      	movs	r3, #16
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e03e      	b.n	80037e2 <UART_SetConfig+0x346>
 8003764:	efff69f3 	.word	0xefff69f3
 8003768:	40011000 	.word	0x40011000
 800376c:	40023800 	.word	0x40023800
 8003770:	40004400 	.word	0x40004400
 8003774:	40004800 	.word	0x40004800
 8003778:	40004c00 	.word	0x40004c00
 800377c:	40005000 	.word	0x40005000
 8003780:	40011400 	.word	0x40011400
 8003784:	40007800 	.word	0x40007800
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a71      	ldr	r2, [pc, #452]	; (8003954 <UART_SetConfig+0x4b8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d125      	bne.n	80037de <UART_SetConfig+0x342>
 8003792:	4b71      	ldr	r3, [pc, #452]	; (8003958 <UART_SetConfig+0x4bc>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800379c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037a0:	d017      	beq.n	80037d2 <UART_SetConfig+0x336>
 80037a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037a6:	d817      	bhi.n	80037d8 <UART_SetConfig+0x33c>
 80037a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ac:	d00b      	beq.n	80037c6 <UART_SetConfig+0x32a>
 80037ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b2:	d811      	bhi.n	80037d8 <UART_SetConfig+0x33c>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <UART_SetConfig+0x324>
 80037b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037bc:	d006      	beq.n	80037cc <UART_SetConfig+0x330>
 80037be:	e00b      	b.n	80037d8 <UART_SetConfig+0x33c>
 80037c0:	2300      	movs	r3, #0
 80037c2:	77fb      	strb	r3, [r7, #31]
 80037c4:	e00d      	b.n	80037e2 <UART_SetConfig+0x346>
 80037c6:	2302      	movs	r3, #2
 80037c8:	77fb      	strb	r3, [r7, #31]
 80037ca:	e00a      	b.n	80037e2 <UART_SetConfig+0x346>
 80037cc:	2304      	movs	r3, #4
 80037ce:	77fb      	strb	r3, [r7, #31]
 80037d0:	e007      	b.n	80037e2 <UART_SetConfig+0x346>
 80037d2:	2308      	movs	r3, #8
 80037d4:	77fb      	strb	r3, [r7, #31]
 80037d6:	e004      	b.n	80037e2 <UART_SetConfig+0x346>
 80037d8:	2310      	movs	r3, #16
 80037da:	77fb      	strb	r3, [r7, #31]
 80037dc:	e001      	b.n	80037e2 <UART_SetConfig+0x346>
 80037de:	2310      	movs	r3, #16
 80037e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ea:	d15b      	bne.n	80038a4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80037ec:	7ffb      	ldrb	r3, [r7, #31]
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d827      	bhi.n	8003842 <UART_SetConfig+0x3a6>
 80037f2:	a201      	add	r2, pc, #4	; (adr r2, 80037f8 <UART_SetConfig+0x35c>)
 80037f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f8:	0800381d 	.word	0x0800381d
 80037fc:	08003825 	.word	0x08003825
 8003800:	0800382d 	.word	0x0800382d
 8003804:	08003843 	.word	0x08003843
 8003808:	08003833 	.word	0x08003833
 800380c:	08003843 	.word	0x08003843
 8003810:	08003843 	.word	0x08003843
 8003814:	08003843 	.word	0x08003843
 8003818:	0800383b 	.word	0x0800383b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800381c:	f7fe f94c 	bl	8001ab8 <HAL_RCC_GetPCLK1Freq>
 8003820:	61b8      	str	r0, [r7, #24]
        break;
 8003822:	e013      	b.n	800384c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003824:	f7fe f95c 	bl	8001ae0 <HAL_RCC_GetPCLK2Freq>
 8003828:	61b8      	str	r0, [r7, #24]
        break;
 800382a:	e00f      	b.n	800384c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800382c:	4b4b      	ldr	r3, [pc, #300]	; (800395c <UART_SetConfig+0x4c0>)
 800382e:	61bb      	str	r3, [r7, #24]
        break;
 8003830:	e00c      	b.n	800384c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003832:	f7fe f87f 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 8003836:	61b8      	str	r0, [r7, #24]
        break;
 8003838:	e008      	b.n	800384c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800383a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800383e:	61bb      	str	r3, [r7, #24]
        break;
 8003840:	e004      	b.n	800384c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	77bb      	strb	r3, [r7, #30]
        break;
 800384a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d074      	beq.n	800393c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	005a      	lsls	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	441a      	add	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	b29b      	uxth	r3, r3
 8003868:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b0f      	cmp	r3, #15
 800386e:	d916      	bls.n	800389e <UART_SetConfig+0x402>
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003876:	d212      	bcs.n	800389e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f023 030f 	bic.w	r3, r3, #15
 8003880:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	b29b      	uxth	r3, r3
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	b29a      	uxth	r2, r3
 800388e:	89fb      	ldrh	r3, [r7, #14]
 8003890:	4313      	orrs	r3, r2
 8003892:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	89fa      	ldrh	r2, [r7, #14]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	e04e      	b.n	800393c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	77bb      	strb	r3, [r7, #30]
 80038a2:	e04b      	b.n	800393c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038a4:	7ffb      	ldrb	r3, [r7, #31]
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d827      	bhi.n	80038fa <UART_SetConfig+0x45e>
 80038aa:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <UART_SetConfig+0x414>)
 80038ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b0:	080038d5 	.word	0x080038d5
 80038b4:	080038dd 	.word	0x080038dd
 80038b8:	080038e5 	.word	0x080038e5
 80038bc:	080038fb 	.word	0x080038fb
 80038c0:	080038eb 	.word	0x080038eb
 80038c4:	080038fb 	.word	0x080038fb
 80038c8:	080038fb 	.word	0x080038fb
 80038cc:	080038fb 	.word	0x080038fb
 80038d0:	080038f3 	.word	0x080038f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d4:	f7fe f8f0 	bl	8001ab8 <HAL_RCC_GetPCLK1Freq>
 80038d8:	61b8      	str	r0, [r7, #24]
        break;
 80038da:	e013      	b.n	8003904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038dc:	f7fe f900 	bl	8001ae0 <HAL_RCC_GetPCLK2Freq>
 80038e0:	61b8      	str	r0, [r7, #24]
        break;
 80038e2:	e00f      	b.n	8003904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e4:	4b1d      	ldr	r3, [pc, #116]	; (800395c <UART_SetConfig+0x4c0>)
 80038e6:	61bb      	str	r3, [r7, #24]
        break;
 80038e8:	e00c      	b.n	8003904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ea:	f7fe f823 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80038ee:	61b8      	str	r0, [r7, #24]
        break;
 80038f0:	e008      	b.n	8003904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038f6:	61bb      	str	r3, [r7, #24]
        break;
 80038f8:	e004      	b.n	8003904 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	77bb      	strb	r3, [r7, #30]
        break;
 8003902:	bf00      	nop
    }

    if (pclk != 0U)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d018      	beq.n	800393c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	085a      	lsrs	r2, r3, #1
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	441a      	add	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	b29b      	uxth	r3, r3
 800391e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b0f      	cmp	r3, #15
 8003924:	d908      	bls.n	8003938 <UART_SetConfig+0x49c>
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392c:	d204      	bcs.n	8003938 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	e001      	b.n	800393c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003948:	7fbb      	ldrb	r3, [r7, #30]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3720      	adds	r7, #32
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40007c00 	.word	0x40007c00
 8003958:	40023800 	.word	0x40023800
 800395c:	00f42400 	.word	0x00f42400

08003960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01a      	beq.n	8003a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5e:	d10a      	bne.n	8003a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	605a      	str	r2, [r3, #4]
  }
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ab4:	f7fd f892 	bl	8000bdc <HAL_GetTick>
 8003ab8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d10e      	bne.n	8003ae6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f82d 	bl	8003b36 <UART_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e023      	b.n	8003b2e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d10e      	bne.n	8003b12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003af4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f817 	bl	8003b36 <UART_WaitOnFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e00d      	b.n	8003b2e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	4613      	mov	r3, r2
 8003b44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b46:	e05e      	b.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4e:	d05a      	beq.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b50:	f7fd f844 	bl	8000bdc <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d302      	bcc.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11b      	bne.n	8003b9e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e043      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d02c      	beq.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bba:	d124      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bd4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0201 	bic.w	r2, r2, #1
 8003be4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e00f      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d091      	beq.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <__libc_init_array>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	4d0d      	ldr	r5, [pc, #52]	; (8003c68 <__libc_init_array+0x38>)
 8003c34:	4c0d      	ldr	r4, [pc, #52]	; (8003c6c <__libc_init_array+0x3c>)
 8003c36:	1b64      	subs	r4, r4, r5
 8003c38:	10a4      	asrs	r4, r4, #2
 8003c3a:	2600      	movs	r6, #0
 8003c3c:	42a6      	cmp	r6, r4
 8003c3e:	d109      	bne.n	8003c54 <__libc_init_array+0x24>
 8003c40:	4d0b      	ldr	r5, [pc, #44]	; (8003c70 <__libc_init_array+0x40>)
 8003c42:	4c0c      	ldr	r4, [pc, #48]	; (8003c74 <__libc_init_array+0x44>)
 8003c44:	f000 f820 	bl	8003c88 <_init>
 8003c48:	1b64      	subs	r4, r4, r5
 8003c4a:	10a4      	asrs	r4, r4, #2
 8003c4c:	2600      	movs	r6, #0
 8003c4e:	42a6      	cmp	r6, r4
 8003c50:	d105      	bne.n	8003c5e <__libc_init_array+0x2e>
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c58:	4798      	blx	r3
 8003c5a:	3601      	adds	r6, #1
 8003c5c:	e7ee      	b.n	8003c3c <__libc_init_array+0xc>
 8003c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c62:	4798      	blx	r3
 8003c64:	3601      	adds	r6, #1
 8003c66:	e7f2      	b.n	8003c4e <__libc_init_array+0x1e>
 8003c68:	08003cc0 	.word	0x08003cc0
 8003c6c:	08003cc0 	.word	0x08003cc0
 8003c70:	08003cc0 	.word	0x08003cc0
 8003c74:	08003cc4 	.word	0x08003cc4

08003c78 <memset>:
 8003c78:	4402      	add	r2, r0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d100      	bne.n	8003c82 <memset+0xa>
 8003c80:	4770      	bx	lr
 8003c82:	f803 1b01 	strb.w	r1, [r3], #1
 8003c86:	e7f9      	b.n	8003c7c <memset+0x4>

08003c88 <_init>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	bf00      	nop
 8003c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8e:	bc08      	pop	{r3}
 8003c90:	469e      	mov	lr, r3
 8003c92:	4770      	bx	lr

08003c94 <_fini>:
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	bf00      	nop
 8003c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9a:	bc08      	pop	{r3}
 8003c9c:	469e      	mov	lr, r3
 8003c9e:	4770      	bx	lr
