
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006420  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08006620  08006620  00016620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a4c  08006a4c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006a4c  08006a4c  00016a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a54  08006a54  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a54  08006a54  00016a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a58  08006a58  00016a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08006a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  200001e4  08006c40  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08006c40  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5c4  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000210e  00000000  00000000  0002c7d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0002e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002f238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288a0  00000000  00000000  0002faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbc3  00000000  00000000  00058340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f745c  00000000  00000000  00063f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015b35f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003358  00000000  00000000  0015b3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08006608 	.word	0x08006608

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	08006608 	.word	0x08006608

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_ADC1_Init+0x98>)
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <MX_ADC1_Init+0x9c>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_ADC1_Init+0x98>)
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_ADC1_Init+0x98>)
 8000616:	2201      	movs	r2, #1
 8000618:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_ADC1_Init+0x98>)
 800062a:	4a17      	ldr	r2, [pc, #92]	; (8000688 <MX_ADC1_Init+0xa0>)
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_ADC1_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_ADC1_Init+0x98>)
 800064a:	f000 fd65 	bl	8001118 <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000654:	f000 fb16 	bl	8000c84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000658:	230a      	movs	r3, #10
 800065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_ADC1_Init+0x98>)
 800066a:	f000 feff 	bl	800146c <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000674:	f000 fb06 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000288 	.word	0x20000288
 8000684:	40012000 	.word	0x40012000
 8000688:	0f000001 	.word	0x0f000001

0800068c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a15      	ldr	r2, [pc, #84]	; (8000700 <HAL_ADC_MspInit+0x74>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d123      	bne.n	80006f6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <HAL_ADC_MspInit+0x78>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	4a14      	ldr	r2, [pc, #80]	; (8000704 <HAL_ADC_MspInit+0x78>)
 80006b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_ADC_MspInit+0x78>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <HAL_ADC_MspInit+0x78>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <HAL_ADC_MspInit+0x78>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <HAL_ADC_MspInit+0x78>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006de:	2301      	movs	r3, #1
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e2:	2303      	movs	r3, #3
 80006e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <HAL_ADC_MspInit+0x7c>)
 80006f2:	f001 f9e5 	bl	8001ac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	; 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40012000 	.word	0x40012000
 8000704:	40023800 	.word	0x40023800
 8000708:	40020800 	.word	0x40020800

0800070c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a2e      	ldr	r2, [pc, #184]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073a:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <MX_GPIO_Init+0xd4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a28      	ldr	r2, [pc, #160]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000740:	f043 0320 	orr.w	r3, r3, #32
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0320 	and.w	r3, r3, #32
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a22      	ldr	r2, [pc, #136]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000758:	f043 0310 	orr.w	r3, r3, #16
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0310 	and.w	r3, r3, #16
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_GPIO_Init+0xd4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000788:	4816      	ldr	r0, [pc, #88]	; (80007e4 <MX_GPIO_Init+0xd8>)
 800078a:	f001 fb45 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8000794:	4814      	ldr	r0, [pc, #80]	; (80007e8 <MX_GPIO_Init+0xdc>)
 8000796:	f001 fb3f 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800079a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480c      	ldr	r0, [pc, #48]	; (80007e4 <MX_GPIO_Init+0xd8>)
 80007b4:	f001 f984 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80007b8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_GPIO_Init+0xdc>)
 80007d2:	f001 f975 	bl	8001ac0 <HAL_GPIO_Init>

}
 80007d6:	bf00      	nop
 80007d8:	3728      	adds	r7, #40	; 0x28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40021400 	.word	0x40021400
 80007e8:	40021000 	.word	0x40021000

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f0:	f000 fc11 	bl	8001016 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f4:	f000 f83c 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f8:	f7ff ff88 	bl	800070c <MX_GPIO_Init>
  MX_ADC1_Init();
 80007fc:	f7ff fef4 	bl	80005e8 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000800:	f000 fb6c 	bl	8000edc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000804:	4816      	ldr	r0, [pc, #88]	; (8000860 <main+0x74>)
 8000806:	f000 fccb 	bl	80011a0 <HAL_ADC_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //displayHEX(hex1);

	  while(HAL_ADC_PollForConversion(&hadc1,100)!= HAL_OK){}
 800080a:	bf00      	nop
 800080c:	2164      	movs	r1, #100	; 0x64
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <main+0x74>)
 8000810:	f000 fd94 	bl	800133c <HAL_ADC_PollForConversion>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1f8      	bne.n	800080c <main+0x20>
	  adc_val = HAL_ADC_GetValue(&hadc1);
 800081a:	4811      	ldr	r0, [pc, #68]	; (8000860 <main+0x74>)
 800081c:	f000 fe19 	bl	8001452 <HAL_ADC_GetValue>
 8000820:	4603      	mov	r3, r0
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <main+0x78>)
 8000824:	6013      	str	r3, [r2, #0]
	  displayHEX(adc_val);
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <main+0x78>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f8b4 	bl	8000998 <displayHEX>
	  adc_val8 = average_8(adc_val);
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <main+0x78>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f000 f9c5 	bl	8000bc4 <average_8>
 800083a:	4603      	mov	r3, r0
 800083c:	461a      	mov	r2, r3
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <main+0x7c>)
 8000840:	601a      	str	r2, [r3, #0]
	  adc_val16 = average_16(adc_val);
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <main+0x78>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f9ec 	bl	8000c24 <average_16>
 800084c:	4603      	mov	r3, r0
 800084e:	461a      	mov	r2, r3
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <main+0x80>)
 8000852:	601a      	str	r2, [r3, #0]
	  HAL_Delay(500);
 8000854:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000858:	f000 fc3a 	bl	80010d0 <HAL_Delay>
	  while(HAL_ADC_PollForConversion(&hadc1,100)!= HAL_OK){}
 800085c:	e7d5      	b.n	800080a <main+0x1e>
 800085e:	bf00      	nop
 8000860:	20000288 	.word	0x20000288
 8000864:	20000200 	.word	0x20000200
 8000868:	20000204 	.word	0x20000204
 800086c:	20000208 	.word	0x20000208

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b0b8      	sub	sp, #224	; 0xe0
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800087a:	2234      	movs	r2, #52	; 0x34
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f003 f8b6 	bl	80039f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	2290      	movs	r2, #144	; 0x90
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f003 f8a7 	bl	80039f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b3b      	ldr	r3, [pc, #236]	; (8000990 <SystemClock_Config+0x120>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a3a      	ldr	r2, [pc, #232]	; (8000990 <SystemClock_Config+0x120>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b38      	ldr	r3, [pc, #224]	; (8000990 <SystemClock_Config+0x120>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ba:	4b36      	ldr	r3, [pc, #216]	; (8000994 <SystemClock_Config+0x124>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a35      	ldr	r2, [pc, #212]	; (8000994 <SystemClock_Config+0x124>)
 80008c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	4b33      	ldr	r3, [pc, #204]	; (8000994 <SystemClock_Config+0x124>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d2:	2302      	movs	r3, #2
 80008d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d8:	2301      	movs	r3, #1
 80008da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008de:	2310      	movs	r3, #16
 80008e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e4:	2302      	movs	r3, #2
 80008e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f0:	2308      	movs	r3, #8
 80008f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008f6:	23d8      	movs	r3, #216	; 0xd8
 80008f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000902:	2302      	movs	r3, #2
 8000904:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000912:	4618      	mov	r0, r3
 8000914:	f001 faea 	bl	8001eec <HAL_RCC_OscConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800091e:	f000 f9b1 	bl	8000c84 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000922:	f001 fa93 	bl	8001e4c <HAL_PWREx_EnableOverDrive>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800092c:	f000 f9aa 	bl	8000c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2302      	movs	r3, #2
 8000938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000942:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000952:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000956:	2107      	movs	r1, #7
 8000958:	4618      	mov	r0, r3
 800095a:	f001 fd75 	bl	8002448 <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000964:	f000 f98e 	bl	8000c84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800096e:	2300      	movs	r3, #0
 8000970:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	4618      	mov	r0, r3
 8000978:	f001 ff3c 	bl	80027f4 <HAL_RCCEx_PeriphCLKConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000982:	f000 f97f 	bl	8000c84 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	37e0      	adds	r7, #224	; 0xe0
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <displayHEX>:

/* USER CODE BEGIN 4 */
void displayHEX(uint32_t x)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

	sprintf(ch,"%08X",x);
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <displayHEX+0x200>)
 80009a4:	487d      	ldr	r0, [pc, #500]	; (8000b9c <displayHEX+0x204>)
 80009a6:	f003 fc6d 	bl	8004284 <siprintf>
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80009aa:	bf00      	nop
 80009ac:	4b7c      	ldr	r3, [pc, #496]	; (8000ba0 <displayHEX+0x208>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b6:	2b40      	cmp	r3, #64	; 0x40
 80009b8:	d1f8      	bne.n	80009ac <displayHEX+0x14>
	HAL_UART_Transmit(&huart3, (uint8_t*)"ADC1_CH10 0x",12,1000);
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	220c      	movs	r2, #12
 80009c0:	4978      	ldr	r1, [pc, #480]	; (8000ba4 <displayHEX+0x20c>)
 80009c2:	4877      	ldr	r0, [pc, #476]	; (8000ba0 <displayHEX+0x208>)
 80009c4:	f002 fb8c 	bl	80030e0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)ch,strlen(ch),1000);
 80009c8:	4874      	ldr	r0, [pc, #464]	; (8000b9c <displayHEX+0x204>)
 80009ca:	f7ff fc39 	bl	8000240 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d6:	4971      	ldr	r1, [pc, #452]	; (8000b9c <displayHEX+0x204>)
 80009d8:	4871      	ldr	r0, [pc, #452]	; (8000ba0 <displayHEX+0x208>)
 80009da:	f002 fb81 	bl	80030e0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)" Vin = ",7,1000);
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	2207      	movs	r2, #7
 80009e4:	4970      	ldr	r1, [pc, #448]	; (8000ba8 <displayHEX+0x210>)
 80009e6:	486e      	ldr	r0, [pc, #440]	; (8000ba0 <displayHEX+0x208>)
 80009e8:	f002 fb7a 	bl	80030e0 <HAL_UART_Transmit>


	vin =(float)x/4096.0*3.3;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	ee07 3a90 	vmov	s15, r3
 80009f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009f6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80009fa:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 8000b68 <displayHEX+0x1d0>
 80009fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a02:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8000b70 <displayHEX+0x1d8>
 8000a06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a0e:	4b67      	ldr	r3, [pc, #412]	; (8000bac <displayHEX+0x214>)
 8000a10:	edc3 7a00 	vstr	s15, [r3]
	sprintf(vin1,"%.2f",vin);
 8000a14:	4b65      	ldr	r3, [pc, #404]	; (8000bac <displayHEX+0x214>)
 8000a16:	edd3 7a00 	vldr	s15, [r3]
 8000a1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a1e:	ec53 2b17 	vmov	r2, r3, d7
 8000a22:	4963      	ldr	r1, [pc, #396]	; (8000bb0 <displayHEX+0x218>)
 8000a24:	4863      	ldr	r0, [pc, #396]	; (8000bb4 <displayHEX+0x21c>)
 8000a26:	f003 fc2d 	bl	8004284 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)vin1,strlen(vin1),1000);
 8000a2a:	4862      	ldr	r0, [pc, #392]	; (8000bb4 <displayHEX+0x21c>)
 8000a2c:	f7ff fc08 	bl	8000240 <strlen>
 8000a30:	4603      	mov	r3, r0
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a38:	495e      	ldr	r1, [pc, #376]	; (8000bb4 <displayHEX+0x21c>)
 8000a3a:	4859      	ldr	r0, [pc, #356]	; (8000ba0 <displayHEX+0x208>)
 8000a3c:	f002 fb50 	bl	80030e0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)" V\r\n",4,1000);
 8000a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a44:	2204      	movs	r2, #4
 8000a46:	495c      	ldr	r1, [pc, #368]	; (8000bb8 <displayHEX+0x220>)
 8000a48:	4855      	ldr	r0, [pc, #340]	; (8000ba0 <displayHEX+0x208>)
 8000a4a:	f002 fb49 	bl	80030e0 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a54:	4859      	ldr	r0, [pc, #356]	; (8000bbc <displayHEX+0x224>)
 8000a56:	f001 f9df 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a60:	4857      	ldr	r0, [pc, #348]	; (8000bc0 <displayHEX+0x228>)
 8000a62:	f001 f9d9 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a6c:	4854      	ldr	r0, [pc, #336]	; (8000bc0 <displayHEX+0x228>)
 8000a6e:	f001 f9d3 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a78:	4850      	ldr	r0, [pc, #320]	; (8000bbc <displayHEX+0x224>)
 8000a7a:	f001 f9cd 	bl	8001e18 <HAL_GPIO_WritePin>

	if(vin>2.64){
 8000a7e:	4b4b      	ldr	r3, [pc, #300]	; (8000bac <displayHEX+0x214>)
 8000a80:	edd3 7a00 	vldr	s15, [r3]
 8000a84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a88:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8000b78 <displayHEX+0x1e0>
 8000a8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a94:	dd18      	ble.n	8000ac8 <displayHEX+0x130>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9c:	4847      	ldr	r0, [pc, #284]	; (8000bbc <displayHEX+0x224>)
 8000a9e:	f001 f9bb 	bl	8001e18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa8:	4845      	ldr	r0, [pc, #276]	; (8000bc0 <displayHEX+0x228>)
 8000aaa:	f001 f9b5 	bl	8001e18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab4:	4842      	ldr	r0, [pc, #264]	; (8000bc0 <displayHEX+0x228>)
 8000ab6:	f001 f9af 	bl	8001e18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac0:	483e      	ldr	r0, [pc, #248]	; (8000bbc <displayHEX+0x224>)
 8000ac2:	f001 f9a9 	bl	8001e18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
	}else if(vin>0.66){
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
	}
}
 8000ac6:	e04a      	b.n	8000b5e <displayHEX+0x1c6>
	}else if(vin>1.98){
 8000ac8:	4b38      	ldr	r3, [pc, #224]	; (8000bac <displayHEX+0x214>)
 8000aca:	edd3 7a00 	vldr	s15, [r3]
 8000ace:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad2:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8000b80 <displayHEX+0x1e8>
 8000ad6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ade:	dd12      	ble.n	8000b06 <displayHEX+0x16e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae6:	4836      	ldr	r0, [pc, #216]	; (8000bc0 <displayHEX+0x228>)
 8000ae8:	f001 f996 	bl	8001e18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af2:	4833      	ldr	r0, [pc, #204]	; (8000bc0 <displayHEX+0x228>)
 8000af4:	f001 f990 	bl	8001e18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afe:	482f      	ldr	r0, [pc, #188]	; (8000bbc <displayHEX+0x224>)
 8000b00:	f001 f98a 	bl	8001e18 <HAL_GPIO_WritePin>
}
 8000b04:	e02b      	b.n	8000b5e <displayHEX+0x1c6>
	}else if(vin>1.32){
 8000b06:	4b29      	ldr	r3, [pc, #164]	; (8000bac <displayHEX+0x214>)
 8000b08:	edd3 7a00 	vldr	s15, [r3]
 8000b0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b10:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8000b88 <displayHEX+0x1f0>
 8000b14:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b1c:	dd0c      	ble.n	8000b38 <displayHEX+0x1a0>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b24:	4826      	ldr	r0, [pc, #152]	; (8000bc0 <displayHEX+0x228>)
 8000b26:	f001 f977 	bl	8001e18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b30:	4822      	ldr	r0, [pc, #136]	; (8000bbc <displayHEX+0x224>)
 8000b32:	f001 f971 	bl	8001e18 <HAL_GPIO_WritePin>
}
 8000b36:	e012      	b.n	8000b5e <displayHEX+0x1c6>
	}else if(vin>0.66){
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <displayHEX+0x214>)
 8000b3a:	edd3 7a00 	vldr	s15, [r3]
 8000b3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b42:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8000b90 <displayHEX+0x1f8>
 8000b46:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b4e:	dc00      	bgt.n	8000b52 <displayHEX+0x1ba>
}
 8000b50:	e005      	b.n	8000b5e <displayHEX+0x1c6>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b58:	4818      	ldr	r0, [pc, #96]	; (8000bbc <displayHEX+0x224>)
 8000b5a:	f001 f95d 	bl	8001e18 <HAL_GPIO_WritePin>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	40b00000 	.word	0x40b00000
 8000b70:	66666666 	.word	0x66666666
 8000b74:	400a6666 	.word	0x400a6666
 8000b78:	51eb851f 	.word	0x51eb851f
 8000b7c:	40051eb8 	.word	0x40051eb8
 8000b80:	7ae147ae 	.word	0x7ae147ae
 8000b84:	3fffae14 	.word	0x3fffae14
 8000b88:	51eb851f 	.word	0x51eb851f
 8000b8c:	3ff51eb8 	.word	0x3ff51eb8
 8000b90:	51eb851f 	.word	0x51eb851f
 8000b94:	3fe51eb8 	.word	0x3fe51eb8
 8000b98:	08006620 	.word	0x08006620
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	200002d4 	.word	0x200002d4
 8000ba4:	08006628 	.word	0x08006628
 8000ba8:	08006638 	.word	0x08006638
 8000bac:	200002d0 	.word	0x200002d0
 8000bb0:	08006640 	.word	0x08006640
 8000bb4:	20000004 	.word	0x20000004
 8000bb8:	08006648 	.word	0x08006648
 8000bbc:	40021400 	.word	0x40021400
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <average_8>:
int average_8(int x)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	static int samples[8];
	static int i=0;
	static int total =0;

	total+=x-samples[i];
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <average_8+0x54>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <average_8+0x58>)
 8000bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	1ad2      	subs	r2, r2, r3
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <average_8+0x5c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <average_8+0x5c>)
 8000be2:	6013      	str	r3, [r2, #0]
	samples[i] = x;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <average_8+0x54>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <average_8+0x58>)
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	i=(i==7? 0:i+1);
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <average_8+0x54>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b07      	cmp	r3, #7
 8000bf6:	d003      	beq.n	8000c00 <average_8+0x3c>
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <average_8+0x54>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	e000      	b.n	8000c02 <average_8+0x3e>
 8000c00:	2300      	movs	r3, #0
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <average_8+0x54>)
 8000c04:	6013      	str	r3, [r2, #0]

	return total>>3;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <average_8+0x5c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	10db      	asrs	r3, r3, #3
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	2000020c 	.word	0x2000020c
 8000c1c:	20000210 	.word	0x20000210
 8000c20:	20000230 	.word	0x20000230

08000c24 <average_16>:
int average_16(int x)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	static int samples[16];
	static int i=0;
	static int total =0;

	total+=x-samples[i];
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <average_16+0x54>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <average_16+0x58>)
 8000c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	1ad2      	subs	r2, r2, r3
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <average_16+0x5c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <average_16+0x5c>)
 8000c42:	6013      	str	r3, [r2, #0]
	samples[i] = x;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <average_16+0x54>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <average_16+0x58>)
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	i=(i==15? 0:i+1);
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <average_16+0x54>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d003      	beq.n	8000c60 <average_16+0x3c>
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <average_16+0x54>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	e000      	b.n	8000c62 <average_16+0x3e>
 8000c60:	2300      	movs	r3, #0
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <average_16+0x54>)
 8000c64:	6013      	str	r3, [r2, #0]

	return total>>4;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <average_16+0x5c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	111b      	asrs	r3, r3, #4
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	20000234 	.word	0x20000234
 8000c7c:	20000238 	.word	0x20000238
 8000c80:	20000278 	.word	0x20000278

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>
	...

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_MspInit+0x44>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <HAL_MspInit+0x44>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_MspInit+0x44>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f9b4 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
	return 1;
 8000d30:	2301      	movs	r3, #1
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_kill>:

int _kill(int pid, int sig)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d46:	f002 fe29 	bl	800399c <__errno>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2216      	movs	r2, #22
 8000d4e:	601a      	str	r2, [r3, #0]
	return -1;
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_exit>:

void _exit (int status)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ffe7 	bl	8000d3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d6e:	e7fe      	b.n	8000d6e <_exit+0x12>

08000d70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	e00a      	b.n	8000d98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d82:	f3af 8000 	nop.w
 8000d86:	4601      	mov	r1, r0
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	60ba      	str	r2, [r7, #8]
 8000d8e:	b2ca      	uxtb	r2, r1
 8000d90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dbf0      	blt.n	8000d82 <_read+0x12>
	}

return len;
 8000da0:	687b      	ldr	r3, [r7, #4]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	60f8      	str	r0, [r7, #12]
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	e009      	b.n	8000dd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	60ba      	str	r2, [r7, #8]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dbf1      	blt.n	8000dbc <_write+0x12>
	}
	return len;
 8000dd8:	687b      	ldr	r3, [r7, #4]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_close>:

int _close(int file)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
	return -1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <_isatty>:

int _isatty(int file)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
	return 1;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e54:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <_sbrk+0x5c>)
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <_sbrk+0x60>)
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d102      	bne.n	8000e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <_sbrk+0x64>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <_sbrk+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d207      	bcs.n	8000e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e7c:	f002 fd8e 	bl	800399c <__errno>
 8000e80:	4603      	mov	r3, r0
 8000e82:	220c      	movs	r2, #12
 8000e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	e009      	b.n	8000ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <_sbrk+0x64>)
 8000e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20080000 	.word	0x20080000
 8000eac:	00000400 	.word	0x00000400
 8000eb0:	2000027c 	.word	0x2000027c
 8000eb4:	20000370 	.word	0x20000370

08000eb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <SystemInit+0x20>)
 8000ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <SystemInit+0x20>)
 8000ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ee2:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <MX_USART3_UART_Init+0x5c>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f20:	f002 f890 	bl	8003044 <HAL_UART_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f2a:	f7ff feab 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200002d4 	.word	0x200002d4
 8000f38:	40004800 	.word	0x40004800

08000f3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_UART_MspInit+0x7c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d128      	bne.n	8000fb0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_UART_MspInit+0x84>)
 8000fac:	f000 fd88 	bl	8001ac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40004800 	.word	0x40004800
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020c00 	.word	0x40020c00

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ffc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fca:	490e      	ldr	r1, [pc, #56]	; (8001004 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe0:	4c0b      	ldr	r4, [pc, #44]	; (8001010 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fee:	f7ff ff63 	bl	8000eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f002 fcd9 	bl	80039a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fbf9 	bl	80007ec <main>
  bx  lr    
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ffc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001008:	08006a5c 	.word	0x08006a5c
  ldr r2, =_sbss
 800100c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001010:	2000036c 	.word	0x2000036c

08001014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC_IRQHandler>

08001016 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101a:	2003      	movs	r0, #3
 800101c:	f000 fd1c 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001020:	200f      	movs	r0, #15
 8001022:	f000 f805 	bl	8001030 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001026:	f7ff fe33 	bl	8000c90 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x54>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_InitTick+0x58>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001046:	fbb3 f3f1 	udiv	r3, r3, r1
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fd29 	bl	8001aa6 <HAL_SYSTICK_Config>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e00e      	b.n	800107c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d80a      	bhi.n	800107a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001064:	2200      	movs	r2, #0
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f000 fcff 	bl	8001a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <HAL_InitTick+0x5c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000008 	.word	0x20000008
 8001088:	20000010 	.word	0x20000010
 800108c:	2000000c 	.word	0x2000000c

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000010 	.word	0x20000010
 80010b4:	20000358 	.word	0x20000358

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000358 	.word	0x20000358

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff ffee 	bl	80010b8 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_Delay+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f6:	bf00      	nop
 80010f8:	f7ff ffde 	bl	80010b8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000010 	.word	0x20000010

08001118 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e031      	b.n	8001192 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	2b00      	cmp	r3, #0
 8001134:	d109      	bne.n	800114a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff faa8 	bl	800068c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	2b00      	cmp	r3, #0
 8001154:	d116      	bne.n	8001184 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_ADC_Init+0x84>)
 800115c:	4013      	ands	r3, r2
 800115e:	f043 0202 	orr.w	r2, r3, #2
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 faca 	bl	8001700 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f023 0303 	bic.w	r3, r3, #3
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	641a      	str	r2, [r3, #64]	; 0x40
 8001182:	e001      	b.n	8001188 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	ffffeefd 	.word	0xffffeefd

080011a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d101      	bne.n	80011ba <HAL_ADC_Start+0x1a>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e0ad      	b.n	8001316 <HAL_ADC_Start+0x176>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d018      	beq.n	8001202 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f042 0201 	orr.w	r2, r2, #1
 80011de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80011e0:	4b50      	ldr	r3, [pc, #320]	; (8001324 <HAL_ADC_Start+0x184>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a50      	ldr	r2, [pc, #320]	; (8001328 <HAL_ADC_Start+0x188>)
 80011e6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ea:	0c9a      	lsrs	r2, r3, #18
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80011f4:	e002      	b.n	80011fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f9      	bne.n	80011f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	d175      	bne.n	80012fc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001214:	4b45      	ldr	r3, [pc, #276]	; (800132c <HAL_ADC_Start+0x18c>)
 8001216:	4013      	ands	r3, r2
 8001218:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800122a:	2b00      	cmp	r3, #0
 800122c:	d007      	beq.n	800123e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001236:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800124a:	d106      	bne.n	800125a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001250:	f023 0206 	bic.w	r2, r3, #6
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	645a      	str	r2, [r3, #68]	; 0x44
 8001258:	e002      	b.n	8001260 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001270:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001272:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <HAL_ADC_Start+0x190>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10f      	bne.n	800129e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d143      	bne.n	8001314 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	e03a      	b.n	8001314 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a24      	ldr	r2, [pc, #144]	; (8001334 <HAL_ADC_Start+0x194>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d10e      	bne.n	80012c6 <HAL_ADC_Start+0x126>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d107      	bne.n	80012c6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012c4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <HAL_ADC_Start+0x190>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d120      	bne.n	8001314 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <HAL_ADC_Start+0x198>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d11b      	bne.n	8001314 <HAL_ADC_Start+0x174>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d114      	bne.n	8001314 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	e00b      	b.n	8001314 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f043 0210 	orr.w	r2, r3, #16
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130c:	f043 0201 	orr.w	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000008 	.word	0x20000008
 8001328:	431bde83 	.word	0x431bde83
 800132c:	fffff8fe 	.word	0xfffff8fe
 8001330:	40012300 	.word	0x40012300
 8001334:	40012000 	.word	0x40012000
 8001338:	40012200 	.word	0x40012200

0800133c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001358:	d113      	bne.n	8001382 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001368:	d10b      	bne.n	8001382 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f043 0220 	orr.w	r2, r3, #32
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e063      	b.n	800144a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001382:	f7ff fe99 	bl	80010b8 <HAL_GetTick>
 8001386:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001388:	e021      	b.n	80013ce <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d01d      	beq.n	80013ce <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d007      	beq.n	80013a8 <HAL_ADC_PollForConversion+0x6c>
 8001398:	f7ff fe8e 	bl	80010b8 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d212      	bcs.n	80013ce <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d00b      	beq.n	80013ce <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f043 0204 	orr.w	r2, r3, #4
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e03d      	b.n	800144a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d1d6      	bne.n	800138a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f06f 0212 	mvn.w	r2, #18
 80013e4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d123      	bne.n	8001448 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001404:	2b00      	cmp	r3, #0
 8001406:	d11f      	bne.n	8001448 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001420:	2b00      	cmp	r3, #0
 8001422:	d111      	bne.n	8001448 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d105      	bne.n	8001448 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f043 0201 	orr.w	r2, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x1c>
 8001484:	2302      	movs	r3, #2
 8001486:	e12a      	b.n	80016de <HAL_ADC_ConfigChannel+0x272>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b09      	cmp	r3, #9
 8001496:	d93a      	bls.n	800150e <HAL_ADC_ConfigChannel+0xa2>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014a0:	d035      	beq.n	800150e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68d9      	ldr	r1, [r3, #12]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	3b1e      	subs	r3, #30
 80014b8:	2207      	movs	r2, #7
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	400a      	ands	r2, r1
 80014c6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a87      	ldr	r2, [pc, #540]	; (80016ec <HAL_ADC_ConfigChannel+0x280>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10a      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68d9      	ldr	r1, [r3, #12]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	061a      	lsls	r2, r3, #24
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014e6:	e035      	b.n	8001554 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68d9      	ldr	r1, [r3, #12]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	4603      	mov	r3, r0
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4403      	add	r3, r0
 8001500:	3b1e      	subs	r3, #30
 8001502:	409a      	lsls	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800150c:	e022      	b.n	8001554 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6919      	ldr	r1, [r3, #16]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	b29b      	uxth	r3, r3
 800151a:	461a      	mov	r2, r3
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	2207      	movs	r2, #7
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43da      	mvns	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	400a      	ands	r2, r1
 8001530:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6919      	ldr	r1, [r3, #16]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	4603      	mov	r3, r0
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4403      	add	r3, r0
 800154a:	409a      	lsls	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b06      	cmp	r3, #6
 800155a:	d824      	bhi.n	80015a6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	3b05      	subs	r3, #5
 800156e:	221f      	movs	r2, #31
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43da      	mvns	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	400a      	ands	r2, r1
 800157c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	4618      	mov	r0, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3b05      	subs	r3, #5
 8001598:	fa00 f203 	lsl.w	r2, r0, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	635a      	str	r2, [r3, #52]	; 0x34
 80015a4:	e04c      	b.n	8001640 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d824      	bhi.n	80015f8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	3b23      	subs	r3, #35	; 0x23
 80015c0:	221f      	movs	r2, #31
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	400a      	ands	r2, r1
 80015ce:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	3b23      	subs	r3, #35	; 0x23
 80015ea:	fa00 f203 	lsl.w	r2, r0, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	631a      	str	r2, [r3, #48]	; 0x30
 80015f6:	e023      	b.n	8001640 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	3b41      	subs	r3, #65	; 0x41
 800160a:	221f      	movs	r2, #31
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43da      	mvns	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	400a      	ands	r2, r1
 8001618:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	3b41      	subs	r3, #65	; 0x41
 8001634:	fa00 f203 	lsl.w	r2, r0, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a2a      	ldr	r2, [pc, #168]	; (80016f0 <HAL_ADC_ConfigChannel+0x284>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d10a      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1f4>
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001652:	d105      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_ADC_ConfigChannel+0x288>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4a26      	ldr	r2, [pc, #152]	; (80016f4 <HAL_ADC_ConfigChannel+0x288>)
 800165a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800165e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <HAL_ADC_ConfigChannel+0x284>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d109      	bne.n	800167e <HAL_ADC_ConfigChannel+0x212>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b12      	cmp	r3, #18
 8001670:	d105      	bne.n	800167e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <HAL_ADC_ConfigChannel+0x288>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4a1f      	ldr	r2, [pc, #124]	; (80016f4 <HAL_ADC_ConfigChannel+0x288>)
 8001678:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800167c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <HAL_ADC_ConfigChannel+0x284>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d125      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x268>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a17      	ldr	r2, [pc, #92]	; (80016ec <HAL_ADC_ConfigChannel+0x280>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d003      	beq.n	800169a <HAL_ADC_ConfigChannel+0x22e>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b11      	cmp	r3, #17
 8001698:	d11c      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800169a:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_ADC_ConfigChannel+0x288>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <HAL_ADC_ConfigChannel+0x288>)
 80016a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_ADC_ConfigChannel+0x280>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d111      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_ADC_ConfigChannel+0x28c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a11      	ldr	r2, [pc, #68]	; (80016fc <HAL_ADC_ConfigChannel+0x290>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	0c9a      	lsrs	r2, r3, #18
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016c6:	e002      	b.n	80016ce <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f9      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	10000012 	.word	0x10000012
 80016f0:	40012000 	.word	0x40012000
 80016f4:	40012300 	.word	0x40012300
 80016f8:	20000008 	.word	0x20000008
 80016fc:	431bde83 	.word	0x431bde83

08001700 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001708:	4b78      	ldr	r3, [pc, #480]	; (80018ec <ADC_Init+0x1ec>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a77      	ldr	r2, [pc, #476]	; (80018ec <ADC_Init+0x1ec>)
 800170e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001712:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001714:	4b75      	ldr	r3, [pc, #468]	; (80018ec <ADC_Init+0x1ec>)
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4973      	ldr	r1, [pc, #460]	; (80018ec <ADC_Init+0x1ec>)
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6859      	ldr	r1, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	021a      	lsls	r2, r3, #8
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001754:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6859      	ldr	r1, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001776:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6899      	ldr	r1, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	4a58      	ldr	r2, [pc, #352]	; (80018f0 <ADC_Init+0x1f0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d022      	beq.n	80017da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6899      	ldr	r1, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6899      	ldr	r1, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	e00f      	b.n	80017fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0202 	bic.w	r2, r2, #2
 8001808:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6899      	ldr	r1, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	005a      	lsls	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d01b      	beq.n	8001860 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001836:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001846:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6859      	ldr	r1, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	3b01      	subs	r3, #1
 8001854:	035a      	lsls	r2, r3, #13
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	e007      	b.n	8001870 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800186e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	3b01      	subs	r3, #1
 800188c:	051a      	lsls	r2, r3, #20
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6899      	ldr	r1, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018b2:	025a      	lsls	r2, r3, #9
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6899      	ldr	r1, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	029a      	lsls	r2, r3, #10
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	609a      	str	r2, [r3, #8]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40012300 	.word	0x40012300
 80018f0:	0f000001 	.word	0x0f000001

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <__NVIC_SetPriorityGrouping+0x40>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	4313      	orrs	r3, r2
 8001920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001922:	4a04      	ldr	r2, [pc, #16]	; (8001934 <__NVIC_SetPriorityGrouping+0x40>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60d3      	str	r3, [r2, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00
 8001938:	05fa0000 	.word	0x05fa0000

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7ff ff8e 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff47 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff5c 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff8e 	bl	80019ac <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5d 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffb0 	bl	8001a14 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	e175      	b.n	8001dcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f040 8164 	bne.w	8001dc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d00b      	beq.n	8001b1e <HAL_GPIO_Init+0x5e>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d007      	beq.n	8001b1e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b12:	2b11      	cmp	r3, #17
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b12      	cmp	r3, #18
 8001b1c:	d130      	bne.n	8001b80 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	2203      	movs	r2, #3
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b54:	2201      	movs	r2, #1
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	f003 0201 	and.w	r2, r3, #1
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x100>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b12      	cmp	r3, #18
 8001bbe:	d123      	bne.n	8001c08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	08da      	lsrs	r2, r3, #3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3208      	adds	r2, #8
 8001bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	691a      	ldr	r2, [r3, #16]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	08da      	lsrs	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3208      	adds	r2, #8
 8001c02:	69b9      	ldr	r1, [r7, #24]
 8001c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0203 	and.w	r2, r3, #3
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80be 	beq.w	8001dc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	4b66      	ldr	r3, [pc, #408]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a65      	ldr	r2, [pc, #404]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b63      	ldr	r3, [pc, #396]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c62:	4a61      	ldr	r2, [pc, #388]	; (8001de8 <HAL_GPIO_Init+0x328>)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a58      	ldr	r2, [pc, #352]	; (8001dec <HAL_GPIO_Init+0x32c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d037      	beq.n	8001cfe <HAL_GPIO_Init+0x23e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a57      	ldr	r2, [pc, #348]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d031      	beq.n	8001cfa <HAL_GPIO_Init+0x23a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a56      	ldr	r2, [pc, #344]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d02b      	beq.n	8001cf6 <HAL_GPIO_Init+0x236>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a55      	ldr	r2, [pc, #340]	; (8001df8 <HAL_GPIO_Init+0x338>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d025      	beq.n	8001cf2 <HAL_GPIO_Init+0x232>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a54      	ldr	r2, [pc, #336]	; (8001dfc <HAL_GPIO_Init+0x33c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01f      	beq.n	8001cee <HAL_GPIO_Init+0x22e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a53      	ldr	r2, [pc, #332]	; (8001e00 <HAL_GPIO_Init+0x340>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d019      	beq.n	8001cea <HAL_GPIO_Init+0x22a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_GPIO_Init+0x344>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0x226>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a51      	ldr	r2, [pc, #324]	; (8001e08 <HAL_GPIO_Init+0x348>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_GPIO_Init+0x222>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a50      	ldr	r2, [pc, #320]	; (8001e0c <HAL_GPIO_Init+0x34c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0x21e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_GPIO_Init+0x21a>
 8001cd6:	2309      	movs	r3, #9
 8001cd8:	e012      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cda:	230a      	movs	r3, #10
 8001cdc:	e010      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cde:	2308      	movs	r3, #8
 8001ce0:	e00e      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	e00c      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e00a      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cea:	2305      	movs	r3, #5
 8001cec:	e008      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f002 0203 	and.w	r2, r2, #3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d10:	4935      	ldr	r1, [pc, #212]	; (8001de8 <HAL_GPIO_Init+0x328>)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d42:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6c:	4a29      	ldr	r2, [pc, #164]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d72:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d96:	4a1f      	ldr	r2, [pc, #124]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc0:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	f67f ae86 	bls.w	8001ae0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020800 	.word	0x40020800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40021400 	.word	0x40021400
 8001e04:	40021800 	.word	0x40021800
 8001e08:	40021c00 	.word	0x40021c00
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	40022400 	.word	0x40022400
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e34:	e003      	b.n	8001e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e7a:	f7ff f91d 	bl	80010b8 <HAL_GetTick>
 8001e7e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e80:	e009      	b.n	8001e96 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e82:	f7ff f919 	bl	80010b8 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e90:	d901      	bls.n	8001e96 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e022      	b.n	8001edc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea2:	d1ee      	bne.n	8001e82 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb0:	f7ff f902 	bl	80010b8 <HAL_GetTick>
 8001eb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eb6:	e009      	b.n	8001ecc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eb8:	f7ff f8fe 	bl	80010b8 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ec6:	d901      	bls.n	8001ecc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e007      	b.n	8001edc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ed8:	d1ee      	bne.n	8001eb8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000

08001eec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e29b      	b.n	800243a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 8087 	beq.w	800201e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f10:	4b96      	ldr	r3, [pc, #600]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d00c      	beq.n	8001f36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1c:	4b93      	ldr	r3, [pc, #588]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d112      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62>
 8001f28:	4b90      	ldr	r3, [pc, #576]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f34:	d10b      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f36:	4b8d      	ldr	r3, [pc, #564]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d06c      	beq.n	800201c <HAL_RCC_OscConfig+0x130>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d168      	bne.n	800201c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e275      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x7a>
 8001f58:	4b84      	ldr	r3, [pc, #528]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a83      	ldr	r2, [pc, #524]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	e02e      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd8>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x9c>
 8001f6e:	4b7f      	ldr	r3, [pc, #508]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a7e      	ldr	r2, [pc, #504]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b7c      	ldr	r3, [pc, #496]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a7b      	ldr	r2, [pc, #492]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e01d      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0xc0>
 8001f92:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a75      	ldr	r2, [pc, #468]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b73      	ldr	r3, [pc, #460]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a72      	ldr	r2, [pc, #456]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd8>
 8001fac:	4b6f      	ldr	r3, [pc, #444]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a6e      	ldr	r2, [pc, #440]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b6c      	ldr	r3, [pc, #432]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6b      	ldr	r2, [pc, #428]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d013      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7ff f874 	bl	80010b8 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7ff f870 	bl	80010b8 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e229      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	4b61      	ldr	r3, [pc, #388]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0xe8>
 8001ff2:	e014      	b.n	800201e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f860 	bl	80010b8 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7ff f85c 	bl	80010b8 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e215      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	4b57      	ldr	r3, [pc, #348]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x110>
 800201a:	e000      	b.n	800201e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d069      	beq.n	80020fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800202a:	4b50      	ldr	r3, [pc, #320]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002036:	4b4d      	ldr	r3, [pc, #308]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b08      	cmp	r3, #8
 8002040:	d11c      	bne.n	800207c <HAL_RCC_OscConfig+0x190>
 8002042:	4b4a      	ldr	r3, [pc, #296]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d116      	bne.n	800207c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_RCC_OscConfig+0x17a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d001      	beq.n	8002066 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e1e9      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002066:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	493d      	ldr	r1, [pc, #244]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207a:	e040      	b.n	80020fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d023      	beq.n	80020cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a38      	ldr	r2, [pc, #224]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7ff f812 	bl	80010b8 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002098:	f7ff f80e 	bl	80010b8 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1c7      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4929      	ldr	r1, [pc, #164]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
 80020ca:	e018      	b.n	80020fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020cc:	4b27      	ldr	r3, [pc, #156]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a26      	ldr	r2, [pc, #152]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe ffee 	bl	80010b8 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e0:	f7fe ffea 	bl	80010b8 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e1a3      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d038      	beq.n	800217c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d019      	beq.n	8002146 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002112:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002116:	4a15      	ldr	r2, [pc, #84]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211e:	f7fe ffcb 	bl	80010b8 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002126:	f7fe ffc7 	bl	80010b8 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e180      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800213a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x23a>
 8002144:	e01a      	b.n	800217c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214a:	4a08      	ldr	r2, [pc, #32]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7fe ffb1 	bl	80010b8 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215a:	f7fe ffad 	bl	80010b8 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d903      	bls.n	8002170 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e166      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
 800216c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	4b92      	ldr	r3, [pc, #584]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ee      	bne.n	800215a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80a4 	beq.w	80022d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218a:	4b8c      	ldr	r3, [pc, #560]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10d      	bne.n	80021b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b89      	ldr	r3, [pc, #548]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a88      	ldr	r2, [pc, #544]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b86      	ldr	r3, [pc, #536]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b2:	4b83      	ldr	r3, [pc, #524]	; (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d118      	bne.n	80021f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021be:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7f      	ldr	r2, [pc, #508]	; (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ca:	f7fe ff75 	bl	80010b8 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d2:	f7fe ff71 	bl	80010b8 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b64      	cmp	r3, #100	; 0x64
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e12a      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e4:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x31a>
 80021f8:	4b70      	ldr	r3, [pc, #448]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	4a6f      	ldr	r2, [pc, #444]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6713      	str	r3, [r2, #112]	; 0x70
 8002204:	e02d      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x33c>
 800220e:	4b6b      	ldr	r3, [pc, #428]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a6a      	ldr	r2, [pc, #424]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
 800221a:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	4a67      	ldr	r2, [pc, #412]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6713      	str	r3, [r2, #112]	; 0x70
 8002226:	e01c      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d10c      	bne.n	800224a <HAL_RCC_OscConfig+0x35e>
 8002230:	4b62      	ldr	r3, [pc, #392]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	4a61      	ldr	r2, [pc, #388]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6713      	str	r3, [r2, #112]	; 0x70
 800223c:	4b5f      	ldr	r3, [pc, #380]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	4a5e      	ldr	r2, [pc, #376]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6713      	str	r3, [r2, #112]	; 0x70
 8002248:	e00b      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
 800224a:	4b5c      	ldr	r3, [pc, #368]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a5b      	ldr	r2, [pc, #364]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6713      	str	r3, [r2, #112]	; 0x70
 8002256:	4b59      	ldr	r3, [pc, #356]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d015      	beq.n	8002296 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226a:	f7fe ff25 	bl	80010b8 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe ff21 	bl	80010b8 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0d8      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	4b4c      	ldr	r3, [pc, #304]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ee      	beq.n	8002272 <HAL_RCC_OscConfig+0x386>
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7fe ff0f 	bl	80010b8 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe ff0b 	bl	80010b8 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0c2      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b4:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ee      	bne.n	800229e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a3c      	ldr	r2, [pc, #240]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80ae 	beq.w	8002438 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022dc:	4b37      	ldr	r3, [pc, #220]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d06d      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d14b      	bne.n	8002388 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a31      	ldr	r2, [pc, #196]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fedc 	bl	80010b8 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7fe fed8 	bl	80010b8 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e091      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002316:	4b29      	ldr	r3, [pc, #164]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	019b      	lsls	r3, r3, #6
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	3b01      	subs	r3, #1
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	061b      	lsls	r3, r3, #24
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	071b      	lsls	r3, r3, #28
 800234e:	491b      	ldr	r1, [pc, #108]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a18      	ldr	r2, [pc, #96]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800235a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe feaa 	bl	80010b8 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe fea6 	bl	80010b8 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e05f      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x47c>
 8002386:	e057      	b.n	8002438 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800238e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe fe90 	bl	80010b8 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239c:	f7fe fe8c 	bl	80010b8 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e045      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ae:	4b03      	ldr	r3, [pc, #12]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x4b0>
 80023ba:	e03d      	b.n	8002438 <HAL_RCC_OscConfig+0x54c>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023c4:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <HAL_RCC_OscConfig+0x558>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d030      	beq.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d129      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d122      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023f4:	4013      	ands	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d119      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	3b01      	subs	r3, #1
 800240e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d10f      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d107      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800

08002448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0d0      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b6a      	ldr	r3, [pc, #424]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d910      	bls.n	8002490 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b67      	ldr	r3, [pc, #412]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 020f 	bic.w	r2, r3, #15
 8002476:	4965      	ldr	r1, [pc, #404]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b63      	ldr	r3, [pc, #396]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0b8      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a8:	4b59      	ldr	r3, [pc, #356]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a58      	ldr	r2, [pc, #352]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c0:	4b53      	ldr	r3, [pc, #332]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4a52      	ldr	r2, [pc, #328]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024cc:	4b50      	ldr	r3, [pc, #320]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	494d      	ldr	r1, [pc, #308]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d040      	beq.n	800256c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d115      	bne.n	800252a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e07f      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e073      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e06b      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252a:	4b39      	ldr	r3, [pc, #228]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f023 0203 	bic.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4936      	ldr	r1, [pc, #216]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800253c:	f7fe fdbc 	bl	80010b8 <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	e00a      	b.n	800255a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002544:	f7fe fdb8 	bl	80010b8 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e053      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 020c 	and.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	429a      	cmp	r2, r3
 800256a:	d1eb      	bne.n	8002544 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d210      	bcs.n	800259c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 020f 	bic.w	r2, r3, #15
 8002582:	4922      	ldr	r1, [pc, #136]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e032      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4916      	ldr	r1, [pc, #88]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	490e      	ldr	r1, [pc, #56]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025da:	f000 f821 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	490a      	ldr	r1, [pc, #40]	; (8002614 <HAL_RCC_ClockConfig+0x1cc>)
 80025ec:	5ccb      	ldrb	r3, [r1, r3]
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	4a09      	ldr	r2, [pc, #36]	; (8002618 <HAL_RCC_ClockConfig+0x1d0>)
 80025f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x1d4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fd18 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023c00 	.word	0x40023c00
 8002610:	40023800 	.word	0x40023800
 8002614:	08006650 	.word	0x08006650
 8002618:	20000008 	.word	0x20000008
 800261c:	2000000c 	.word	0x2000000c

08002620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002620:	b5b0      	push	{r4, r5, r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002626:	2100      	movs	r1, #0
 8002628:	6079      	str	r1, [r7, #4]
 800262a:	2100      	movs	r1, #0
 800262c:	60f9      	str	r1, [r7, #12]
 800262e:	2100      	movs	r1, #0
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002632:	2100      	movs	r1, #0
 8002634:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002636:	4952      	ldr	r1, [pc, #328]	; (8002780 <HAL_RCC_GetSysClockFreq+0x160>)
 8002638:	6889      	ldr	r1, [r1, #8]
 800263a:	f001 010c 	and.w	r1, r1, #12
 800263e:	2908      	cmp	r1, #8
 8002640:	d00d      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0x3e>
 8002642:	2908      	cmp	r1, #8
 8002644:	f200 8094 	bhi.w	8002770 <HAL_RCC_GetSysClockFreq+0x150>
 8002648:	2900      	cmp	r1, #0
 800264a:	d002      	beq.n	8002652 <HAL_RCC_GetSysClockFreq+0x32>
 800264c:	2904      	cmp	r1, #4
 800264e:	d003      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x38>
 8002650:	e08e      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002652:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <HAL_RCC_GetSysClockFreq+0x164>)
 8002654:	60bb      	str	r3, [r7, #8]
      break;
 8002656:	e08e      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002658:	4b4b      	ldr	r3, [pc, #300]	; (8002788 <HAL_RCC_GetSysClockFreq+0x168>)
 800265a:	60bb      	str	r3, [r7, #8]
      break;
 800265c:	e08b      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800265e:	4948      	ldr	r1, [pc, #288]	; (8002780 <HAL_RCC_GetSysClockFreq+0x160>)
 8002660:	6849      	ldr	r1, [r1, #4]
 8002662:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002666:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002668:	4945      	ldr	r1, [pc, #276]	; (8002780 <HAL_RCC_GetSysClockFreq+0x160>)
 800266a:	6849      	ldr	r1, [r1, #4]
 800266c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002670:	2900      	cmp	r1, #0
 8002672:	d024      	beq.n	80026be <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002674:	4942      	ldr	r1, [pc, #264]	; (8002780 <HAL_RCC_GetSysClockFreq+0x160>)
 8002676:	6849      	ldr	r1, [r1, #4]
 8002678:	0989      	lsrs	r1, r1, #6
 800267a:	4608      	mov	r0, r1
 800267c:	f04f 0100 	mov.w	r1, #0
 8002680:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002684:	f04f 0500 	mov.w	r5, #0
 8002688:	ea00 0204 	and.w	r2, r0, r4
 800268c:	ea01 0305 	and.w	r3, r1, r5
 8002690:	493d      	ldr	r1, [pc, #244]	; (8002788 <HAL_RCC_GetSysClockFreq+0x168>)
 8002692:	fb01 f003 	mul.w	r0, r1, r3
 8002696:	2100      	movs	r1, #0
 8002698:	fb01 f102 	mul.w	r1, r1, r2
 800269c:	1844      	adds	r4, r0, r1
 800269e:	493a      	ldr	r1, [pc, #232]	; (8002788 <HAL_RCC_GetSysClockFreq+0x168>)
 80026a0:	fba2 0101 	umull	r0, r1, r2, r1
 80026a4:	1863      	adds	r3, r4, r1
 80026a6:	4619      	mov	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	f7fd fe1e 	bl	80002f0 <__aeabi_uldivmod>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4613      	mov	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	e04a      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026be:	4b30      	ldr	r3, [pc, #192]	; (8002780 <HAL_RCC_GetSysClockFreq+0x160>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	099b      	lsrs	r3, r3, #6
 80026c4:	461a      	mov	r2, r3
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026ce:	f04f 0100 	mov.w	r1, #0
 80026d2:	ea02 0400 	and.w	r4, r2, r0
 80026d6:	ea03 0501 	and.w	r5, r3, r1
 80026da:	4620      	mov	r0, r4
 80026dc:	4629      	mov	r1, r5
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	014b      	lsls	r3, r1, #5
 80026e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026ec:	0142      	lsls	r2, r0, #5
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	1b00      	subs	r0, r0, r4
 80026f4:	eb61 0105 	sbc.w	r1, r1, r5
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	018b      	lsls	r3, r1, #6
 8002702:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002706:	0182      	lsls	r2, r0, #6
 8002708:	1a12      	subs	r2, r2, r0
 800270a:	eb63 0301 	sbc.w	r3, r3, r1
 800270e:	f04f 0000 	mov.w	r0, #0
 8002712:	f04f 0100 	mov.w	r1, #0
 8002716:	00d9      	lsls	r1, r3, #3
 8002718:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800271c:	00d0      	lsls	r0, r2, #3
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	1912      	adds	r2, r2, r4
 8002724:	eb45 0303 	adc.w	r3, r5, r3
 8002728:	f04f 0000 	mov.w	r0, #0
 800272c:	f04f 0100 	mov.w	r1, #0
 8002730:	0299      	lsls	r1, r3, #10
 8002732:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002736:	0290      	lsls	r0, r2, #10
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	461a      	mov	r2, r3
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	f7fd fdd2 	bl	80002f0 <__aeabi_uldivmod>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4613      	mov	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_RCC_GetSysClockFreq+0x160>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	0c1b      	lsrs	r3, r3, #16
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	3301      	adds	r3, #1
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	fbb2 f3f3 	udiv	r3, r2, r3
 800276c:	60bb      	str	r3, [r7, #8]
      break;
 800276e:	e002      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <HAL_RCC_GetSysClockFreq+0x164>)
 8002772:	60bb      	str	r3, [r7, #8]
      break;
 8002774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002776:	68bb      	ldr	r3, [r7, #8]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bdb0      	pop	{r4, r5, r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	00f42400 	.word	0x00f42400
 8002788:	017d7840 	.word	0x017d7840

0800278c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000008 	.word	0x20000008

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a8:	f7ff fff0 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0a9b      	lsrs	r3, r3, #10
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4903      	ldr	r1, [pc, #12]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	08006660 	.word	0x08006660

080027cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027d0:	f7ff ffdc 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	0b5b      	lsrs	r3, r3, #13
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4903      	ldr	r1, [pc, #12]	; (80027f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40023800 	.word	0x40023800
 80027f0:	08006660 	.word	0x08006660

080027f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d012      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800281c:	4b69      	ldr	r3, [pc, #420]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a68      	ldr	r2, [pc, #416]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002822:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002826:	6093      	str	r3, [r2, #8]
 8002828:	4b66      	ldr	r3, [pc, #408]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002830:	4964      	ldr	r1, [pc, #400]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800283e:	2301      	movs	r3, #1
 8002840:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d017      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800284e:	4b5d      	ldr	r3, [pc, #372]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002854:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285c:	4959      	ldr	r1, [pc, #356]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800286c:	d101      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800286e:	2301      	movs	r3, #1
 8002870:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800287a:	2301      	movs	r3, #1
 800287c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d017      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800288a:	4b4e      	ldr	r3, [pc, #312]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002890:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	494a      	ldr	r1, [pc, #296]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a8:	d101      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028b6:	2301      	movs	r3, #1
 80028b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 808b 	beq.w	80029ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028d8:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	4a39      	ldr	r2, [pc, #228]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e2:	6413      	str	r3, [r2, #64]	; 0x40
 80028e4:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028f0:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a34      	ldr	r2, [pc, #208]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fc:	f7fe fbdc 	bl	80010b8 <HAL_GetTick>
 8002900:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002904:	f7fe fbd8 	bl	80010b8 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e38f      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002916:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002922:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d035      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	429a      	cmp	r2, r3
 800293e:	d02e      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002940:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002948:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800294a:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002960:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002962:	4a18      	ldr	r2, [pc, #96]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002968:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d114      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fba0 	bl	80010b8 <HAL_GetTick>
 8002978:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe fb9c 	bl	80010b8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e351      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002992:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0ee      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029aa:	d111      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029ba:	400b      	ands	r3, r1
 80029bc:	4901      	ldr	r1, [pc, #4]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
 80029c2:	e00b      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40007000 	.word	0x40007000
 80029cc:	0ffffcff 	.word	0x0ffffcff
 80029d0:	4bb3      	ldr	r3, [pc, #716]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4ab2      	ldr	r2, [pc, #712]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80029da:	6093      	str	r3, [r2, #8]
 80029dc:	4bb0      	ldr	r3, [pc, #704]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e8:	49ad      	ldr	r1, [pc, #692]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d010      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029fa:	4ba9      	ldr	r3, [pc, #676]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a00:	4aa7      	ldr	r2, [pc, #668]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a0a:	4ba5      	ldr	r3, [pc, #660]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	49a2      	ldr	r1, [pc, #648]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a28:	4b9d      	ldr	r3, [pc, #628]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a36:	499a      	ldr	r1, [pc, #616]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a4a:	4b95      	ldr	r3, [pc, #596]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a58:	4991      	ldr	r1, [pc, #580]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a6c:	4b8c      	ldr	r3, [pc, #560]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7a:	4989      	ldr	r1, [pc, #548]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a8e:	4b84      	ldr	r3, [pc, #528]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	4980      	ldr	r1, [pc, #512]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ab0:	4b7b      	ldr	r3, [pc, #492]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f023 0203 	bic.w	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	4978      	ldr	r1, [pc, #480]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ad2:	4b73      	ldr	r3, [pc, #460]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	f023 020c 	bic.w	r2, r3, #12
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae0:	496f      	ldr	r1, [pc, #444]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002af4:	4b6a      	ldr	r3, [pc, #424]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	4967      	ldr	r1, [pc, #412]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b16:	4b62      	ldr	r3, [pc, #392]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b24:	495e      	ldr	r1, [pc, #376]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b38:	4b59      	ldr	r3, [pc, #356]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b46:	4956      	ldr	r1, [pc, #344]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b5a:	4b51      	ldr	r3, [pc, #324]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	494d      	ldr	r1, [pc, #308]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b7c:	4b48      	ldr	r3, [pc, #288]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8a:	4945      	ldr	r1, [pc, #276]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b9e:	4b40      	ldr	r3, [pc, #256]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bac:	493c      	ldr	r1, [pc, #240]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bc0:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bce:	4934      	ldr	r1, [pc, #208]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d011      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002be2:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf0:	492b      	ldr	r1, [pc, #172]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c00:	d101      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c02:	2301      	movs	r3, #1
 8002c04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c12:	2301      	movs	r3, #1
 8002c14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c22:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c30:	491b      	ldr	r1, [pc, #108]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00b      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c44:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c54:	4912      	ldr	r1, [pc, #72]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c68:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c78:	4909      	ldr	r1, [pc, #36]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00f      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	e002      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	4986      	ldr	r1, [pc, #536]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00b      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002cb8:	4b81      	ldr	r3, [pc, #516]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc8:	497d      	ldr	r1, [pc, #500]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d006      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80d6 	beq.w	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ce4:	4b76      	ldr	r3, [pc, #472]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a75      	ldr	r2, [pc, #468]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf0:	f7fe f9e2 	bl	80010b8 <HAL_GetTick>
 8002cf4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cf8:	f7fe f9de 	bl	80010b8 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e195      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d0a:	4b6d      	ldr	r3, [pc, #436]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d021      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d11d      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d2a:	4b65      	ldr	r3, [pc, #404]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d30:	0c1b      	lsrs	r3, r3, #16
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d38:	4b61      	ldr	r3, [pc, #388]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d3e:	0e1b      	lsrs	r3, r3, #24
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	019a      	lsls	r2, r3, #6
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	041b      	lsls	r3, r3, #16
 8002d50:	431a      	orrs	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	071b      	lsls	r3, r3, #28
 8002d5e:	4958      	ldr	r1, [pc, #352]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d02e      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d90:	d129      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d92:	4b4b      	ldr	r3, [pc, #300]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002da0:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da6:	0f1b      	lsrs	r3, r3, #28
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	019a      	lsls	r2, r3, #6
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	041b      	lsls	r3, r3, #16
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	061b      	lsls	r3, r3, #24
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	071b      	lsls	r3, r3, #28
 8002dc6:	493e      	ldr	r1, [pc, #248]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dce:	4b3c      	ldr	r3, [pc, #240]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd4:	f023 021f 	bic.w	r2, r3, #31
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	4938      	ldr	r1, [pc, #224]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01d      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002df2:	4b33      	ldr	r3, [pc, #204]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df8:	0e1b      	lsrs	r3, r3, #24
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e00:	4b2f      	ldr	r3, [pc, #188]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e06:	0f1b      	lsrs	r3, r3, #28
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	019a      	lsls	r2, r3, #6
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	041b      	lsls	r3, r3, #16
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	061b      	lsls	r3, r3, #24
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	071b      	lsls	r3, r3, #28
 8002e26:	4926      	ldr	r1, [pc, #152]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d011      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	019a      	lsls	r2, r3, #6
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	061b      	lsls	r3, r3, #24
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	071b      	lsls	r3, r3, #28
 8002e56:	491a      	ldr	r1, [pc, #104]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a17      	ldr	r2, [pc, #92]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6a:	f7fe f925 	bl	80010b8 <HAL_GetTick>
 8002e6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e72:	f7fe f921 	bl	80010b8 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b64      	cmp	r3, #100	; 0x64
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e0d8      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	f040 80ce 	bne.w	8003034 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea4:	f7fe f908 	bl	80010b8 <HAL_GetTick>
 8002ea8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eaa:	e00b      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002eac:	f7fe f904 	bl	80010b8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d904      	bls.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e0bb      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ec4:	4b5e      	ldr	r3, [pc, #376]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ed0:	d0ec      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d02e      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d12a      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002efa:	4b51      	ldr	r3, [pc, #324]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f08:	4b4d      	ldr	r3, [pc, #308]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	0f1b      	lsrs	r3, r3, #28
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	019a      	lsls	r2, r3, #6
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	061b      	lsls	r3, r3, #24
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	071b      	lsls	r3, r3, #28
 8002f2e:	4944      	ldr	r1, [pc, #272]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f36:	4b42      	ldr	r3, [pc, #264]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	3b01      	subs	r3, #1
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	493d      	ldr	r1, [pc, #244]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d022      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f64:	d11d      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f66:	4b36      	ldr	r3, [pc, #216]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	0e1b      	lsrs	r3, r3, #24
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f74:	4b32      	ldr	r3, [pc, #200]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	0f1b      	lsrs	r3, r3, #28
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	019a      	lsls	r2, r3, #6
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	041b      	lsls	r3, r3, #16
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	061b      	lsls	r3, r3, #24
 8002f94:	431a      	orrs	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	071b      	lsls	r3, r3, #28
 8002f9a:	4929      	ldr	r1, [pc, #164]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d028      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb4:	0e1b      	lsrs	r3, r3, #24
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fbc:	4b20      	ldr	r3, [pc, #128]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	0c1b      	lsrs	r3, r3, #16
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	019a      	lsls	r2, r3, #6
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	041b      	lsls	r3, r3, #16
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	071b      	lsls	r3, r3, #28
 8002fe2:	4917      	ldr	r1, [pc, #92]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	4911      	ldr	r1, [pc, #68]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300c:	f7fe f854 	bl	80010b8 <HAL_GetTick>
 8003010:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003014:	f7fe f850 	bl	80010b8 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b64      	cmp	r3, #100	; 0x64
 8003020:	d901      	bls.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e007      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800302e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003032:	d1ef      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800

08003044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e040      	b.n	80030d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd ff68 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2224      	movs	r2, #36	; 0x24
 8003070:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f8c0 	bl	8003208 <UART_SetConfig>
 8003088:	4603      	mov	r3, r0
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e022      	b.n	80030d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fb16 	bl	80036cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fb9d 	bl	8003810 <UART_CheckIdleState>
 80030d6:	4603      	mov	r3, r0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	f040 8081 	bne.w	80031fc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_UART_Transmit+0x26>
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e079      	b.n	80031fe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_UART_Transmit+0x38>
 8003114:	2302      	movs	r3, #2
 8003116:	e072      	b.n	80031fe <HAL_UART_Transmit+0x11e>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2221      	movs	r2, #33	; 0x21
 800312c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800312e:	f7fd ffc3 	bl	80010b8 <HAL_GetTick>
 8003132:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	88fa      	ldrh	r2, [r7, #6]
 8003138:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314c:	d108      	bne.n	8003160 <HAL_UART_Transmit+0x80>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d104      	bne.n	8003160 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	e003      	b.n	8003168 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003164:	2300      	movs	r3, #0
 8003166:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003170:	e02c      	b.n	80031cc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2200      	movs	r2, #0
 800317a:	2180      	movs	r1, #128	; 0x80
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fb90 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e038      	b.n	80031fe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10b      	bne.n	80031aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	3302      	adds	r3, #2
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	e007      	b.n	80031ba <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	3301      	adds	r3, #1
 80031b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1cc      	bne.n	8003172 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2200      	movs	r2, #0
 80031e0:	2140      	movs	r1, #64	; 0x40
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fb5d 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e005      	b.n	80031fe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4ba7      	ldr	r3, [pc, #668]	; (80034d0 <UART_SetConfig+0x2c8>)
 8003234:	4013      	ands	r3, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	6979      	ldr	r1, [r7, #20]
 800323c:	430b      	orrs	r3, r1
 800323e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	430a      	orrs	r2, r1
 8003278:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a95      	ldr	r2, [pc, #596]	; (80034d4 <UART_SetConfig+0x2cc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d120      	bne.n	80032c6 <UART_SetConfig+0xbe>
 8003284:	4b94      	ldr	r3, [pc, #592]	; (80034d8 <UART_SetConfig+0x2d0>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b03      	cmp	r3, #3
 8003290:	d816      	bhi.n	80032c0 <UART_SetConfig+0xb8>
 8003292:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <UART_SetConfig+0x90>)
 8003294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003298:	080032a9 	.word	0x080032a9
 800329c:	080032b5 	.word	0x080032b5
 80032a0:	080032af 	.word	0x080032af
 80032a4:	080032bb 	.word	0x080032bb
 80032a8:	2301      	movs	r3, #1
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e14f      	b.n	800354e <UART_SetConfig+0x346>
 80032ae:	2302      	movs	r3, #2
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e14c      	b.n	800354e <UART_SetConfig+0x346>
 80032b4:	2304      	movs	r3, #4
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e149      	b.n	800354e <UART_SetConfig+0x346>
 80032ba:	2308      	movs	r3, #8
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	e146      	b.n	800354e <UART_SetConfig+0x346>
 80032c0:	2310      	movs	r3, #16
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e143      	b.n	800354e <UART_SetConfig+0x346>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a84      	ldr	r2, [pc, #528]	; (80034dc <UART_SetConfig+0x2d4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d132      	bne.n	8003336 <UART_SetConfig+0x12e>
 80032d0:	4b81      	ldr	r3, [pc, #516]	; (80034d8 <UART_SetConfig+0x2d0>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b0c      	cmp	r3, #12
 80032dc:	d828      	bhi.n	8003330 <UART_SetConfig+0x128>
 80032de:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <UART_SetConfig+0xdc>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	08003319 	.word	0x08003319
 80032e8:	08003331 	.word	0x08003331
 80032ec:	08003331 	.word	0x08003331
 80032f0:	08003331 	.word	0x08003331
 80032f4:	08003325 	.word	0x08003325
 80032f8:	08003331 	.word	0x08003331
 80032fc:	08003331 	.word	0x08003331
 8003300:	08003331 	.word	0x08003331
 8003304:	0800331f 	.word	0x0800331f
 8003308:	08003331 	.word	0x08003331
 800330c:	08003331 	.word	0x08003331
 8003310:	08003331 	.word	0x08003331
 8003314:	0800332b 	.word	0x0800332b
 8003318:	2300      	movs	r3, #0
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e117      	b.n	800354e <UART_SetConfig+0x346>
 800331e:	2302      	movs	r3, #2
 8003320:	77fb      	strb	r3, [r7, #31]
 8003322:	e114      	b.n	800354e <UART_SetConfig+0x346>
 8003324:	2304      	movs	r3, #4
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e111      	b.n	800354e <UART_SetConfig+0x346>
 800332a:	2308      	movs	r3, #8
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	e10e      	b.n	800354e <UART_SetConfig+0x346>
 8003330:	2310      	movs	r3, #16
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e10b      	b.n	800354e <UART_SetConfig+0x346>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a69      	ldr	r2, [pc, #420]	; (80034e0 <UART_SetConfig+0x2d8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d120      	bne.n	8003382 <UART_SetConfig+0x17a>
 8003340:	4b65      	ldr	r3, [pc, #404]	; (80034d8 <UART_SetConfig+0x2d0>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003346:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800334a:	2b30      	cmp	r3, #48	; 0x30
 800334c:	d013      	beq.n	8003376 <UART_SetConfig+0x16e>
 800334e:	2b30      	cmp	r3, #48	; 0x30
 8003350:	d814      	bhi.n	800337c <UART_SetConfig+0x174>
 8003352:	2b20      	cmp	r3, #32
 8003354:	d009      	beq.n	800336a <UART_SetConfig+0x162>
 8003356:	2b20      	cmp	r3, #32
 8003358:	d810      	bhi.n	800337c <UART_SetConfig+0x174>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <UART_SetConfig+0x15c>
 800335e:	2b10      	cmp	r3, #16
 8003360:	d006      	beq.n	8003370 <UART_SetConfig+0x168>
 8003362:	e00b      	b.n	800337c <UART_SetConfig+0x174>
 8003364:	2300      	movs	r3, #0
 8003366:	77fb      	strb	r3, [r7, #31]
 8003368:	e0f1      	b.n	800354e <UART_SetConfig+0x346>
 800336a:	2302      	movs	r3, #2
 800336c:	77fb      	strb	r3, [r7, #31]
 800336e:	e0ee      	b.n	800354e <UART_SetConfig+0x346>
 8003370:	2304      	movs	r3, #4
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e0eb      	b.n	800354e <UART_SetConfig+0x346>
 8003376:	2308      	movs	r3, #8
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e0e8      	b.n	800354e <UART_SetConfig+0x346>
 800337c:	2310      	movs	r3, #16
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e0e5      	b.n	800354e <UART_SetConfig+0x346>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a57      	ldr	r2, [pc, #348]	; (80034e4 <UART_SetConfig+0x2dc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d120      	bne.n	80033ce <UART_SetConfig+0x1c6>
 800338c:	4b52      	ldr	r3, [pc, #328]	; (80034d8 <UART_SetConfig+0x2d0>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003396:	2bc0      	cmp	r3, #192	; 0xc0
 8003398:	d013      	beq.n	80033c2 <UART_SetConfig+0x1ba>
 800339a:	2bc0      	cmp	r3, #192	; 0xc0
 800339c:	d814      	bhi.n	80033c8 <UART_SetConfig+0x1c0>
 800339e:	2b80      	cmp	r3, #128	; 0x80
 80033a0:	d009      	beq.n	80033b6 <UART_SetConfig+0x1ae>
 80033a2:	2b80      	cmp	r3, #128	; 0x80
 80033a4:	d810      	bhi.n	80033c8 <UART_SetConfig+0x1c0>
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <UART_SetConfig+0x1a8>
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d006      	beq.n	80033bc <UART_SetConfig+0x1b4>
 80033ae:	e00b      	b.n	80033c8 <UART_SetConfig+0x1c0>
 80033b0:	2300      	movs	r3, #0
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e0cb      	b.n	800354e <UART_SetConfig+0x346>
 80033b6:	2302      	movs	r3, #2
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e0c8      	b.n	800354e <UART_SetConfig+0x346>
 80033bc:	2304      	movs	r3, #4
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e0c5      	b.n	800354e <UART_SetConfig+0x346>
 80033c2:	2308      	movs	r3, #8
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e0c2      	b.n	800354e <UART_SetConfig+0x346>
 80033c8:	2310      	movs	r3, #16
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e0bf      	b.n	800354e <UART_SetConfig+0x346>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a45      	ldr	r2, [pc, #276]	; (80034e8 <UART_SetConfig+0x2e0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d125      	bne.n	8003424 <UART_SetConfig+0x21c>
 80033d8:	4b3f      	ldr	r3, [pc, #252]	; (80034d8 <UART_SetConfig+0x2d0>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e6:	d017      	beq.n	8003418 <UART_SetConfig+0x210>
 80033e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ec:	d817      	bhi.n	800341e <UART_SetConfig+0x216>
 80033ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f2:	d00b      	beq.n	800340c <UART_SetConfig+0x204>
 80033f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f8:	d811      	bhi.n	800341e <UART_SetConfig+0x216>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <UART_SetConfig+0x1fe>
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003402:	d006      	beq.n	8003412 <UART_SetConfig+0x20a>
 8003404:	e00b      	b.n	800341e <UART_SetConfig+0x216>
 8003406:	2300      	movs	r3, #0
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e0a0      	b.n	800354e <UART_SetConfig+0x346>
 800340c:	2302      	movs	r3, #2
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e09d      	b.n	800354e <UART_SetConfig+0x346>
 8003412:	2304      	movs	r3, #4
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e09a      	b.n	800354e <UART_SetConfig+0x346>
 8003418:	2308      	movs	r3, #8
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e097      	b.n	800354e <UART_SetConfig+0x346>
 800341e:	2310      	movs	r3, #16
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e094      	b.n	800354e <UART_SetConfig+0x346>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a30      	ldr	r2, [pc, #192]	; (80034ec <UART_SetConfig+0x2e4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d125      	bne.n	800347a <UART_SetConfig+0x272>
 800342e:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <UART_SetConfig+0x2d0>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800343c:	d017      	beq.n	800346e <UART_SetConfig+0x266>
 800343e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003442:	d817      	bhi.n	8003474 <UART_SetConfig+0x26c>
 8003444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003448:	d00b      	beq.n	8003462 <UART_SetConfig+0x25a>
 800344a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800344e:	d811      	bhi.n	8003474 <UART_SetConfig+0x26c>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <UART_SetConfig+0x254>
 8003454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003458:	d006      	beq.n	8003468 <UART_SetConfig+0x260>
 800345a:	e00b      	b.n	8003474 <UART_SetConfig+0x26c>
 800345c:	2301      	movs	r3, #1
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e075      	b.n	800354e <UART_SetConfig+0x346>
 8003462:	2302      	movs	r3, #2
 8003464:	77fb      	strb	r3, [r7, #31]
 8003466:	e072      	b.n	800354e <UART_SetConfig+0x346>
 8003468:	2304      	movs	r3, #4
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e06f      	b.n	800354e <UART_SetConfig+0x346>
 800346e:	2308      	movs	r3, #8
 8003470:	77fb      	strb	r3, [r7, #31]
 8003472:	e06c      	b.n	800354e <UART_SetConfig+0x346>
 8003474:	2310      	movs	r3, #16
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e069      	b.n	800354e <UART_SetConfig+0x346>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1c      	ldr	r2, [pc, #112]	; (80034f0 <UART_SetConfig+0x2e8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d137      	bne.n	80034f4 <UART_SetConfig+0x2ec>
 8003484:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <UART_SetConfig+0x2d0>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800348e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003492:	d017      	beq.n	80034c4 <UART_SetConfig+0x2bc>
 8003494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003498:	d817      	bhi.n	80034ca <UART_SetConfig+0x2c2>
 800349a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349e:	d00b      	beq.n	80034b8 <UART_SetConfig+0x2b0>
 80034a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a4:	d811      	bhi.n	80034ca <UART_SetConfig+0x2c2>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <UART_SetConfig+0x2aa>
 80034aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ae:	d006      	beq.n	80034be <UART_SetConfig+0x2b6>
 80034b0:	e00b      	b.n	80034ca <UART_SetConfig+0x2c2>
 80034b2:	2300      	movs	r3, #0
 80034b4:	77fb      	strb	r3, [r7, #31]
 80034b6:	e04a      	b.n	800354e <UART_SetConfig+0x346>
 80034b8:	2302      	movs	r3, #2
 80034ba:	77fb      	strb	r3, [r7, #31]
 80034bc:	e047      	b.n	800354e <UART_SetConfig+0x346>
 80034be:	2304      	movs	r3, #4
 80034c0:	77fb      	strb	r3, [r7, #31]
 80034c2:	e044      	b.n	800354e <UART_SetConfig+0x346>
 80034c4:	2308      	movs	r3, #8
 80034c6:	77fb      	strb	r3, [r7, #31]
 80034c8:	e041      	b.n	800354e <UART_SetConfig+0x346>
 80034ca:	2310      	movs	r3, #16
 80034cc:	77fb      	strb	r3, [r7, #31]
 80034ce:	e03e      	b.n	800354e <UART_SetConfig+0x346>
 80034d0:	efff69f3 	.word	0xefff69f3
 80034d4:	40011000 	.word	0x40011000
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40004400 	.word	0x40004400
 80034e0:	40004800 	.word	0x40004800
 80034e4:	40004c00 	.word	0x40004c00
 80034e8:	40005000 	.word	0x40005000
 80034ec:	40011400 	.word	0x40011400
 80034f0:	40007800 	.word	0x40007800
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a71      	ldr	r2, [pc, #452]	; (80036c0 <UART_SetConfig+0x4b8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d125      	bne.n	800354a <UART_SetConfig+0x342>
 80034fe:	4b71      	ldr	r3, [pc, #452]	; (80036c4 <UART_SetConfig+0x4bc>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003508:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800350c:	d017      	beq.n	800353e <UART_SetConfig+0x336>
 800350e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003512:	d817      	bhi.n	8003544 <UART_SetConfig+0x33c>
 8003514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003518:	d00b      	beq.n	8003532 <UART_SetConfig+0x32a>
 800351a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351e:	d811      	bhi.n	8003544 <UART_SetConfig+0x33c>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <UART_SetConfig+0x324>
 8003524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003528:	d006      	beq.n	8003538 <UART_SetConfig+0x330>
 800352a:	e00b      	b.n	8003544 <UART_SetConfig+0x33c>
 800352c:	2300      	movs	r3, #0
 800352e:	77fb      	strb	r3, [r7, #31]
 8003530:	e00d      	b.n	800354e <UART_SetConfig+0x346>
 8003532:	2302      	movs	r3, #2
 8003534:	77fb      	strb	r3, [r7, #31]
 8003536:	e00a      	b.n	800354e <UART_SetConfig+0x346>
 8003538:	2304      	movs	r3, #4
 800353a:	77fb      	strb	r3, [r7, #31]
 800353c:	e007      	b.n	800354e <UART_SetConfig+0x346>
 800353e:	2308      	movs	r3, #8
 8003540:	77fb      	strb	r3, [r7, #31]
 8003542:	e004      	b.n	800354e <UART_SetConfig+0x346>
 8003544:	2310      	movs	r3, #16
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e001      	b.n	800354e <UART_SetConfig+0x346>
 800354a:	2310      	movs	r3, #16
 800354c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003556:	d15b      	bne.n	8003610 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003558:	7ffb      	ldrb	r3, [r7, #31]
 800355a:	2b08      	cmp	r3, #8
 800355c:	d827      	bhi.n	80035ae <UART_SetConfig+0x3a6>
 800355e:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <UART_SetConfig+0x35c>)
 8003560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003564:	08003589 	.word	0x08003589
 8003568:	08003591 	.word	0x08003591
 800356c:	08003599 	.word	0x08003599
 8003570:	080035af 	.word	0x080035af
 8003574:	0800359f 	.word	0x0800359f
 8003578:	080035af 	.word	0x080035af
 800357c:	080035af 	.word	0x080035af
 8003580:	080035af 	.word	0x080035af
 8003584:	080035a7 	.word	0x080035a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003588:	f7ff f90c 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 800358c:	61b8      	str	r0, [r7, #24]
        break;
 800358e:	e013      	b.n	80035b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003590:	f7ff f91c 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8003594:	61b8      	str	r0, [r7, #24]
        break;
 8003596:	e00f      	b.n	80035b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003598:	4b4b      	ldr	r3, [pc, #300]	; (80036c8 <UART_SetConfig+0x4c0>)
 800359a:	61bb      	str	r3, [r7, #24]
        break;
 800359c:	e00c      	b.n	80035b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800359e:	f7ff f83f 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80035a2:	61b8      	str	r0, [r7, #24]
        break;
 80035a4:	e008      	b.n	80035b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035aa:	61bb      	str	r3, [r7, #24]
        break;
 80035ac:	e004      	b.n	80035b8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	77bb      	strb	r3, [r7, #30]
        break;
 80035b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d074      	beq.n	80036a8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	005a      	lsls	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	085b      	lsrs	r3, r3, #1
 80035c8:	441a      	add	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b0f      	cmp	r3, #15
 80035da:	d916      	bls.n	800360a <UART_SetConfig+0x402>
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e2:	d212      	bcs.n	800360a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	f023 030f 	bic.w	r3, r3, #15
 80035ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	89fb      	ldrh	r3, [r7, #14]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	89fa      	ldrh	r2, [r7, #14]
 8003606:	60da      	str	r2, [r3, #12]
 8003608:	e04e      	b.n	80036a8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	77bb      	strb	r3, [r7, #30]
 800360e:	e04b      	b.n	80036a8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003610:	7ffb      	ldrb	r3, [r7, #31]
 8003612:	2b08      	cmp	r3, #8
 8003614:	d827      	bhi.n	8003666 <UART_SetConfig+0x45e>
 8003616:	a201      	add	r2, pc, #4	; (adr r2, 800361c <UART_SetConfig+0x414>)
 8003618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361c:	08003641 	.word	0x08003641
 8003620:	08003649 	.word	0x08003649
 8003624:	08003651 	.word	0x08003651
 8003628:	08003667 	.word	0x08003667
 800362c:	08003657 	.word	0x08003657
 8003630:	08003667 	.word	0x08003667
 8003634:	08003667 	.word	0x08003667
 8003638:	08003667 	.word	0x08003667
 800363c:	0800365f 	.word	0x0800365f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003640:	f7ff f8b0 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003644:	61b8      	str	r0, [r7, #24]
        break;
 8003646:	e013      	b.n	8003670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003648:	f7ff f8c0 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 800364c:	61b8      	str	r0, [r7, #24]
        break;
 800364e:	e00f      	b.n	8003670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003650:	4b1d      	ldr	r3, [pc, #116]	; (80036c8 <UART_SetConfig+0x4c0>)
 8003652:	61bb      	str	r3, [r7, #24]
        break;
 8003654:	e00c      	b.n	8003670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003656:	f7fe ffe3 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 800365a:	61b8      	str	r0, [r7, #24]
        break;
 800365c:	e008      	b.n	8003670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800365e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003662:	61bb      	str	r3, [r7, #24]
        break;
 8003664:	e004      	b.n	8003670 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	77bb      	strb	r3, [r7, #30]
        break;
 800366e:	bf00      	nop
    }

    if (pclk != 0U)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d018      	beq.n	80036a8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	085a      	lsrs	r2, r3, #1
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	441a      	add	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	fbb2 f3f3 	udiv	r3, r2, r3
 8003688:	b29b      	uxth	r3, r3
 800368a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	2b0f      	cmp	r3, #15
 8003690:	d908      	bls.n	80036a4 <UART_SetConfig+0x49c>
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d204      	bcs.n	80036a4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	60da      	str	r2, [r3, #12]
 80036a2:	e001      	b.n	80036a8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80036b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40007c00 	.word	0x40007c00
 80036c4:	40023800 	.word	0x40023800
 80036c8:	00f42400 	.word	0x00f42400

080036cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01a      	beq.n	80037e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ca:	d10a      	bne.n	80037e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
  }
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af02      	add	r7, sp, #8
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003820:	f7fd fc4a 	bl	80010b8 <HAL_GetTick>
 8003824:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b08      	cmp	r3, #8
 8003832:	d10e      	bne.n	8003852 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f82d 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e023      	b.n	800389a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b04      	cmp	r3, #4
 800385e:	d10e      	bne.n	800387e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f817 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e00d      	b.n	800389a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	4613      	mov	r3, r2
 80038b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b2:	e05e      	b.n	8003972 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ba:	d05a      	beq.n	8003972 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038bc:	f7fd fbfc 	bl	80010b8 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d302      	bcc.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11b      	bne.n	800390a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0201 	bic.w	r2, r2, #1
 80038f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e043      	b.n	8003992 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02c      	beq.n	8003972 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003926:	d124      	bne.n	8003972 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003930:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003940:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e00f      	b.n	8003992 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69da      	ldr	r2, [r3, #28]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4013      	ands	r3, r2
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	429a      	cmp	r2, r3
 8003980:	bf0c      	ite	eq
 8003982:	2301      	moveq	r3, #1
 8003984:	2300      	movne	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	429a      	cmp	r2, r3
 800398e:	d091      	beq.n	80038b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <__errno>:
 800399c:	4b01      	ldr	r3, [pc, #4]	; (80039a4 <__errno+0x8>)
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000014 	.word	0x20000014

080039a8 <__libc_init_array>:
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	4d0d      	ldr	r5, [pc, #52]	; (80039e0 <__libc_init_array+0x38>)
 80039ac:	4c0d      	ldr	r4, [pc, #52]	; (80039e4 <__libc_init_array+0x3c>)
 80039ae:	1b64      	subs	r4, r4, r5
 80039b0:	10a4      	asrs	r4, r4, #2
 80039b2:	2600      	movs	r6, #0
 80039b4:	42a6      	cmp	r6, r4
 80039b6:	d109      	bne.n	80039cc <__libc_init_array+0x24>
 80039b8:	4d0b      	ldr	r5, [pc, #44]	; (80039e8 <__libc_init_array+0x40>)
 80039ba:	4c0c      	ldr	r4, [pc, #48]	; (80039ec <__libc_init_array+0x44>)
 80039bc:	f002 fe24 	bl	8006608 <_init>
 80039c0:	1b64      	subs	r4, r4, r5
 80039c2:	10a4      	asrs	r4, r4, #2
 80039c4:	2600      	movs	r6, #0
 80039c6:	42a6      	cmp	r6, r4
 80039c8:	d105      	bne.n	80039d6 <__libc_init_array+0x2e>
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d0:	4798      	blx	r3
 80039d2:	3601      	adds	r6, #1
 80039d4:	e7ee      	b.n	80039b4 <__libc_init_array+0xc>
 80039d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039da:	4798      	blx	r3
 80039dc:	3601      	adds	r6, #1
 80039de:	e7f2      	b.n	80039c6 <__libc_init_array+0x1e>
 80039e0:	08006a54 	.word	0x08006a54
 80039e4:	08006a54 	.word	0x08006a54
 80039e8:	08006a54 	.word	0x08006a54
 80039ec:	08006a58 	.word	0x08006a58

080039f0 <memset>:
 80039f0:	4402      	add	r2, r0
 80039f2:	4603      	mov	r3, r0
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d100      	bne.n	80039fa <memset+0xa>
 80039f8:	4770      	bx	lr
 80039fa:	f803 1b01 	strb.w	r1, [r3], #1
 80039fe:	e7f9      	b.n	80039f4 <memset+0x4>

08003a00 <__cvt>:
 8003a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a02:	ed2d 8b02 	vpush	{d8}
 8003a06:	eeb0 8b40 	vmov.f64	d8, d0
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	4617      	mov	r7, r2
 8003a0e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003a10:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003a12:	ee18 2a90 	vmov	r2, s17
 8003a16:	f025 0520 	bic.w	r5, r5, #32
 8003a1a:	2a00      	cmp	r2, #0
 8003a1c:	bfb6      	itet	lt
 8003a1e:	222d      	movlt	r2, #45	; 0x2d
 8003a20:	2200      	movge	r2, #0
 8003a22:	eeb1 8b40 	vneglt.f64	d8, d0
 8003a26:	2d46      	cmp	r5, #70	; 0x46
 8003a28:	460c      	mov	r4, r1
 8003a2a:	701a      	strb	r2, [r3, #0]
 8003a2c:	d004      	beq.n	8003a38 <__cvt+0x38>
 8003a2e:	2d45      	cmp	r5, #69	; 0x45
 8003a30:	d100      	bne.n	8003a34 <__cvt+0x34>
 8003a32:	3401      	adds	r4, #1
 8003a34:	2102      	movs	r1, #2
 8003a36:	e000      	b.n	8003a3a <__cvt+0x3a>
 8003a38:	2103      	movs	r1, #3
 8003a3a:	ab03      	add	r3, sp, #12
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	ab02      	add	r3, sp, #8
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	4622      	mov	r2, r4
 8003a44:	4633      	mov	r3, r6
 8003a46:	eeb0 0b48 	vmov.f64	d0, d8
 8003a4a:	f000 fcc9 	bl	80043e0 <_dtoa_r>
 8003a4e:	2d47      	cmp	r5, #71	; 0x47
 8003a50:	d109      	bne.n	8003a66 <__cvt+0x66>
 8003a52:	07fb      	lsls	r3, r7, #31
 8003a54:	d407      	bmi.n	8003a66 <__cvt+0x66>
 8003a56:	9b03      	ldr	r3, [sp, #12]
 8003a58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a5a:	1a1b      	subs	r3, r3, r0
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	b005      	add	sp, #20
 8003a60:	ecbd 8b02 	vpop	{d8}
 8003a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a66:	2d46      	cmp	r5, #70	; 0x46
 8003a68:	eb00 0204 	add.w	r2, r0, r4
 8003a6c:	d10c      	bne.n	8003a88 <__cvt+0x88>
 8003a6e:	7803      	ldrb	r3, [r0, #0]
 8003a70:	2b30      	cmp	r3, #48	; 0x30
 8003a72:	d107      	bne.n	8003a84 <__cvt+0x84>
 8003a74:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7c:	bf1c      	itt	ne
 8003a7e:	f1c4 0401 	rsbne	r4, r4, #1
 8003a82:	6034      	strne	r4, [r6, #0]
 8003a84:	6833      	ldr	r3, [r6, #0]
 8003a86:	441a      	add	r2, r3
 8003a88:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a90:	bf08      	it	eq
 8003a92:	9203      	streq	r2, [sp, #12]
 8003a94:	2130      	movs	r1, #48	; 0x30
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d2dc      	bcs.n	8003a56 <__cvt+0x56>
 8003a9c:	1c5c      	adds	r4, r3, #1
 8003a9e:	9403      	str	r4, [sp, #12]
 8003aa0:	7019      	strb	r1, [r3, #0]
 8003aa2:	e7f8      	b.n	8003a96 <__cvt+0x96>

08003aa4 <__exponent>:
 8003aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2900      	cmp	r1, #0
 8003aaa:	bfb8      	it	lt
 8003aac:	4249      	neglt	r1, r1
 8003aae:	f803 2b02 	strb.w	r2, [r3], #2
 8003ab2:	bfb4      	ite	lt
 8003ab4:	222d      	movlt	r2, #45	; 0x2d
 8003ab6:	222b      	movge	r2, #43	; 0x2b
 8003ab8:	2909      	cmp	r1, #9
 8003aba:	7042      	strb	r2, [r0, #1]
 8003abc:	dd2a      	ble.n	8003b14 <__exponent+0x70>
 8003abe:	f10d 0407 	add.w	r4, sp, #7
 8003ac2:	46a4      	mov	ip, r4
 8003ac4:	270a      	movs	r7, #10
 8003ac6:	46a6      	mov	lr, r4
 8003ac8:	460a      	mov	r2, r1
 8003aca:	fb91 f6f7 	sdiv	r6, r1, r7
 8003ace:	fb07 1516 	mls	r5, r7, r6, r1
 8003ad2:	3530      	adds	r5, #48	; 0x30
 8003ad4:	2a63      	cmp	r2, #99	; 0x63
 8003ad6:	f104 34ff 	add.w	r4, r4, #4294967295
 8003ada:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003ade:	4631      	mov	r1, r6
 8003ae0:	dcf1      	bgt.n	8003ac6 <__exponent+0x22>
 8003ae2:	3130      	adds	r1, #48	; 0x30
 8003ae4:	f1ae 0502 	sub.w	r5, lr, #2
 8003ae8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003aec:	1c44      	adds	r4, r0, #1
 8003aee:	4629      	mov	r1, r5
 8003af0:	4561      	cmp	r1, ip
 8003af2:	d30a      	bcc.n	8003b0a <__exponent+0x66>
 8003af4:	f10d 0209 	add.w	r2, sp, #9
 8003af8:	eba2 020e 	sub.w	r2, r2, lr
 8003afc:	4565      	cmp	r5, ip
 8003afe:	bf88      	it	hi
 8003b00:	2200      	movhi	r2, #0
 8003b02:	4413      	add	r3, r2
 8003b04:	1a18      	subs	r0, r3, r0
 8003b06:	b003      	add	sp, #12
 8003b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003b12:	e7ed      	b.n	8003af0 <__exponent+0x4c>
 8003b14:	2330      	movs	r3, #48	; 0x30
 8003b16:	3130      	adds	r1, #48	; 0x30
 8003b18:	7083      	strb	r3, [r0, #2]
 8003b1a:	70c1      	strb	r1, [r0, #3]
 8003b1c:	1d03      	adds	r3, r0, #4
 8003b1e:	e7f1      	b.n	8003b04 <__exponent+0x60>

08003b20 <_printf_float>:
 8003b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b24:	b08b      	sub	sp, #44	; 0x2c
 8003b26:	460c      	mov	r4, r1
 8003b28:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8003b2c:	4616      	mov	r6, r2
 8003b2e:	461f      	mov	r7, r3
 8003b30:	4605      	mov	r5, r0
 8003b32:	f001 f9d7 	bl	8004ee4 <_localeconv_r>
 8003b36:	f8d0 b000 	ldr.w	fp, [r0]
 8003b3a:	4658      	mov	r0, fp
 8003b3c:	f7fc fb80 	bl	8000240 <strlen>
 8003b40:	2300      	movs	r3, #0
 8003b42:	9308      	str	r3, [sp, #32]
 8003b44:	f8d8 3000 	ldr.w	r3, [r8]
 8003b48:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003b4c:	6822      	ldr	r2, [r4, #0]
 8003b4e:	3307      	adds	r3, #7
 8003b50:	f023 0307 	bic.w	r3, r3, #7
 8003b54:	f103 0108 	add.w	r1, r3, #8
 8003b58:	f8c8 1000 	str.w	r1, [r8]
 8003b5c:	4682      	mov	sl, r0
 8003b5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b62:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8003b66:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8003dc8 <_printf_float+0x2a8>
 8003b6a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8003b6e:	eeb0 6bc0 	vabs.f64	d6, d0
 8003b72:	eeb4 6b47 	vcmp.f64	d6, d7
 8003b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b7a:	dd24      	ble.n	8003bc6 <_printf_float+0xa6>
 8003b7c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b84:	d502      	bpl.n	8003b8c <_printf_float+0x6c>
 8003b86:	232d      	movs	r3, #45	; 0x2d
 8003b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b8c:	4b90      	ldr	r3, [pc, #576]	; (8003dd0 <_printf_float+0x2b0>)
 8003b8e:	4891      	ldr	r0, [pc, #580]	; (8003dd4 <_printf_float+0x2b4>)
 8003b90:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003b94:	bf94      	ite	ls
 8003b96:	4698      	movls	r8, r3
 8003b98:	4680      	movhi	r8, r0
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	6123      	str	r3, [r4, #16]
 8003b9e:	f022 0204 	bic.w	r2, r2, #4
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	6022      	str	r2, [r4, #0]
 8003ba6:	9304      	str	r3, [sp, #16]
 8003ba8:	9700      	str	r7, [sp, #0]
 8003baa:	4633      	mov	r3, r6
 8003bac:	aa09      	add	r2, sp, #36	; 0x24
 8003bae:	4621      	mov	r1, r4
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	f000 f9d3 	bl	8003f5c <_printf_common>
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	f040 808a 	bne.w	8003cd0 <_printf_float+0x1b0>
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	b00b      	add	sp, #44	; 0x2c
 8003bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc6:	eeb4 0b40 	vcmp.f64	d0, d0
 8003bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bce:	d709      	bvc.n	8003be4 <_printf_float+0xc4>
 8003bd0:	ee10 3a90 	vmov	r3, s1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bfbc      	itt	lt
 8003bd8:	232d      	movlt	r3, #45	; 0x2d
 8003bda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003bde:	487e      	ldr	r0, [pc, #504]	; (8003dd8 <_printf_float+0x2b8>)
 8003be0:	4b7e      	ldr	r3, [pc, #504]	; (8003ddc <_printf_float+0x2bc>)
 8003be2:	e7d5      	b.n	8003b90 <_printf_float+0x70>
 8003be4:	6863      	ldr	r3, [r4, #4]
 8003be6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003bea:	9104      	str	r1, [sp, #16]
 8003bec:	1c59      	adds	r1, r3, #1
 8003bee:	d13c      	bne.n	8003c6a <_printf_float+0x14a>
 8003bf0:	2306      	movs	r3, #6
 8003bf2:	6063      	str	r3, [r4, #4]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	9303      	str	r3, [sp, #12]
 8003bf8:	ab08      	add	r3, sp, #32
 8003bfa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8003bfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c02:	ab07      	add	r3, sp, #28
 8003c04:	6861      	ldr	r1, [r4, #4]
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	6022      	str	r2, [r4, #0]
 8003c0a:	f10d 031b 	add.w	r3, sp, #27
 8003c0e:	4628      	mov	r0, r5
 8003c10:	f7ff fef6 	bl	8003a00 <__cvt>
 8003c14:	9b04      	ldr	r3, [sp, #16]
 8003c16:	9907      	ldr	r1, [sp, #28]
 8003c18:	2b47      	cmp	r3, #71	; 0x47
 8003c1a:	4680      	mov	r8, r0
 8003c1c:	d108      	bne.n	8003c30 <_printf_float+0x110>
 8003c1e:	1cc8      	adds	r0, r1, #3
 8003c20:	db02      	blt.n	8003c28 <_printf_float+0x108>
 8003c22:	6863      	ldr	r3, [r4, #4]
 8003c24:	4299      	cmp	r1, r3
 8003c26:	dd41      	ble.n	8003cac <_printf_float+0x18c>
 8003c28:	f1a9 0902 	sub.w	r9, r9, #2
 8003c2c:	fa5f f989 	uxtb.w	r9, r9
 8003c30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003c34:	d820      	bhi.n	8003c78 <_printf_float+0x158>
 8003c36:	3901      	subs	r1, #1
 8003c38:	464a      	mov	r2, r9
 8003c3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003c3e:	9107      	str	r1, [sp, #28]
 8003c40:	f7ff ff30 	bl	8003aa4 <__exponent>
 8003c44:	9a08      	ldr	r2, [sp, #32]
 8003c46:	9004      	str	r0, [sp, #16]
 8003c48:	1813      	adds	r3, r2, r0
 8003c4a:	2a01      	cmp	r2, #1
 8003c4c:	6123      	str	r3, [r4, #16]
 8003c4e:	dc02      	bgt.n	8003c56 <_printf_float+0x136>
 8003c50:	6822      	ldr	r2, [r4, #0]
 8003c52:	07d2      	lsls	r2, r2, #31
 8003c54:	d501      	bpl.n	8003c5a <_printf_float+0x13a>
 8003c56:	3301      	adds	r3, #1
 8003c58:	6123      	str	r3, [r4, #16]
 8003c5a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0a2      	beq.n	8003ba8 <_printf_float+0x88>
 8003c62:	232d      	movs	r3, #45	; 0x2d
 8003c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c68:	e79e      	b.n	8003ba8 <_printf_float+0x88>
 8003c6a:	9904      	ldr	r1, [sp, #16]
 8003c6c:	2947      	cmp	r1, #71	; 0x47
 8003c6e:	d1c1      	bne.n	8003bf4 <_printf_float+0xd4>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1bf      	bne.n	8003bf4 <_printf_float+0xd4>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e7bc      	b.n	8003bf2 <_printf_float+0xd2>
 8003c78:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003c7c:	d118      	bne.n	8003cb0 <_printf_float+0x190>
 8003c7e:	2900      	cmp	r1, #0
 8003c80:	6863      	ldr	r3, [r4, #4]
 8003c82:	dd0b      	ble.n	8003c9c <_printf_float+0x17c>
 8003c84:	6121      	str	r1, [r4, #16]
 8003c86:	b913      	cbnz	r3, 8003c8e <_printf_float+0x16e>
 8003c88:	6822      	ldr	r2, [r4, #0]
 8003c8a:	07d0      	lsls	r0, r2, #31
 8003c8c:	d502      	bpl.n	8003c94 <_printf_float+0x174>
 8003c8e:	3301      	adds	r3, #1
 8003c90:	440b      	add	r3, r1
 8003c92:	6123      	str	r3, [r4, #16]
 8003c94:	2300      	movs	r3, #0
 8003c96:	65a1      	str	r1, [r4, #88]	; 0x58
 8003c98:	9304      	str	r3, [sp, #16]
 8003c9a:	e7de      	b.n	8003c5a <_printf_float+0x13a>
 8003c9c:	b913      	cbnz	r3, 8003ca4 <_printf_float+0x184>
 8003c9e:	6822      	ldr	r2, [r4, #0]
 8003ca0:	07d2      	lsls	r2, r2, #31
 8003ca2:	d501      	bpl.n	8003ca8 <_printf_float+0x188>
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	e7f4      	b.n	8003c92 <_printf_float+0x172>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e7f2      	b.n	8003c92 <_printf_float+0x172>
 8003cac:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003cb0:	9b08      	ldr	r3, [sp, #32]
 8003cb2:	4299      	cmp	r1, r3
 8003cb4:	db05      	blt.n	8003cc2 <_printf_float+0x1a2>
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	6121      	str	r1, [r4, #16]
 8003cba:	07d8      	lsls	r0, r3, #31
 8003cbc:	d5ea      	bpl.n	8003c94 <_printf_float+0x174>
 8003cbe:	1c4b      	adds	r3, r1, #1
 8003cc0:	e7e7      	b.n	8003c92 <_printf_float+0x172>
 8003cc2:	2900      	cmp	r1, #0
 8003cc4:	bfd4      	ite	le
 8003cc6:	f1c1 0202 	rsble	r2, r1, #2
 8003cca:	2201      	movgt	r2, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	e7e0      	b.n	8003c92 <_printf_float+0x172>
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	055a      	lsls	r2, r3, #21
 8003cd4:	d407      	bmi.n	8003ce6 <_printf_float+0x1c6>
 8003cd6:	6923      	ldr	r3, [r4, #16]
 8003cd8:	4642      	mov	r2, r8
 8003cda:	4631      	mov	r1, r6
 8003cdc:	4628      	mov	r0, r5
 8003cde:	47b8      	blx	r7
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d12a      	bne.n	8003d3a <_printf_float+0x21a>
 8003ce4:	e76a      	b.n	8003bbc <_printf_float+0x9c>
 8003ce6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003cea:	f240 80e2 	bls.w	8003eb2 <_printf_float+0x392>
 8003cee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003cf2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfa:	d133      	bne.n	8003d64 <_printf_float+0x244>
 8003cfc:	4a38      	ldr	r2, [pc, #224]	; (8003de0 <_printf_float+0x2c0>)
 8003cfe:	2301      	movs	r3, #1
 8003d00:	4631      	mov	r1, r6
 8003d02:	4628      	mov	r0, r5
 8003d04:	47b8      	blx	r7
 8003d06:	3001      	adds	r0, #1
 8003d08:	f43f af58 	beq.w	8003bbc <_printf_float+0x9c>
 8003d0c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	db02      	blt.n	8003d1a <_printf_float+0x1fa>
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	07d8      	lsls	r0, r3, #31
 8003d18:	d50f      	bpl.n	8003d3a <_printf_float+0x21a>
 8003d1a:	4653      	mov	r3, sl
 8003d1c:	465a      	mov	r2, fp
 8003d1e:	4631      	mov	r1, r6
 8003d20:	4628      	mov	r0, r5
 8003d22:	47b8      	blx	r7
 8003d24:	3001      	adds	r0, #1
 8003d26:	f43f af49 	beq.w	8003bbc <_printf_float+0x9c>
 8003d2a:	f04f 0800 	mov.w	r8, #0
 8003d2e:	f104 091a 	add.w	r9, r4, #26
 8003d32:	9b08      	ldr	r3, [sp, #32]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	4543      	cmp	r3, r8
 8003d38:	dc09      	bgt.n	8003d4e <_printf_float+0x22e>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	079b      	lsls	r3, r3, #30
 8003d3e:	f100 8108 	bmi.w	8003f52 <_printf_float+0x432>
 8003d42:	68e0      	ldr	r0, [r4, #12]
 8003d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d46:	4298      	cmp	r0, r3
 8003d48:	bfb8      	it	lt
 8003d4a:	4618      	movlt	r0, r3
 8003d4c:	e738      	b.n	8003bc0 <_printf_float+0xa0>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	464a      	mov	r2, r9
 8003d52:	4631      	mov	r1, r6
 8003d54:	4628      	mov	r0, r5
 8003d56:	47b8      	blx	r7
 8003d58:	3001      	adds	r0, #1
 8003d5a:	f43f af2f 	beq.w	8003bbc <_printf_float+0x9c>
 8003d5e:	f108 0801 	add.w	r8, r8, #1
 8003d62:	e7e6      	b.n	8003d32 <_printf_float+0x212>
 8003d64:	9b07      	ldr	r3, [sp, #28]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	dc3c      	bgt.n	8003de4 <_printf_float+0x2c4>
 8003d6a:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <_printf_float+0x2c0>)
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	4631      	mov	r1, r6
 8003d70:	4628      	mov	r0, r5
 8003d72:	47b8      	blx	r7
 8003d74:	3001      	adds	r0, #1
 8003d76:	f43f af21 	beq.w	8003bbc <_printf_float+0x9c>
 8003d7a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	d102      	bne.n	8003d88 <_printf_float+0x268>
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	07d9      	lsls	r1, r3, #31
 8003d86:	d5d8      	bpl.n	8003d3a <_printf_float+0x21a>
 8003d88:	4653      	mov	r3, sl
 8003d8a:	465a      	mov	r2, fp
 8003d8c:	4631      	mov	r1, r6
 8003d8e:	4628      	mov	r0, r5
 8003d90:	47b8      	blx	r7
 8003d92:	3001      	adds	r0, #1
 8003d94:	f43f af12 	beq.w	8003bbc <_printf_float+0x9c>
 8003d98:	f04f 0900 	mov.w	r9, #0
 8003d9c:	f104 0a1a 	add.w	sl, r4, #26
 8003da0:	9b07      	ldr	r3, [sp, #28]
 8003da2:	425b      	negs	r3, r3
 8003da4:	454b      	cmp	r3, r9
 8003da6:	dc01      	bgt.n	8003dac <_printf_float+0x28c>
 8003da8:	9b08      	ldr	r3, [sp, #32]
 8003daa:	e795      	b.n	8003cd8 <_printf_float+0x1b8>
 8003dac:	2301      	movs	r3, #1
 8003dae:	4652      	mov	r2, sl
 8003db0:	4631      	mov	r1, r6
 8003db2:	4628      	mov	r0, r5
 8003db4:	47b8      	blx	r7
 8003db6:	3001      	adds	r0, #1
 8003db8:	f43f af00 	beq.w	8003bbc <_printf_float+0x9c>
 8003dbc:	f109 0901 	add.w	r9, r9, #1
 8003dc0:	e7ee      	b.n	8003da0 <_printf_float+0x280>
 8003dc2:	bf00      	nop
 8003dc4:	f3af 8000 	nop.w
 8003dc8:	ffffffff 	.word	0xffffffff
 8003dcc:	7fefffff 	.word	0x7fefffff
 8003dd0:	0800666c 	.word	0x0800666c
 8003dd4:	08006670 	.word	0x08006670
 8003dd8:	08006678 	.word	0x08006678
 8003ddc:	08006674 	.word	0x08006674
 8003de0:	0800667c 	.word	0x0800667c
 8003de4:	9a08      	ldr	r2, [sp, #32]
 8003de6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003de8:	429a      	cmp	r2, r3
 8003dea:	bfa8      	it	ge
 8003dec:	461a      	movge	r2, r3
 8003dee:	2a00      	cmp	r2, #0
 8003df0:	4691      	mov	r9, r2
 8003df2:	dc38      	bgt.n	8003e66 <_printf_float+0x346>
 8003df4:	2300      	movs	r3, #0
 8003df6:	9305      	str	r3, [sp, #20]
 8003df8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003dfc:	f104 021a 	add.w	r2, r4, #26
 8003e00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e02:	9905      	ldr	r1, [sp, #20]
 8003e04:	9304      	str	r3, [sp, #16]
 8003e06:	eba3 0309 	sub.w	r3, r3, r9
 8003e0a:	428b      	cmp	r3, r1
 8003e0c:	dc33      	bgt.n	8003e76 <_printf_float+0x356>
 8003e0e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	db3c      	blt.n	8003e90 <_printf_float+0x370>
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	07da      	lsls	r2, r3, #31
 8003e1a:	d439      	bmi.n	8003e90 <_printf_float+0x370>
 8003e1c:	9a08      	ldr	r2, [sp, #32]
 8003e1e:	9b04      	ldr	r3, [sp, #16]
 8003e20:	9907      	ldr	r1, [sp, #28]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	eba2 0901 	sub.w	r9, r2, r1
 8003e28:	4599      	cmp	r9, r3
 8003e2a:	bfa8      	it	ge
 8003e2c:	4699      	movge	r9, r3
 8003e2e:	f1b9 0f00 	cmp.w	r9, #0
 8003e32:	dc35      	bgt.n	8003ea0 <_printf_float+0x380>
 8003e34:	f04f 0800 	mov.w	r8, #0
 8003e38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e3c:	f104 0a1a 	add.w	sl, r4, #26
 8003e40:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	eba3 0309 	sub.w	r3, r3, r9
 8003e4a:	4543      	cmp	r3, r8
 8003e4c:	f77f af75 	ble.w	8003d3a <_printf_float+0x21a>
 8003e50:	2301      	movs	r3, #1
 8003e52:	4652      	mov	r2, sl
 8003e54:	4631      	mov	r1, r6
 8003e56:	4628      	mov	r0, r5
 8003e58:	47b8      	blx	r7
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	f43f aeae 	beq.w	8003bbc <_printf_float+0x9c>
 8003e60:	f108 0801 	add.w	r8, r8, #1
 8003e64:	e7ec      	b.n	8003e40 <_printf_float+0x320>
 8003e66:	4613      	mov	r3, r2
 8003e68:	4631      	mov	r1, r6
 8003e6a:	4642      	mov	r2, r8
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	47b8      	blx	r7
 8003e70:	3001      	adds	r0, #1
 8003e72:	d1bf      	bne.n	8003df4 <_printf_float+0x2d4>
 8003e74:	e6a2      	b.n	8003bbc <_printf_float+0x9c>
 8003e76:	2301      	movs	r3, #1
 8003e78:	4631      	mov	r1, r6
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	9204      	str	r2, [sp, #16]
 8003e7e:	47b8      	blx	r7
 8003e80:	3001      	adds	r0, #1
 8003e82:	f43f ae9b 	beq.w	8003bbc <_printf_float+0x9c>
 8003e86:	9b05      	ldr	r3, [sp, #20]
 8003e88:	9a04      	ldr	r2, [sp, #16]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	9305      	str	r3, [sp, #20]
 8003e8e:	e7b7      	b.n	8003e00 <_printf_float+0x2e0>
 8003e90:	4653      	mov	r3, sl
 8003e92:	465a      	mov	r2, fp
 8003e94:	4631      	mov	r1, r6
 8003e96:	4628      	mov	r0, r5
 8003e98:	47b8      	blx	r7
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d1be      	bne.n	8003e1c <_printf_float+0x2fc>
 8003e9e:	e68d      	b.n	8003bbc <_printf_float+0x9c>
 8003ea0:	9a04      	ldr	r2, [sp, #16]
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	4442      	add	r2, r8
 8003ea6:	4631      	mov	r1, r6
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	47b8      	blx	r7
 8003eac:	3001      	adds	r0, #1
 8003eae:	d1c1      	bne.n	8003e34 <_printf_float+0x314>
 8003eb0:	e684      	b.n	8003bbc <_printf_float+0x9c>
 8003eb2:	9a08      	ldr	r2, [sp, #32]
 8003eb4:	2a01      	cmp	r2, #1
 8003eb6:	dc01      	bgt.n	8003ebc <_printf_float+0x39c>
 8003eb8:	07db      	lsls	r3, r3, #31
 8003eba:	d537      	bpl.n	8003f2c <_printf_float+0x40c>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	4642      	mov	r2, r8
 8003ec0:	4631      	mov	r1, r6
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	47b8      	blx	r7
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	f43f ae78 	beq.w	8003bbc <_printf_float+0x9c>
 8003ecc:	4653      	mov	r3, sl
 8003ece:	465a      	mov	r2, fp
 8003ed0:	4631      	mov	r1, r6
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	47b8      	blx	r7
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	f43f ae70 	beq.w	8003bbc <_printf_float+0x9c>
 8003edc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003ee0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee8:	d01b      	beq.n	8003f22 <_printf_float+0x402>
 8003eea:	9b08      	ldr	r3, [sp, #32]
 8003eec:	f108 0201 	add.w	r2, r8, #1
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	4631      	mov	r1, r6
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	47b8      	blx	r7
 8003ef8:	3001      	adds	r0, #1
 8003efa:	d10e      	bne.n	8003f1a <_printf_float+0x3fa>
 8003efc:	e65e      	b.n	8003bbc <_printf_float+0x9c>
 8003efe:	2301      	movs	r3, #1
 8003f00:	464a      	mov	r2, r9
 8003f02:	4631      	mov	r1, r6
 8003f04:	4628      	mov	r0, r5
 8003f06:	47b8      	blx	r7
 8003f08:	3001      	adds	r0, #1
 8003f0a:	f43f ae57 	beq.w	8003bbc <_printf_float+0x9c>
 8003f0e:	f108 0801 	add.w	r8, r8, #1
 8003f12:	9b08      	ldr	r3, [sp, #32]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	4543      	cmp	r3, r8
 8003f18:	dcf1      	bgt.n	8003efe <_printf_float+0x3de>
 8003f1a:	9b04      	ldr	r3, [sp, #16]
 8003f1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003f20:	e6db      	b.n	8003cda <_printf_float+0x1ba>
 8003f22:	f04f 0800 	mov.w	r8, #0
 8003f26:	f104 091a 	add.w	r9, r4, #26
 8003f2a:	e7f2      	b.n	8003f12 <_printf_float+0x3f2>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	4642      	mov	r2, r8
 8003f30:	e7df      	b.n	8003ef2 <_printf_float+0x3d2>
 8003f32:	2301      	movs	r3, #1
 8003f34:	464a      	mov	r2, r9
 8003f36:	4631      	mov	r1, r6
 8003f38:	4628      	mov	r0, r5
 8003f3a:	47b8      	blx	r7
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	f43f ae3d 	beq.w	8003bbc <_printf_float+0x9c>
 8003f42:	f108 0801 	add.w	r8, r8, #1
 8003f46:	68e3      	ldr	r3, [r4, #12]
 8003f48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f4a:	1a5b      	subs	r3, r3, r1
 8003f4c:	4543      	cmp	r3, r8
 8003f4e:	dcf0      	bgt.n	8003f32 <_printf_float+0x412>
 8003f50:	e6f7      	b.n	8003d42 <_printf_float+0x222>
 8003f52:	f04f 0800 	mov.w	r8, #0
 8003f56:	f104 0919 	add.w	r9, r4, #25
 8003f5a:	e7f4      	b.n	8003f46 <_printf_float+0x426>

08003f5c <_printf_common>:
 8003f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f60:	4616      	mov	r6, r2
 8003f62:	4699      	mov	r9, r3
 8003f64:	688a      	ldr	r2, [r1, #8]
 8003f66:	690b      	ldr	r3, [r1, #16]
 8003f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	bfb8      	it	lt
 8003f70:	4613      	movlt	r3, r2
 8003f72:	6033      	str	r3, [r6, #0]
 8003f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f78:	4607      	mov	r7, r0
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	b10a      	cbz	r2, 8003f82 <_printf_common+0x26>
 8003f7e:	3301      	adds	r3, #1
 8003f80:	6033      	str	r3, [r6, #0]
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	0699      	lsls	r1, r3, #26
 8003f86:	bf42      	ittt	mi
 8003f88:	6833      	ldrmi	r3, [r6, #0]
 8003f8a:	3302      	addmi	r3, #2
 8003f8c:	6033      	strmi	r3, [r6, #0]
 8003f8e:	6825      	ldr	r5, [r4, #0]
 8003f90:	f015 0506 	ands.w	r5, r5, #6
 8003f94:	d106      	bne.n	8003fa4 <_printf_common+0x48>
 8003f96:	f104 0a19 	add.w	sl, r4, #25
 8003f9a:	68e3      	ldr	r3, [r4, #12]
 8003f9c:	6832      	ldr	r2, [r6, #0]
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	42ab      	cmp	r3, r5
 8003fa2:	dc26      	bgt.n	8003ff2 <_printf_common+0x96>
 8003fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fa8:	1e13      	subs	r3, r2, #0
 8003faa:	6822      	ldr	r2, [r4, #0]
 8003fac:	bf18      	it	ne
 8003fae:	2301      	movne	r3, #1
 8003fb0:	0692      	lsls	r2, r2, #26
 8003fb2:	d42b      	bmi.n	800400c <_printf_common+0xb0>
 8003fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fb8:	4649      	mov	r1, r9
 8003fba:	4638      	mov	r0, r7
 8003fbc:	47c0      	blx	r8
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d01e      	beq.n	8004000 <_printf_common+0xa4>
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	68e5      	ldr	r5, [r4, #12]
 8003fc6:	6832      	ldr	r2, [r6, #0]
 8003fc8:	f003 0306 	and.w	r3, r3, #6
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	bf08      	it	eq
 8003fd0:	1aad      	subeq	r5, r5, r2
 8003fd2:	68a3      	ldr	r3, [r4, #8]
 8003fd4:	6922      	ldr	r2, [r4, #16]
 8003fd6:	bf0c      	ite	eq
 8003fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fdc:	2500      	movne	r5, #0
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	bfc4      	itt	gt
 8003fe2:	1a9b      	subgt	r3, r3, r2
 8003fe4:	18ed      	addgt	r5, r5, r3
 8003fe6:	2600      	movs	r6, #0
 8003fe8:	341a      	adds	r4, #26
 8003fea:	42b5      	cmp	r5, r6
 8003fec:	d11a      	bne.n	8004024 <_printf_common+0xc8>
 8003fee:	2000      	movs	r0, #0
 8003ff0:	e008      	b.n	8004004 <_printf_common+0xa8>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	4652      	mov	r2, sl
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	4638      	mov	r0, r7
 8003ffa:	47c0      	blx	r8
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d103      	bne.n	8004008 <_printf_common+0xac>
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004008:	3501      	adds	r5, #1
 800400a:	e7c6      	b.n	8003f9a <_printf_common+0x3e>
 800400c:	18e1      	adds	r1, r4, r3
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	2030      	movs	r0, #48	; 0x30
 8004012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004016:	4422      	add	r2, r4
 8004018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800401c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004020:	3302      	adds	r3, #2
 8004022:	e7c7      	b.n	8003fb4 <_printf_common+0x58>
 8004024:	2301      	movs	r3, #1
 8004026:	4622      	mov	r2, r4
 8004028:	4649      	mov	r1, r9
 800402a:	4638      	mov	r0, r7
 800402c:	47c0      	blx	r8
 800402e:	3001      	adds	r0, #1
 8004030:	d0e6      	beq.n	8004000 <_printf_common+0xa4>
 8004032:	3601      	adds	r6, #1
 8004034:	e7d9      	b.n	8003fea <_printf_common+0x8e>
	...

08004038 <_printf_i>:
 8004038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800403c:	460c      	mov	r4, r1
 800403e:	4691      	mov	r9, r2
 8004040:	7e27      	ldrb	r7, [r4, #24]
 8004042:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004044:	2f78      	cmp	r7, #120	; 0x78
 8004046:	4680      	mov	r8, r0
 8004048:	469a      	mov	sl, r3
 800404a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800404e:	d807      	bhi.n	8004060 <_printf_i+0x28>
 8004050:	2f62      	cmp	r7, #98	; 0x62
 8004052:	d80a      	bhi.n	800406a <_printf_i+0x32>
 8004054:	2f00      	cmp	r7, #0
 8004056:	f000 80d8 	beq.w	800420a <_printf_i+0x1d2>
 800405a:	2f58      	cmp	r7, #88	; 0x58
 800405c:	f000 80a3 	beq.w	80041a6 <_printf_i+0x16e>
 8004060:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004068:	e03a      	b.n	80040e0 <_printf_i+0xa8>
 800406a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800406e:	2b15      	cmp	r3, #21
 8004070:	d8f6      	bhi.n	8004060 <_printf_i+0x28>
 8004072:	a001      	add	r0, pc, #4	; (adr r0, 8004078 <_printf_i+0x40>)
 8004074:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004078:	080040d1 	.word	0x080040d1
 800407c:	080040e5 	.word	0x080040e5
 8004080:	08004061 	.word	0x08004061
 8004084:	08004061 	.word	0x08004061
 8004088:	08004061 	.word	0x08004061
 800408c:	08004061 	.word	0x08004061
 8004090:	080040e5 	.word	0x080040e5
 8004094:	08004061 	.word	0x08004061
 8004098:	08004061 	.word	0x08004061
 800409c:	08004061 	.word	0x08004061
 80040a0:	08004061 	.word	0x08004061
 80040a4:	080041f1 	.word	0x080041f1
 80040a8:	08004115 	.word	0x08004115
 80040ac:	080041d3 	.word	0x080041d3
 80040b0:	08004061 	.word	0x08004061
 80040b4:	08004061 	.word	0x08004061
 80040b8:	08004213 	.word	0x08004213
 80040bc:	08004061 	.word	0x08004061
 80040c0:	08004115 	.word	0x08004115
 80040c4:	08004061 	.word	0x08004061
 80040c8:	08004061 	.word	0x08004061
 80040cc:	080041db 	.word	0x080041db
 80040d0:	680b      	ldr	r3, [r1, #0]
 80040d2:	1d1a      	adds	r2, r3, #4
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	600a      	str	r2, [r1, #0]
 80040d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0a3      	b.n	800422c <_printf_i+0x1f4>
 80040e4:	6825      	ldr	r5, [r4, #0]
 80040e6:	6808      	ldr	r0, [r1, #0]
 80040e8:	062e      	lsls	r6, r5, #24
 80040ea:	f100 0304 	add.w	r3, r0, #4
 80040ee:	d50a      	bpl.n	8004106 <_printf_i+0xce>
 80040f0:	6805      	ldr	r5, [r0, #0]
 80040f2:	600b      	str	r3, [r1, #0]
 80040f4:	2d00      	cmp	r5, #0
 80040f6:	da03      	bge.n	8004100 <_printf_i+0xc8>
 80040f8:	232d      	movs	r3, #45	; 0x2d
 80040fa:	426d      	negs	r5, r5
 80040fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004100:	485e      	ldr	r0, [pc, #376]	; (800427c <_printf_i+0x244>)
 8004102:	230a      	movs	r3, #10
 8004104:	e019      	b.n	800413a <_printf_i+0x102>
 8004106:	f015 0f40 	tst.w	r5, #64	; 0x40
 800410a:	6805      	ldr	r5, [r0, #0]
 800410c:	600b      	str	r3, [r1, #0]
 800410e:	bf18      	it	ne
 8004110:	b22d      	sxthne	r5, r5
 8004112:	e7ef      	b.n	80040f4 <_printf_i+0xbc>
 8004114:	680b      	ldr	r3, [r1, #0]
 8004116:	6825      	ldr	r5, [r4, #0]
 8004118:	1d18      	adds	r0, r3, #4
 800411a:	6008      	str	r0, [r1, #0]
 800411c:	0628      	lsls	r0, r5, #24
 800411e:	d501      	bpl.n	8004124 <_printf_i+0xec>
 8004120:	681d      	ldr	r5, [r3, #0]
 8004122:	e002      	b.n	800412a <_printf_i+0xf2>
 8004124:	0669      	lsls	r1, r5, #25
 8004126:	d5fb      	bpl.n	8004120 <_printf_i+0xe8>
 8004128:	881d      	ldrh	r5, [r3, #0]
 800412a:	4854      	ldr	r0, [pc, #336]	; (800427c <_printf_i+0x244>)
 800412c:	2f6f      	cmp	r7, #111	; 0x6f
 800412e:	bf0c      	ite	eq
 8004130:	2308      	moveq	r3, #8
 8004132:	230a      	movne	r3, #10
 8004134:	2100      	movs	r1, #0
 8004136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800413a:	6866      	ldr	r6, [r4, #4]
 800413c:	60a6      	str	r6, [r4, #8]
 800413e:	2e00      	cmp	r6, #0
 8004140:	bfa2      	ittt	ge
 8004142:	6821      	ldrge	r1, [r4, #0]
 8004144:	f021 0104 	bicge.w	r1, r1, #4
 8004148:	6021      	strge	r1, [r4, #0]
 800414a:	b90d      	cbnz	r5, 8004150 <_printf_i+0x118>
 800414c:	2e00      	cmp	r6, #0
 800414e:	d04d      	beq.n	80041ec <_printf_i+0x1b4>
 8004150:	4616      	mov	r6, r2
 8004152:	fbb5 f1f3 	udiv	r1, r5, r3
 8004156:	fb03 5711 	mls	r7, r3, r1, r5
 800415a:	5dc7      	ldrb	r7, [r0, r7]
 800415c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004160:	462f      	mov	r7, r5
 8004162:	42bb      	cmp	r3, r7
 8004164:	460d      	mov	r5, r1
 8004166:	d9f4      	bls.n	8004152 <_printf_i+0x11a>
 8004168:	2b08      	cmp	r3, #8
 800416a:	d10b      	bne.n	8004184 <_printf_i+0x14c>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	07df      	lsls	r7, r3, #31
 8004170:	d508      	bpl.n	8004184 <_printf_i+0x14c>
 8004172:	6923      	ldr	r3, [r4, #16]
 8004174:	6861      	ldr	r1, [r4, #4]
 8004176:	4299      	cmp	r1, r3
 8004178:	bfde      	ittt	le
 800417a:	2330      	movle	r3, #48	; 0x30
 800417c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004180:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004184:	1b92      	subs	r2, r2, r6
 8004186:	6122      	str	r2, [r4, #16]
 8004188:	f8cd a000 	str.w	sl, [sp]
 800418c:	464b      	mov	r3, r9
 800418e:	aa03      	add	r2, sp, #12
 8004190:	4621      	mov	r1, r4
 8004192:	4640      	mov	r0, r8
 8004194:	f7ff fee2 	bl	8003f5c <_printf_common>
 8004198:	3001      	adds	r0, #1
 800419a:	d14c      	bne.n	8004236 <_printf_i+0x1fe>
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	b004      	add	sp, #16
 80041a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a6:	4835      	ldr	r0, [pc, #212]	; (800427c <_printf_i+0x244>)
 80041a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	680e      	ldr	r6, [r1, #0]
 80041b0:	061f      	lsls	r7, r3, #24
 80041b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80041b6:	600e      	str	r6, [r1, #0]
 80041b8:	d514      	bpl.n	80041e4 <_printf_i+0x1ac>
 80041ba:	07d9      	lsls	r1, r3, #31
 80041bc:	bf44      	itt	mi
 80041be:	f043 0320 	orrmi.w	r3, r3, #32
 80041c2:	6023      	strmi	r3, [r4, #0]
 80041c4:	b91d      	cbnz	r5, 80041ce <_printf_i+0x196>
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	f023 0320 	bic.w	r3, r3, #32
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	2310      	movs	r3, #16
 80041d0:	e7b0      	b.n	8004134 <_printf_i+0xfc>
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	f043 0320 	orr.w	r3, r3, #32
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	2378      	movs	r3, #120	; 0x78
 80041dc:	4828      	ldr	r0, [pc, #160]	; (8004280 <_printf_i+0x248>)
 80041de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041e2:	e7e3      	b.n	80041ac <_printf_i+0x174>
 80041e4:	065e      	lsls	r6, r3, #25
 80041e6:	bf48      	it	mi
 80041e8:	b2ad      	uxthmi	r5, r5
 80041ea:	e7e6      	b.n	80041ba <_printf_i+0x182>
 80041ec:	4616      	mov	r6, r2
 80041ee:	e7bb      	b.n	8004168 <_printf_i+0x130>
 80041f0:	680b      	ldr	r3, [r1, #0]
 80041f2:	6826      	ldr	r6, [r4, #0]
 80041f4:	6960      	ldr	r0, [r4, #20]
 80041f6:	1d1d      	adds	r5, r3, #4
 80041f8:	600d      	str	r5, [r1, #0]
 80041fa:	0635      	lsls	r5, r6, #24
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	d501      	bpl.n	8004204 <_printf_i+0x1cc>
 8004200:	6018      	str	r0, [r3, #0]
 8004202:	e002      	b.n	800420a <_printf_i+0x1d2>
 8004204:	0671      	lsls	r1, r6, #25
 8004206:	d5fb      	bpl.n	8004200 <_printf_i+0x1c8>
 8004208:	8018      	strh	r0, [r3, #0]
 800420a:	2300      	movs	r3, #0
 800420c:	6123      	str	r3, [r4, #16]
 800420e:	4616      	mov	r6, r2
 8004210:	e7ba      	b.n	8004188 <_printf_i+0x150>
 8004212:	680b      	ldr	r3, [r1, #0]
 8004214:	1d1a      	adds	r2, r3, #4
 8004216:	600a      	str	r2, [r1, #0]
 8004218:	681e      	ldr	r6, [r3, #0]
 800421a:	6862      	ldr	r2, [r4, #4]
 800421c:	2100      	movs	r1, #0
 800421e:	4630      	mov	r0, r6
 8004220:	f7fc f816 	bl	8000250 <memchr>
 8004224:	b108      	cbz	r0, 800422a <_printf_i+0x1f2>
 8004226:	1b80      	subs	r0, r0, r6
 8004228:	6060      	str	r0, [r4, #4]
 800422a:	6863      	ldr	r3, [r4, #4]
 800422c:	6123      	str	r3, [r4, #16]
 800422e:	2300      	movs	r3, #0
 8004230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004234:	e7a8      	b.n	8004188 <_printf_i+0x150>
 8004236:	6923      	ldr	r3, [r4, #16]
 8004238:	4632      	mov	r2, r6
 800423a:	4649      	mov	r1, r9
 800423c:	4640      	mov	r0, r8
 800423e:	47d0      	blx	sl
 8004240:	3001      	adds	r0, #1
 8004242:	d0ab      	beq.n	800419c <_printf_i+0x164>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	079b      	lsls	r3, r3, #30
 8004248:	d413      	bmi.n	8004272 <_printf_i+0x23a>
 800424a:	68e0      	ldr	r0, [r4, #12]
 800424c:	9b03      	ldr	r3, [sp, #12]
 800424e:	4298      	cmp	r0, r3
 8004250:	bfb8      	it	lt
 8004252:	4618      	movlt	r0, r3
 8004254:	e7a4      	b.n	80041a0 <_printf_i+0x168>
 8004256:	2301      	movs	r3, #1
 8004258:	4632      	mov	r2, r6
 800425a:	4649      	mov	r1, r9
 800425c:	4640      	mov	r0, r8
 800425e:	47d0      	blx	sl
 8004260:	3001      	adds	r0, #1
 8004262:	d09b      	beq.n	800419c <_printf_i+0x164>
 8004264:	3501      	adds	r5, #1
 8004266:	68e3      	ldr	r3, [r4, #12]
 8004268:	9903      	ldr	r1, [sp, #12]
 800426a:	1a5b      	subs	r3, r3, r1
 800426c:	42ab      	cmp	r3, r5
 800426e:	dcf2      	bgt.n	8004256 <_printf_i+0x21e>
 8004270:	e7eb      	b.n	800424a <_printf_i+0x212>
 8004272:	2500      	movs	r5, #0
 8004274:	f104 0619 	add.w	r6, r4, #25
 8004278:	e7f5      	b.n	8004266 <_printf_i+0x22e>
 800427a:	bf00      	nop
 800427c:	0800667e 	.word	0x0800667e
 8004280:	0800668f 	.word	0x0800668f

08004284 <siprintf>:
 8004284:	b40e      	push	{r1, r2, r3}
 8004286:	b500      	push	{lr}
 8004288:	b09c      	sub	sp, #112	; 0x70
 800428a:	ab1d      	add	r3, sp, #116	; 0x74
 800428c:	9002      	str	r0, [sp, #8]
 800428e:	9006      	str	r0, [sp, #24]
 8004290:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004294:	4809      	ldr	r0, [pc, #36]	; (80042bc <siprintf+0x38>)
 8004296:	9107      	str	r1, [sp, #28]
 8004298:	9104      	str	r1, [sp, #16]
 800429a:	4909      	ldr	r1, [pc, #36]	; (80042c0 <siprintf+0x3c>)
 800429c:	f853 2b04 	ldr.w	r2, [r3], #4
 80042a0:	9105      	str	r1, [sp, #20]
 80042a2:	6800      	ldr	r0, [r0, #0]
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	a902      	add	r1, sp, #8
 80042a8:	f001 faca 	bl	8005840 <_svfiprintf_r>
 80042ac:	9b02      	ldr	r3, [sp, #8]
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	b01c      	add	sp, #112	; 0x70
 80042b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042b8:	b003      	add	sp, #12
 80042ba:	4770      	bx	lr
 80042bc:	20000014 	.word	0x20000014
 80042c0:	ffff0208 	.word	0xffff0208

080042c4 <quorem>:
 80042c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c8:	6903      	ldr	r3, [r0, #16]
 80042ca:	690c      	ldr	r4, [r1, #16]
 80042cc:	42a3      	cmp	r3, r4
 80042ce:	4607      	mov	r7, r0
 80042d0:	f2c0 8081 	blt.w	80043d6 <quorem+0x112>
 80042d4:	3c01      	subs	r4, #1
 80042d6:	f101 0814 	add.w	r8, r1, #20
 80042da:	f100 0514 	add.w	r5, r0, #20
 80042de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80042e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042ec:	3301      	adds	r3, #1
 80042ee:	429a      	cmp	r2, r3
 80042f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80042f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80042f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80042fc:	d331      	bcc.n	8004362 <quorem+0x9e>
 80042fe:	f04f 0e00 	mov.w	lr, #0
 8004302:	4640      	mov	r0, r8
 8004304:	46ac      	mov	ip, r5
 8004306:	46f2      	mov	sl, lr
 8004308:	f850 2b04 	ldr.w	r2, [r0], #4
 800430c:	b293      	uxth	r3, r2
 800430e:	fb06 e303 	mla	r3, r6, r3, lr
 8004312:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004316:	b29b      	uxth	r3, r3
 8004318:	ebaa 0303 	sub.w	r3, sl, r3
 800431c:	0c12      	lsrs	r2, r2, #16
 800431e:	f8dc a000 	ldr.w	sl, [ip]
 8004322:	fb06 e202 	mla	r2, r6, r2, lr
 8004326:	fa13 f38a 	uxtah	r3, r3, sl
 800432a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800432e:	fa1f fa82 	uxth.w	sl, r2
 8004332:	f8dc 2000 	ldr.w	r2, [ip]
 8004336:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800433a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800433e:	b29b      	uxth	r3, r3
 8004340:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004344:	4581      	cmp	r9, r0
 8004346:	f84c 3b04 	str.w	r3, [ip], #4
 800434a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800434e:	d2db      	bcs.n	8004308 <quorem+0x44>
 8004350:	f855 300b 	ldr.w	r3, [r5, fp]
 8004354:	b92b      	cbnz	r3, 8004362 <quorem+0x9e>
 8004356:	9b01      	ldr	r3, [sp, #4]
 8004358:	3b04      	subs	r3, #4
 800435a:	429d      	cmp	r5, r3
 800435c:	461a      	mov	r2, r3
 800435e:	d32e      	bcc.n	80043be <quorem+0xfa>
 8004360:	613c      	str	r4, [r7, #16]
 8004362:	4638      	mov	r0, r7
 8004364:	f001 f856 	bl	8005414 <__mcmp>
 8004368:	2800      	cmp	r0, #0
 800436a:	db24      	blt.n	80043b6 <quorem+0xf2>
 800436c:	3601      	adds	r6, #1
 800436e:	4628      	mov	r0, r5
 8004370:	f04f 0c00 	mov.w	ip, #0
 8004374:	f858 2b04 	ldr.w	r2, [r8], #4
 8004378:	f8d0 e000 	ldr.w	lr, [r0]
 800437c:	b293      	uxth	r3, r2
 800437e:	ebac 0303 	sub.w	r3, ip, r3
 8004382:	0c12      	lsrs	r2, r2, #16
 8004384:	fa13 f38e 	uxtah	r3, r3, lr
 8004388:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800438c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004390:	b29b      	uxth	r3, r3
 8004392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004396:	45c1      	cmp	r9, r8
 8004398:	f840 3b04 	str.w	r3, [r0], #4
 800439c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80043a0:	d2e8      	bcs.n	8004374 <quorem+0xb0>
 80043a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043aa:	b922      	cbnz	r2, 80043b6 <quorem+0xf2>
 80043ac:	3b04      	subs	r3, #4
 80043ae:	429d      	cmp	r5, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	d30a      	bcc.n	80043ca <quorem+0x106>
 80043b4:	613c      	str	r4, [r7, #16]
 80043b6:	4630      	mov	r0, r6
 80043b8:	b003      	add	sp, #12
 80043ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	3b04      	subs	r3, #4
 80043c2:	2a00      	cmp	r2, #0
 80043c4:	d1cc      	bne.n	8004360 <quorem+0x9c>
 80043c6:	3c01      	subs	r4, #1
 80043c8:	e7c7      	b.n	800435a <quorem+0x96>
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	3b04      	subs	r3, #4
 80043ce:	2a00      	cmp	r2, #0
 80043d0:	d1f0      	bne.n	80043b4 <quorem+0xf0>
 80043d2:	3c01      	subs	r4, #1
 80043d4:	e7eb      	b.n	80043ae <quorem+0xea>
 80043d6:	2000      	movs	r0, #0
 80043d8:	e7ee      	b.n	80043b8 <quorem+0xf4>
 80043da:	0000      	movs	r0, r0
 80043dc:	0000      	movs	r0, r0
	...

080043e0 <_dtoa_r>:
 80043e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e4:	ec59 8b10 	vmov	r8, r9, d0
 80043e8:	b095      	sub	sp, #84	; 0x54
 80043ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80043ec:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80043ee:	9107      	str	r1, [sp, #28]
 80043f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80043f4:	4606      	mov	r6, r0
 80043f6:	9209      	str	r2, [sp, #36]	; 0x24
 80043f8:	9310      	str	r3, [sp, #64]	; 0x40
 80043fa:	b975      	cbnz	r5, 800441a <_dtoa_r+0x3a>
 80043fc:	2010      	movs	r0, #16
 80043fe:	f000 fd75 	bl	8004eec <malloc>
 8004402:	4602      	mov	r2, r0
 8004404:	6270      	str	r0, [r6, #36]	; 0x24
 8004406:	b920      	cbnz	r0, 8004412 <_dtoa_r+0x32>
 8004408:	4bab      	ldr	r3, [pc, #684]	; (80046b8 <_dtoa_r+0x2d8>)
 800440a:	21ea      	movs	r1, #234	; 0xea
 800440c:	48ab      	ldr	r0, [pc, #684]	; (80046bc <_dtoa_r+0x2dc>)
 800440e:	f001 fb27 	bl	8005a60 <__assert_func>
 8004412:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004416:	6005      	str	r5, [r0, #0]
 8004418:	60c5      	str	r5, [r0, #12]
 800441a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800441c:	6819      	ldr	r1, [r3, #0]
 800441e:	b151      	cbz	r1, 8004436 <_dtoa_r+0x56>
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	604a      	str	r2, [r1, #4]
 8004424:	2301      	movs	r3, #1
 8004426:	4093      	lsls	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
 800442a:	4630      	mov	r0, r6
 800442c:	f000 fdb4 	bl	8004f98 <_Bfree>
 8004430:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	f1b9 0300 	subs.w	r3, r9, #0
 800443a:	bfbb      	ittet	lt
 800443c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004440:	9303      	strlt	r3, [sp, #12]
 8004442:	2300      	movge	r3, #0
 8004444:	2201      	movlt	r2, #1
 8004446:	bfac      	ite	ge
 8004448:	6023      	strge	r3, [r4, #0]
 800444a:	6022      	strlt	r2, [r4, #0]
 800444c:	4b9c      	ldr	r3, [pc, #624]	; (80046c0 <_dtoa_r+0x2e0>)
 800444e:	9c03      	ldr	r4, [sp, #12]
 8004450:	43a3      	bics	r3, r4
 8004452:	d11a      	bne.n	800448a <_dtoa_r+0xaa>
 8004454:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004456:	f242 730f 	movw	r3, #9999	; 0x270f
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004460:	ea53 0308 	orrs.w	r3, r3, r8
 8004464:	f000 8512 	beq.w	8004e8c <_dtoa_r+0xaac>
 8004468:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800446a:	b953      	cbnz	r3, 8004482 <_dtoa_r+0xa2>
 800446c:	4b95      	ldr	r3, [pc, #596]	; (80046c4 <_dtoa_r+0x2e4>)
 800446e:	e01f      	b.n	80044b0 <_dtoa_r+0xd0>
 8004470:	4b95      	ldr	r3, [pc, #596]	; (80046c8 <_dtoa_r+0x2e8>)
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	3308      	adds	r3, #8
 8004476:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	9800      	ldr	r0, [sp, #0]
 800447c:	b015      	add	sp, #84	; 0x54
 800447e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004482:	4b90      	ldr	r3, [pc, #576]	; (80046c4 <_dtoa_r+0x2e4>)
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	3303      	adds	r3, #3
 8004488:	e7f5      	b.n	8004476 <_dtoa_r+0x96>
 800448a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800448e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004496:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800449a:	d10b      	bne.n	80044b4 <_dtoa_r+0xd4>
 800449c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800449e:	2301      	movs	r3, #1
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 84ee 	beq.w	8004e86 <_dtoa_r+0xaa6>
 80044aa:	4888      	ldr	r0, [pc, #544]	; (80046cc <_dtoa_r+0x2ec>)
 80044ac:	6018      	str	r0, [r3, #0]
 80044ae:	1e43      	subs	r3, r0, #1
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	e7e2      	b.n	800447a <_dtoa_r+0x9a>
 80044b4:	a913      	add	r1, sp, #76	; 0x4c
 80044b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80044ba:	aa12      	add	r2, sp, #72	; 0x48
 80044bc:	4630      	mov	r0, r6
 80044be:	f001 f84d 	bl	800555c <__d2b>
 80044c2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80044c6:	4605      	mov	r5, r0
 80044c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80044ca:	2900      	cmp	r1, #0
 80044cc:	d047      	beq.n	800455e <_dtoa_r+0x17e>
 80044ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80044d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80044d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80044d8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80044dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80044e0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80044e4:	2400      	movs	r4, #0
 80044e6:	ec43 2b16 	vmov	d6, r2, r3
 80044ea:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80044ee:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80046a0 <_dtoa_r+0x2c0>
 80044f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80044f6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80046a8 <_dtoa_r+0x2c8>
 80044fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80044fe:	eeb0 7b46 	vmov.f64	d7, d6
 8004502:	ee06 1a90 	vmov	s13, r1
 8004506:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800450a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80046b0 <_dtoa_r+0x2d0>
 800450e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8004512:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004516:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800451a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451e:	ee16 ba90 	vmov	fp, s13
 8004522:	9411      	str	r4, [sp, #68]	; 0x44
 8004524:	d508      	bpl.n	8004538 <_dtoa_r+0x158>
 8004526:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800452a:	eeb4 6b47 	vcmp.f64	d6, d7
 800452e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004532:	bf18      	it	ne
 8004534:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004538:	f1bb 0f16 	cmp.w	fp, #22
 800453c:	d832      	bhi.n	80045a4 <_dtoa_r+0x1c4>
 800453e:	4b64      	ldr	r3, [pc, #400]	; (80046d0 <_dtoa_r+0x2f0>)
 8004540:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004544:	ed93 7b00 	vldr	d7, [r3]
 8004548:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800454c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004554:	d501      	bpl.n	800455a <_dtoa_r+0x17a>
 8004556:	f10b 3bff 	add.w	fp, fp, #4294967295
 800455a:	2300      	movs	r3, #0
 800455c:	e023      	b.n	80045a6 <_dtoa_r+0x1c6>
 800455e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004560:	4401      	add	r1, r0
 8004562:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8004566:	2b20      	cmp	r3, #32
 8004568:	bfc3      	ittte	gt
 800456a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800456e:	fa04 f303 	lslgt.w	r3, r4, r3
 8004572:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8004576:	f1c3 0320 	rsble	r3, r3, #32
 800457a:	bfc6      	itte	gt
 800457c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8004580:	ea43 0308 	orrgt.w	r3, r3, r8
 8004584:	fa08 f303 	lslle.w	r3, r8, r3
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004590:	3901      	subs	r1, #1
 8004592:	ed8d 7b00 	vstr	d7, [sp]
 8004596:	9c01      	ldr	r4, [sp, #4]
 8004598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800459c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80045a0:	2401      	movs	r4, #1
 80045a2:	e7a0      	b.n	80044e6 <_dtoa_r+0x106>
 80045a4:	2301      	movs	r3, #1
 80045a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80045a8:	1a43      	subs	r3, r0, r1
 80045aa:	1e5a      	subs	r2, r3, #1
 80045ac:	bf45      	ittet	mi
 80045ae:	f1c3 0301 	rsbmi	r3, r3, #1
 80045b2:	9305      	strmi	r3, [sp, #20]
 80045b4:	2300      	movpl	r3, #0
 80045b6:	2300      	movmi	r3, #0
 80045b8:	9206      	str	r2, [sp, #24]
 80045ba:	bf54      	ite	pl
 80045bc:	9305      	strpl	r3, [sp, #20]
 80045be:	9306      	strmi	r3, [sp, #24]
 80045c0:	f1bb 0f00 	cmp.w	fp, #0
 80045c4:	db18      	blt.n	80045f8 <_dtoa_r+0x218>
 80045c6:	9b06      	ldr	r3, [sp, #24]
 80045c8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80045cc:	445b      	add	r3, fp
 80045ce:	9306      	str	r3, [sp, #24]
 80045d0:	2300      	movs	r3, #0
 80045d2:	9a07      	ldr	r2, [sp, #28]
 80045d4:	2a09      	cmp	r2, #9
 80045d6:	d849      	bhi.n	800466c <_dtoa_r+0x28c>
 80045d8:	2a05      	cmp	r2, #5
 80045da:	bfc4      	itt	gt
 80045dc:	3a04      	subgt	r2, #4
 80045de:	9207      	strgt	r2, [sp, #28]
 80045e0:	9a07      	ldr	r2, [sp, #28]
 80045e2:	f1a2 0202 	sub.w	r2, r2, #2
 80045e6:	bfcc      	ite	gt
 80045e8:	2400      	movgt	r4, #0
 80045ea:	2401      	movle	r4, #1
 80045ec:	2a03      	cmp	r2, #3
 80045ee:	d848      	bhi.n	8004682 <_dtoa_r+0x2a2>
 80045f0:	e8df f002 	tbb	[pc, r2]
 80045f4:	3a2c2e0b 	.word	0x3a2c2e0b
 80045f8:	9b05      	ldr	r3, [sp, #20]
 80045fa:	2200      	movs	r2, #0
 80045fc:	eba3 030b 	sub.w	r3, r3, fp
 8004600:	9305      	str	r3, [sp, #20]
 8004602:	920e      	str	r2, [sp, #56]	; 0x38
 8004604:	f1cb 0300 	rsb	r3, fp, #0
 8004608:	e7e3      	b.n	80045d2 <_dtoa_r+0x1f2>
 800460a:	2200      	movs	r2, #0
 800460c:	9208      	str	r2, [sp, #32]
 800460e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004610:	2a00      	cmp	r2, #0
 8004612:	dc39      	bgt.n	8004688 <_dtoa_r+0x2a8>
 8004614:	f04f 0a01 	mov.w	sl, #1
 8004618:	46d1      	mov	r9, sl
 800461a:	4652      	mov	r2, sl
 800461c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004620:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8004622:	2100      	movs	r1, #0
 8004624:	6079      	str	r1, [r7, #4]
 8004626:	2004      	movs	r0, #4
 8004628:	f100 0c14 	add.w	ip, r0, #20
 800462c:	4594      	cmp	ip, r2
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	d92f      	bls.n	8004692 <_dtoa_r+0x2b2>
 8004632:	4630      	mov	r0, r6
 8004634:	930c      	str	r3, [sp, #48]	; 0x30
 8004636:	f000 fc6f 	bl	8004f18 <_Balloc>
 800463a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800463c:	9000      	str	r0, [sp, #0]
 800463e:	4602      	mov	r2, r0
 8004640:	2800      	cmp	r0, #0
 8004642:	d149      	bne.n	80046d8 <_dtoa_r+0x2f8>
 8004644:	4b23      	ldr	r3, [pc, #140]	; (80046d4 <_dtoa_r+0x2f4>)
 8004646:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800464a:	e6df      	b.n	800440c <_dtoa_r+0x2c>
 800464c:	2201      	movs	r2, #1
 800464e:	e7dd      	b.n	800460c <_dtoa_r+0x22c>
 8004650:	2200      	movs	r2, #0
 8004652:	9208      	str	r2, [sp, #32]
 8004654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004656:	eb0b 0a02 	add.w	sl, fp, r2
 800465a:	f10a 0901 	add.w	r9, sl, #1
 800465e:	464a      	mov	r2, r9
 8004660:	2a01      	cmp	r2, #1
 8004662:	bfb8      	it	lt
 8004664:	2201      	movlt	r2, #1
 8004666:	e7db      	b.n	8004620 <_dtoa_r+0x240>
 8004668:	2201      	movs	r2, #1
 800466a:	e7f2      	b.n	8004652 <_dtoa_r+0x272>
 800466c:	2401      	movs	r4, #1
 800466e:	2200      	movs	r2, #0
 8004670:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8004674:	f04f 3aff 	mov.w	sl, #4294967295
 8004678:	2100      	movs	r1, #0
 800467a:	46d1      	mov	r9, sl
 800467c:	2212      	movs	r2, #18
 800467e:	9109      	str	r1, [sp, #36]	; 0x24
 8004680:	e7ce      	b.n	8004620 <_dtoa_r+0x240>
 8004682:	2201      	movs	r2, #1
 8004684:	9208      	str	r2, [sp, #32]
 8004686:	e7f5      	b.n	8004674 <_dtoa_r+0x294>
 8004688:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800468c:	46d1      	mov	r9, sl
 800468e:	4652      	mov	r2, sl
 8004690:	e7c6      	b.n	8004620 <_dtoa_r+0x240>
 8004692:	3101      	adds	r1, #1
 8004694:	6079      	str	r1, [r7, #4]
 8004696:	0040      	lsls	r0, r0, #1
 8004698:	e7c6      	b.n	8004628 <_dtoa_r+0x248>
 800469a:	bf00      	nop
 800469c:	f3af 8000 	nop.w
 80046a0:	636f4361 	.word	0x636f4361
 80046a4:	3fd287a7 	.word	0x3fd287a7
 80046a8:	8b60c8b3 	.word	0x8b60c8b3
 80046ac:	3fc68a28 	.word	0x3fc68a28
 80046b0:	509f79fb 	.word	0x509f79fb
 80046b4:	3fd34413 	.word	0x3fd34413
 80046b8:	080066ad 	.word	0x080066ad
 80046bc:	080066c4 	.word	0x080066c4
 80046c0:	7ff00000 	.word	0x7ff00000
 80046c4:	080066a9 	.word	0x080066a9
 80046c8:	080066a0 	.word	0x080066a0
 80046cc:	0800667d 	.word	0x0800667d
 80046d0:	080067c0 	.word	0x080067c0
 80046d4:	08006723 	.word	0x08006723
 80046d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80046da:	9900      	ldr	r1, [sp, #0]
 80046dc:	6011      	str	r1, [r2, #0]
 80046de:	f1b9 0f0e 	cmp.w	r9, #14
 80046e2:	d872      	bhi.n	80047ca <_dtoa_r+0x3ea>
 80046e4:	2c00      	cmp	r4, #0
 80046e6:	d070      	beq.n	80047ca <_dtoa_r+0x3ea>
 80046e8:	f1bb 0f00 	cmp.w	fp, #0
 80046ec:	f340 80a6 	ble.w	800483c <_dtoa_r+0x45c>
 80046f0:	49ca      	ldr	r1, [pc, #808]	; (8004a1c <_dtoa_r+0x63c>)
 80046f2:	f00b 020f 	and.w	r2, fp, #15
 80046f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80046fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80046fe:	ed92 7b00 	vldr	d7, [r2]
 8004702:	ea4f 112b 	mov.w	r1, fp, asr #4
 8004706:	f000 808d 	beq.w	8004824 <_dtoa_r+0x444>
 800470a:	4ac5      	ldr	r2, [pc, #788]	; (8004a20 <_dtoa_r+0x640>)
 800470c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8004710:	ed92 6b08 	vldr	d6, [r2, #32]
 8004714:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8004718:	ed8d 6b02 	vstr	d6, [sp, #8]
 800471c:	f001 010f 	and.w	r1, r1, #15
 8004720:	2203      	movs	r2, #3
 8004722:	48bf      	ldr	r0, [pc, #764]	; (8004a20 <_dtoa_r+0x640>)
 8004724:	2900      	cmp	r1, #0
 8004726:	d17f      	bne.n	8004828 <_dtoa_r+0x448>
 8004728:	ed9d 6b02 	vldr	d6, [sp, #8]
 800472c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004730:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004734:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004736:	2900      	cmp	r1, #0
 8004738:	f000 80b2 	beq.w	80048a0 <_dtoa_r+0x4c0>
 800473c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004740:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004744:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474c:	f140 80a8 	bpl.w	80048a0 <_dtoa_r+0x4c0>
 8004750:	f1b9 0f00 	cmp.w	r9, #0
 8004754:	f000 80a4 	beq.w	80048a0 <_dtoa_r+0x4c0>
 8004758:	f1ba 0f00 	cmp.w	sl, #0
 800475c:	dd31      	ble.n	80047c2 <_dtoa_r+0x3e2>
 800475e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004762:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004766:	ed8d 7b02 	vstr	d7, [sp, #8]
 800476a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800476e:	3201      	adds	r2, #1
 8004770:	4650      	mov	r0, sl
 8004772:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004776:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800477a:	ee07 2a90 	vmov	s15, r2
 800477e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004782:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004786:	ed8d 5b02 	vstr	d5, [sp, #8]
 800478a:	9c03      	ldr	r4, [sp, #12]
 800478c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004790:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8004794:	2800      	cmp	r0, #0
 8004796:	f040 8086 	bne.w	80048a6 <_dtoa_r+0x4c6>
 800479a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800479e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80047a2:	ec42 1b17 	vmov	d7, r1, r2
 80047a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80047aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ae:	f300 8272 	bgt.w	8004c96 <_dtoa_r+0x8b6>
 80047b2:	eeb1 7b47 	vneg.f64	d7, d7
 80047b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80047ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047be:	f100 8267 	bmi.w	8004c90 <_dtoa_r+0x8b0>
 80047c2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80047c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80047ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80047cc:	2a00      	cmp	r2, #0
 80047ce:	f2c0 8129 	blt.w	8004a24 <_dtoa_r+0x644>
 80047d2:	f1bb 0f0e 	cmp.w	fp, #14
 80047d6:	f300 8125 	bgt.w	8004a24 <_dtoa_r+0x644>
 80047da:	4b90      	ldr	r3, [pc, #576]	; (8004a1c <_dtoa_r+0x63c>)
 80047dc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80047e0:	ed93 6b00 	vldr	d6, [r3]
 80047e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f280 80c3 	bge.w	8004972 <_dtoa_r+0x592>
 80047ec:	f1b9 0f00 	cmp.w	r9, #0
 80047f0:	f300 80bf 	bgt.w	8004972 <_dtoa_r+0x592>
 80047f4:	f040 824c 	bne.w	8004c90 <_dtoa_r+0x8b0>
 80047f8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80047fc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004800:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004804:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480c:	464c      	mov	r4, r9
 800480e:	464f      	mov	r7, r9
 8004810:	f280 8222 	bge.w	8004c58 <_dtoa_r+0x878>
 8004814:	f8dd 8000 	ldr.w	r8, [sp]
 8004818:	2331      	movs	r3, #49	; 0x31
 800481a:	f808 3b01 	strb.w	r3, [r8], #1
 800481e:	f10b 0b01 	add.w	fp, fp, #1
 8004822:	e21e      	b.n	8004c62 <_dtoa_r+0x882>
 8004824:	2202      	movs	r2, #2
 8004826:	e77c      	b.n	8004722 <_dtoa_r+0x342>
 8004828:	07cc      	lsls	r4, r1, #31
 800482a:	d504      	bpl.n	8004836 <_dtoa_r+0x456>
 800482c:	ed90 6b00 	vldr	d6, [r0]
 8004830:	3201      	adds	r2, #1
 8004832:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004836:	1049      	asrs	r1, r1, #1
 8004838:	3008      	adds	r0, #8
 800483a:	e773      	b.n	8004724 <_dtoa_r+0x344>
 800483c:	d02e      	beq.n	800489c <_dtoa_r+0x4bc>
 800483e:	f1cb 0100 	rsb	r1, fp, #0
 8004842:	4a76      	ldr	r2, [pc, #472]	; (8004a1c <_dtoa_r+0x63c>)
 8004844:	f001 000f 	and.w	r0, r1, #15
 8004848:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800484c:	ed92 7b00 	vldr	d7, [r2]
 8004850:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8004854:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004858:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800485c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8004860:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8004864:	486e      	ldr	r0, [pc, #440]	; (8004a20 <_dtoa_r+0x640>)
 8004866:	1109      	asrs	r1, r1, #4
 8004868:	2400      	movs	r4, #0
 800486a:	2202      	movs	r2, #2
 800486c:	b939      	cbnz	r1, 800487e <_dtoa_r+0x49e>
 800486e:	2c00      	cmp	r4, #0
 8004870:	f43f af60 	beq.w	8004734 <_dtoa_r+0x354>
 8004874:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800487c:	e75a      	b.n	8004734 <_dtoa_r+0x354>
 800487e:	07cf      	lsls	r7, r1, #31
 8004880:	d509      	bpl.n	8004896 <_dtoa_r+0x4b6>
 8004882:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8004886:	ed90 7b00 	vldr	d7, [r0]
 800488a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800488e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004892:	3201      	adds	r2, #1
 8004894:	2401      	movs	r4, #1
 8004896:	1049      	asrs	r1, r1, #1
 8004898:	3008      	adds	r0, #8
 800489a:	e7e7      	b.n	800486c <_dtoa_r+0x48c>
 800489c:	2202      	movs	r2, #2
 800489e:	e749      	b.n	8004734 <_dtoa_r+0x354>
 80048a0:	465f      	mov	r7, fp
 80048a2:	4648      	mov	r0, r9
 80048a4:	e765      	b.n	8004772 <_dtoa_r+0x392>
 80048a6:	ec42 1b17 	vmov	d7, r1, r2
 80048aa:	4a5c      	ldr	r2, [pc, #368]	; (8004a1c <_dtoa_r+0x63c>)
 80048ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80048b0:	ed12 4b02 	vldr	d4, [r2, #-8]
 80048b4:	9a00      	ldr	r2, [sp, #0]
 80048b6:	1814      	adds	r4, r2, r0
 80048b8:	9a08      	ldr	r2, [sp, #32]
 80048ba:	b352      	cbz	r2, 8004912 <_dtoa_r+0x532>
 80048bc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80048c0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80048c4:	f8dd 8000 	ldr.w	r8, [sp]
 80048c8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80048cc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80048d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80048d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80048d8:	ee14 2a90 	vmov	r2, s9
 80048dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80048e0:	3230      	adds	r2, #48	; 0x30
 80048e2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80048e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80048ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ee:	f808 2b01 	strb.w	r2, [r8], #1
 80048f2:	d439      	bmi.n	8004968 <_dtoa_r+0x588>
 80048f4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80048f8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80048fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004900:	d472      	bmi.n	80049e8 <_dtoa_r+0x608>
 8004902:	45a0      	cmp	r8, r4
 8004904:	f43f af5d 	beq.w	80047c2 <_dtoa_r+0x3e2>
 8004908:	ee27 7b03 	vmul.f64	d7, d7, d3
 800490c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004910:	e7e0      	b.n	80048d4 <_dtoa_r+0x4f4>
 8004912:	f8dd 8000 	ldr.w	r8, [sp]
 8004916:	ee27 7b04 	vmul.f64	d7, d7, d4
 800491a:	4621      	mov	r1, r4
 800491c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004920:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004924:	ee14 2a90 	vmov	r2, s9
 8004928:	3230      	adds	r2, #48	; 0x30
 800492a:	f808 2b01 	strb.w	r2, [r8], #1
 800492e:	45a0      	cmp	r8, r4
 8004930:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004934:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004938:	d118      	bne.n	800496c <_dtoa_r+0x58c>
 800493a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800493e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8004942:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494a:	dc4d      	bgt.n	80049e8 <_dtoa_r+0x608>
 800494c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004950:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004958:	f57f af33 	bpl.w	80047c2 <_dtoa_r+0x3e2>
 800495c:	4688      	mov	r8, r1
 800495e:	3901      	subs	r1, #1
 8004960:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004964:	2b30      	cmp	r3, #48	; 0x30
 8004966:	d0f9      	beq.n	800495c <_dtoa_r+0x57c>
 8004968:	46bb      	mov	fp, r7
 800496a:	e02a      	b.n	80049c2 <_dtoa_r+0x5e2>
 800496c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004970:	e7d6      	b.n	8004920 <_dtoa_r+0x540>
 8004972:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004976:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800497a:	f8dd 8000 	ldr.w	r8, [sp]
 800497e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004982:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004986:	ee15 3a10 	vmov	r3, s10
 800498a:	3330      	adds	r3, #48	; 0x30
 800498c:	f808 3b01 	strb.w	r3, [r8], #1
 8004990:	9b00      	ldr	r3, [sp, #0]
 8004992:	eba8 0303 	sub.w	r3, r8, r3
 8004996:	4599      	cmp	r9, r3
 8004998:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800499c:	eea3 7b46 	vfms.f64	d7, d3, d6
 80049a0:	d133      	bne.n	8004a0a <_dtoa_r+0x62a>
 80049a2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80049a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80049aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ae:	dc1a      	bgt.n	80049e6 <_dtoa_r+0x606>
 80049b0:	eeb4 7b46 	vcmp.f64	d7, d6
 80049b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b8:	d103      	bne.n	80049c2 <_dtoa_r+0x5e2>
 80049ba:	ee15 3a10 	vmov	r3, s10
 80049be:	07d9      	lsls	r1, r3, #31
 80049c0:	d411      	bmi.n	80049e6 <_dtoa_r+0x606>
 80049c2:	4629      	mov	r1, r5
 80049c4:	4630      	mov	r0, r6
 80049c6:	f000 fae7 	bl	8004f98 <_Bfree>
 80049ca:	2300      	movs	r3, #0
 80049cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80049ce:	f888 3000 	strb.w	r3, [r8]
 80049d2:	f10b 0301 	add.w	r3, fp, #1
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f43f ad4d 	beq.w	800447a <_dtoa_r+0x9a>
 80049e0:	f8c3 8000 	str.w	r8, [r3]
 80049e4:	e549      	b.n	800447a <_dtoa_r+0x9a>
 80049e6:	465f      	mov	r7, fp
 80049e8:	4643      	mov	r3, r8
 80049ea:	4698      	mov	r8, r3
 80049ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049f0:	2a39      	cmp	r2, #57	; 0x39
 80049f2:	d106      	bne.n	8004a02 <_dtoa_r+0x622>
 80049f4:	9a00      	ldr	r2, [sp, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d1f7      	bne.n	80049ea <_dtoa_r+0x60a>
 80049fa:	9900      	ldr	r1, [sp, #0]
 80049fc:	2230      	movs	r2, #48	; 0x30
 80049fe:	3701      	adds	r7, #1
 8004a00:	700a      	strb	r2, [r1, #0]
 8004a02:	781a      	ldrb	r2, [r3, #0]
 8004a04:	3201      	adds	r2, #1
 8004a06:	701a      	strb	r2, [r3, #0]
 8004a08:	e7ae      	b.n	8004968 <_dtoa_r+0x588>
 8004a0a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004a0e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a16:	d1b2      	bne.n	800497e <_dtoa_r+0x59e>
 8004a18:	e7d3      	b.n	80049c2 <_dtoa_r+0x5e2>
 8004a1a:	bf00      	nop
 8004a1c:	080067c0 	.word	0x080067c0
 8004a20:	08006798 	.word	0x08006798
 8004a24:	9908      	ldr	r1, [sp, #32]
 8004a26:	2900      	cmp	r1, #0
 8004a28:	f000 80d1 	beq.w	8004bce <_dtoa_r+0x7ee>
 8004a2c:	9907      	ldr	r1, [sp, #28]
 8004a2e:	2901      	cmp	r1, #1
 8004a30:	f300 80b4 	bgt.w	8004b9c <_dtoa_r+0x7bc>
 8004a34:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004a36:	2900      	cmp	r1, #0
 8004a38:	f000 80ac 	beq.w	8004b94 <_dtoa_r+0x7b4>
 8004a3c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004a40:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004a44:	461c      	mov	r4, r3
 8004a46:	930a      	str	r3, [sp, #40]	; 0x28
 8004a48:	9b05      	ldr	r3, [sp, #20]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	9305      	str	r3, [sp, #20]
 8004a4e:	9b06      	ldr	r3, [sp, #24]
 8004a50:	2101      	movs	r1, #1
 8004a52:	4413      	add	r3, r2
 8004a54:	4630      	mov	r0, r6
 8004a56:	9306      	str	r3, [sp, #24]
 8004a58:	f000 fb5a 	bl	8005110 <__i2b>
 8004a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a5e:	4607      	mov	r7, r0
 8004a60:	f1b8 0f00 	cmp.w	r8, #0
 8004a64:	dd0d      	ble.n	8004a82 <_dtoa_r+0x6a2>
 8004a66:	9a06      	ldr	r2, [sp, #24]
 8004a68:	2a00      	cmp	r2, #0
 8004a6a:	dd0a      	ble.n	8004a82 <_dtoa_r+0x6a2>
 8004a6c:	4542      	cmp	r2, r8
 8004a6e:	9905      	ldr	r1, [sp, #20]
 8004a70:	bfa8      	it	ge
 8004a72:	4642      	movge	r2, r8
 8004a74:	1a89      	subs	r1, r1, r2
 8004a76:	9105      	str	r1, [sp, #20]
 8004a78:	9906      	ldr	r1, [sp, #24]
 8004a7a:	eba8 0802 	sub.w	r8, r8, r2
 8004a7e:	1a8a      	subs	r2, r1, r2
 8004a80:	9206      	str	r2, [sp, #24]
 8004a82:	b303      	cbz	r3, 8004ac6 <_dtoa_r+0x6e6>
 8004a84:	9a08      	ldr	r2, [sp, #32]
 8004a86:	2a00      	cmp	r2, #0
 8004a88:	f000 80a6 	beq.w	8004bd8 <_dtoa_r+0x7f8>
 8004a8c:	2c00      	cmp	r4, #0
 8004a8e:	dd13      	ble.n	8004ab8 <_dtoa_r+0x6d8>
 8004a90:	4639      	mov	r1, r7
 8004a92:	4622      	mov	r2, r4
 8004a94:	4630      	mov	r0, r6
 8004a96:	930c      	str	r3, [sp, #48]	; 0x30
 8004a98:	f000 fbf6 	bl	8005288 <__pow5mult>
 8004a9c:	462a      	mov	r2, r5
 8004a9e:	4601      	mov	r1, r0
 8004aa0:	4607      	mov	r7, r0
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	f000 fb4a 	bl	800513c <__multiply>
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	900a      	str	r0, [sp, #40]	; 0x28
 8004aac:	4630      	mov	r0, r6
 8004aae:	f000 fa73 	bl	8004f98 <_Bfree>
 8004ab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ab6:	4615      	mov	r5, r2
 8004ab8:	1b1a      	subs	r2, r3, r4
 8004aba:	d004      	beq.n	8004ac6 <_dtoa_r+0x6e6>
 8004abc:	4629      	mov	r1, r5
 8004abe:	4630      	mov	r0, r6
 8004ac0:	f000 fbe2 	bl	8005288 <__pow5mult>
 8004ac4:	4605      	mov	r5, r0
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f000 fb21 	bl	8005110 <__i2b>
 8004ace:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	f340 8082 	ble.w	8004bdc <_dtoa_r+0x7fc>
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4601      	mov	r1, r0
 8004adc:	4630      	mov	r0, r6
 8004ade:	f000 fbd3 	bl	8005288 <__pow5mult>
 8004ae2:	9b07      	ldr	r3, [sp, #28]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	dd7b      	ble.n	8004be2 <_dtoa_r+0x802>
 8004aea:	2300      	movs	r3, #0
 8004aec:	930a      	str	r3, [sp, #40]	; 0x28
 8004aee:	6922      	ldr	r2, [r4, #16]
 8004af0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004af4:	6910      	ldr	r0, [r2, #16]
 8004af6:	f000 fabb 	bl	8005070 <__hi0bits>
 8004afa:	f1c0 0020 	rsb	r0, r0, #32
 8004afe:	9b06      	ldr	r3, [sp, #24]
 8004b00:	4418      	add	r0, r3
 8004b02:	f010 001f 	ands.w	r0, r0, #31
 8004b06:	f000 808d 	beq.w	8004c24 <_dtoa_r+0x844>
 8004b0a:	f1c0 0220 	rsb	r2, r0, #32
 8004b0e:	2a04      	cmp	r2, #4
 8004b10:	f340 8086 	ble.w	8004c20 <_dtoa_r+0x840>
 8004b14:	f1c0 001c 	rsb	r0, r0, #28
 8004b18:	9b05      	ldr	r3, [sp, #20]
 8004b1a:	4403      	add	r3, r0
 8004b1c:	9305      	str	r3, [sp, #20]
 8004b1e:	9b06      	ldr	r3, [sp, #24]
 8004b20:	4403      	add	r3, r0
 8004b22:	4480      	add	r8, r0
 8004b24:	9306      	str	r3, [sp, #24]
 8004b26:	9b05      	ldr	r3, [sp, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	dd05      	ble.n	8004b38 <_dtoa_r+0x758>
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	461a      	mov	r2, r3
 8004b30:	4630      	mov	r0, r6
 8004b32:	f000 fc03 	bl	800533c <__lshift>
 8004b36:	4605      	mov	r5, r0
 8004b38:	9b06      	ldr	r3, [sp, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	dd05      	ble.n	8004b4a <_dtoa_r+0x76a>
 8004b3e:	4621      	mov	r1, r4
 8004b40:	461a      	mov	r2, r3
 8004b42:	4630      	mov	r0, r6
 8004b44:	f000 fbfa 	bl	800533c <__lshift>
 8004b48:	4604      	mov	r4, r0
 8004b4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d06b      	beq.n	8004c28 <_dtoa_r+0x848>
 8004b50:	4621      	mov	r1, r4
 8004b52:	4628      	mov	r0, r5
 8004b54:	f000 fc5e 	bl	8005414 <__mcmp>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	da65      	bge.n	8004c28 <_dtoa_r+0x848>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4629      	mov	r1, r5
 8004b60:	220a      	movs	r2, #10
 8004b62:	4630      	mov	r0, r6
 8004b64:	f000 fa3a 	bl	8004fdc <__multadd>
 8004b68:	9b08      	ldr	r3, [sp, #32]
 8004b6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004b6e:	4605      	mov	r5, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8192 	beq.w	8004e9a <_dtoa_r+0xaba>
 8004b76:	4639      	mov	r1, r7
 8004b78:	2300      	movs	r3, #0
 8004b7a:	220a      	movs	r2, #10
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f000 fa2d 	bl	8004fdc <__multadd>
 8004b82:	f1ba 0f00 	cmp.w	sl, #0
 8004b86:	4607      	mov	r7, r0
 8004b88:	f300 808e 	bgt.w	8004ca8 <_dtoa_r+0x8c8>
 8004b8c:	9b07      	ldr	r3, [sp, #28]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	dc51      	bgt.n	8004c36 <_dtoa_r+0x856>
 8004b92:	e089      	b.n	8004ca8 <_dtoa_r+0x8c8>
 8004b94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004b9a:	e751      	b.n	8004a40 <_dtoa_r+0x660>
 8004b9c:	f109 34ff 	add.w	r4, r9, #4294967295
 8004ba0:	42a3      	cmp	r3, r4
 8004ba2:	bfbf      	itttt	lt
 8004ba4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004ba6:	1ae3      	sublt	r3, r4, r3
 8004ba8:	18d2      	addlt	r2, r2, r3
 8004baa:	4613      	movlt	r3, r2
 8004bac:	bfb7      	itett	lt
 8004bae:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004bb0:	1b1c      	subge	r4, r3, r4
 8004bb2:	4623      	movlt	r3, r4
 8004bb4:	2400      	movlt	r4, #0
 8004bb6:	f1b9 0f00 	cmp.w	r9, #0
 8004bba:	bfb5      	itete	lt
 8004bbc:	9a05      	ldrlt	r2, [sp, #20]
 8004bbe:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8004bc2:	eba2 0809 	sublt.w	r8, r2, r9
 8004bc6:	464a      	movge	r2, r9
 8004bc8:	bfb8      	it	lt
 8004bca:	2200      	movlt	r2, #0
 8004bcc:	e73b      	b.n	8004a46 <_dtoa_r+0x666>
 8004bce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004bd2:	9f08      	ldr	r7, [sp, #32]
 8004bd4:	461c      	mov	r4, r3
 8004bd6:	e743      	b.n	8004a60 <_dtoa_r+0x680>
 8004bd8:	461a      	mov	r2, r3
 8004bda:	e76f      	b.n	8004abc <_dtoa_r+0x6dc>
 8004bdc:	9b07      	ldr	r3, [sp, #28]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	dc18      	bgt.n	8004c14 <_dtoa_r+0x834>
 8004be2:	9b02      	ldr	r3, [sp, #8]
 8004be4:	b9b3      	cbnz	r3, 8004c14 <_dtoa_r+0x834>
 8004be6:	9b03      	ldr	r3, [sp, #12]
 8004be8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004bec:	b9a2      	cbnz	r2, 8004c18 <_dtoa_r+0x838>
 8004bee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bf2:	0d12      	lsrs	r2, r2, #20
 8004bf4:	0512      	lsls	r2, r2, #20
 8004bf6:	b18a      	cbz	r2, 8004c1c <_dtoa_r+0x83c>
 8004bf8:	9b05      	ldr	r3, [sp, #20]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	9305      	str	r3, [sp, #20]
 8004bfe:	9b06      	ldr	r3, [sp, #24]
 8004c00:	3301      	adds	r3, #1
 8004c02:	9306      	str	r3, [sp, #24]
 8004c04:	2301      	movs	r3, #1
 8004c06:	930a      	str	r3, [sp, #40]	; 0x28
 8004c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f47f af6f 	bne.w	8004aee <_dtoa_r+0x70e>
 8004c10:	2001      	movs	r0, #1
 8004c12:	e774      	b.n	8004afe <_dtoa_r+0x71e>
 8004c14:	2300      	movs	r3, #0
 8004c16:	e7f6      	b.n	8004c06 <_dtoa_r+0x826>
 8004c18:	9b02      	ldr	r3, [sp, #8]
 8004c1a:	e7f4      	b.n	8004c06 <_dtoa_r+0x826>
 8004c1c:	920a      	str	r2, [sp, #40]	; 0x28
 8004c1e:	e7f3      	b.n	8004c08 <_dtoa_r+0x828>
 8004c20:	d081      	beq.n	8004b26 <_dtoa_r+0x746>
 8004c22:	4610      	mov	r0, r2
 8004c24:	301c      	adds	r0, #28
 8004c26:	e777      	b.n	8004b18 <_dtoa_r+0x738>
 8004c28:	f1b9 0f00 	cmp.w	r9, #0
 8004c2c:	dc37      	bgt.n	8004c9e <_dtoa_r+0x8be>
 8004c2e:	9b07      	ldr	r3, [sp, #28]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	dd34      	ble.n	8004c9e <_dtoa_r+0x8be>
 8004c34:	46ca      	mov	sl, r9
 8004c36:	f1ba 0f00 	cmp.w	sl, #0
 8004c3a:	d10d      	bne.n	8004c58 <_dtoa_r+0x878>
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	4653      	mov	r3, sl
 8004c40:	2205      	movs	r2, #5
 8004c42:	4630      	mov	r0, r6
 8004c44:	f000 f9ca 	bl	8004fdc <__multadd>
 8004c48:	4601      	mov	r1, r0
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f000 fbe1 	bl	8005414 <__mcmp>
 8004c52:	2800      	cmp	r0, #0
 8004c54:	f73f adde 	bgt.w	8004814 <_dtoa_r+0x434>
 8004c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c5a:	f8dd 8000 	ldr.w	r8, [sp]
 8004c5e:	ea6f 0b03 	mvn.w	fp, r3
 8004c62:	f04f 0900 	mov.w	r9, #0
 8004c66:	4621      	mov	r1, r4
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f000 f995 	bl	8004f98 <_Bfree>
 8004c6e:	2f00      	cmp	r7, #0
 8004c70:	f43f aea7 	beq.w	80049c2 <_dtoa_r+0x5e2>
 8004c74:	f1b9 0f00 	cmp.w	r9, #0
 8004c78:	d005      	beq.n	8004c86 <_dtoa_r+0x8a6>
 8004c7a:	45b9      	cmp	r9, r7
 8004c7c:	d003      	beq.n	8004c86 <_dtoa_r+0x8a6>
 8004c7e:	4649      	mov	r1, r9
 8004c80:	4630      	mov	r0, r6
 8004c82:	f000 f989 	bl	8004f98 <_Bfree>
 8004c86:	4639      	mov	r1, r7
 8004c88:	4630      	mov	r0, r6
 8004c8a:	f000 f985 	bl	8004f98 <_Bfree>
 8004c8e:	e698      	b.n	80049c2 <_dtoa_r+0x5e2>
 8004c90:	2400      	movs	r4, #0
 8004c92:	4627      	mov	r7, r4
 8004c94:	e7e0      	b.n	8004c58 <_dtoa_r+0x878>
 8004c96:	46bb      	mov	fp, r7
 8004c98:	4604      	mov	r4, r0
 8004c9a:	4607      	mov	r7, r0
 8004c9c:	e5ba      	b.n	8004814 <_dtoa_r+0x434>
 8004c9e:	9b08      	ldr	r3, [sp, #32]
 8004ca0:	46ca      	mov	sl, r9
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8100 	beq.w	8004ea8 <_dtoa_r+0xac8>
 8004ca8:	f1b8 0f00 	cmp.w	r8, #0
 8004cac:	dd05      	ble.n	8004cba <_dtoa_r+0x8da>
 8004cae:	4639      	mov	r1, r7
 8004cb0:	4642      	mov	r2, r8
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	f000 fb42 	bl	800533c <__lshift>
 8004cb8:	4607      	mov	r7, r0
 8004cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d05d      	beq.n	8004d7c <_dtoa_r+0x99c>
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	f000 f928 	bl	8004f18 <_Balloc>
 8004cc8:	4680      	mov	r8, r0
 8004cca:	b928      	cbnz	r0, 8004cd8 <_dtoa_r+0x8f8>
 8004ccc:	4b82      	ldr	r3, [pc, #520]	; (8004ed8 <_dtoa_r+0xaf8>)
 8004cce:	4602      	mov	r2, r0
 8004cd0:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004cd4:	f7ff bb9a 	b.w	800440c <_dtoa_r+0x2c>
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	3202      	adds	r2, #2
 8004cdc:	0092      	lsls	r2, r2, #2
 8004cde:	f107 010c 	add.w	r1, r7, #12
 8004ce2:	300c      	adds	r0, #12
 8004ce4:	f000 f90a 	bl	8004efc <memcpy>
 8004ce8:	2201      	movs	r2, #1
 8004cea:	4641      	mov	r1, r8
 8004cec:	4630      	mov	r0, r6
 8004cee:	f000 fb25 	bl	800533c <__lshift>
 8004cf2:	9b00      	ldr	r3, [sp, #0]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	9305      	str	r3, [sp, #20]
 8004cf8:	9b00      	ldr	r3, [sp, #0]
 8004cfa:	4453      	add	r3, sl
 8004cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8004cfe:	9b02      	ldr	r3, [sp, #8]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	46b9      	mov	r9, r7
 8004d06:	9308      	str	r3, [sp, #32]
 8004d08:	4607      	mov	r7, r0
 8004d0a:	9b05      	ldr	r3, [sp, #20]
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	4628      	mov	r0, r5
 8004d12:	9302      	str	r3, [sp, #8]
 8004d14:	f7ff fad6 	bl	80042c4 <quorem>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	3330      	adds	r3, #48	; 0x30
 8004d1c:	9006      	str	r0, [sp, #24]
 8004d1e:	4649      	mov	r1, r9
 8004d20:	4628      	mov	r0, r5
 8004d22:	930a      	str	r3, [sp, #40]	; 0x28
 8004d24:	f000 fb76 	bl	8005414 <__mcmp>
 8004d28:	463a      	mov	r2, r7
 8004d2a:	4682      	mov	sl, r0
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	4630      	mov	r0, r6
 8004d30:	f000 fb8c 	bl	800544c <__mdiff>
 8004d34:	68c2      	ldr	r2, [r0, #12]
 8004d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d38:	4680      	mov	r8, r0
 8004d3a:	bb0a      	cbnz	r2, 8004d80 <_dtoa_r+0x9a0>
 8004d3c:	4601      	mov	r1, r0
 8004d3e:	4628      	mov	r0, r5
 8004d40:	f000 fb68 	bl	8005414 <__mcmp>
 8004d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d46:	4602      	mov	r2, r0
 8004d48:	4641      	mov	r1, r8
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	920e      	str	r2, [sp, #56]	; 0x38
 8004d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d50:	f000 f922 	bl	8004f98 <_Bfree>
 8004d54:	9b07      	ldr	r3, [sp, #28]
 8004d56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d58:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004d5c:	ea43 0102 	orr.w	r1, r3, r2
 8004d60:	9b08      	ldr	r3, [sp, #32]
 8004d62:	430b      	orrs	r3, r1
 8004d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d66:	d10d      	bne.n	8004d84 <_dtoa_r+0x9a4>
 8004d68:	2b39      	cmp	r3, #57	; 0x39
 8004d6a:	d029      	beq.n	8004dc0 <_dtoa_r+0x9e0>
 8004d6c:	f1ba 0f00 	cmp.w	sl, #0
 8004d70:	dd01      	ble.n	8004d76 <_dtoa_r+0x996>
 8004d72:	9b06      	ldr	r3, [sp, #24]
 8004d74:	3331      	adds	r3, #49	; 0x31
 8004d76:	9a02      	ldr	r2, [sp, #8]
 8004d78:	7013      	strb	r3, [r2, #0]
 8004d7a:	e774      	b.n	8004c66 <_dtoa_r+0x886>
 8004d7c:	4638      	mov	r0, r7
 8004d7e:	e7b8      	b.n	8004cf2 <_dtoa_r+0x912>
 8004d80:	2201      	movs	r2, #1
 8004d82:	e7e1      	b.n	8004d48 <_dtoa_r+0x968>
 8004d84:	f1ba 0f00 	cmp.w	sl, #0
 8004d88:	db06      	blt.n	8004d98 <_dtoa_r+0x9b8>
 8004d8a:	9907      	ldr	r1, [sp, #28]
 8004d8c:	ea41 0a0a 	orr.w	sl, r1, sl
 8004d90:	9908      	ldr	r1, [sp, #32]
 8004d92:	ea5a 0101 	orrs.w	r1, sl, r1
 8004d96:	d120      	bne.n	8004dda <_dtoa_r+0x9fa>
 8004d98:	2a00      	cmp	r2, #0
 8004d9a:	ddec      	ble.n	8004d76 <_dtoa_r+0x996>
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4630      	mov	r0, r6
 8004da2:	9305      	str	r3, [sp, #20]
 8004da4:	f000 faca 	bl	800533c <__lshift>
 8004da8:	4621      	mov	r1, r4
 8004daa:	4605      	mov	r5, r0
 8004dac:	f000 fb32 	bl	8005414 <__mcmp>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	9b05      	ldr	r3, [sp, #20]
 8004db4:	dc02      	bgt.n	8004dbc <_dtoa_r+0x9dc>
 8004db6:	d1de      	bne.n	8004d76 <_dtoa_r+0x996>
 8004db8:	07da      	lsls	r2, r3, #31
 8004dba:	d5dc      	bpl.n	8004d76 <_dtoa_r+0x996>
 8004dbc:	2b39      	cmp	r3, #57	; 0x39
 8004dbe:	d1d8      	bne.n	8004d72 <_dtoa_r+0x992>
 8004dc0:	9a02      	ldr	r2, [sp, #8]
 8004dc2:	2339      	movs	r3, #57	; 0x39
 8004dc4:	7013      	strb	r3, [r2, #0]
 8004dc6:	4643      	mov	r3, r8
 8004dc8:	4698      	mov	r8, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8004dd0:	2a39      	cmp	r2, #57	; 0x39
 8004dd2:	d051      	beq.n	8004e78 <_dtoa_r+0xa98>
 8004dd4:	3201      	adds	r2, #1
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	e745      	b.n	8004c66 <_dtoa_r+0x886>
 8004dda:	2a00      	cmp	r2, #0
 8004ddc:	dd03      	ble.n	8004de6 <_dtoa_r+0xa06>
 8004dde:	2b39      	cmp	r3, #57	; 0x39
 8004de0:	d0ee      	beq.n	8004dc0 <_dtoa_r+0x9e0>
 8004de2:	3301      	adds	r3, #1
 8004de4:	e7c7      	b.n	8004d76 <_dtoa_r+0x996>
 8004de6:	9a05      	ldr	r2, [sp, #20]
 8004de8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004dea:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004dee:	428a      	cmp	r2, r1
 8004df0:	d02b      	beq.n	8004e4a <_dtoa_r+0xa6a>
 8004df2:	4629      	mov	r1, r5
 8004df4:	2300      	movs	r3, #0
 8004df6:	220a      	movs	r2, #10
 8004df8:	4630      	mov	r0, r6
 8004dfa:	f000 f8ef 	bl	8004fdc <__multadd>
 8004dfe:	45b9      	cmp	r9, r7
 8004e00:	4605      	mov	r5, r0
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	f04f 020a 	mov.w	r2, #10
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	d107      	bne.n	8004e20 <_dtoa_r+0xa40>
 8004e10:	f000 f8e4 	bl	8004fdc <__multadd>
 8004e14:	4681      	mov	r9, r0
 8004e16:	4607      	mov	r7, r0
 8004e18:	9b05      	ldr	r3, [sp, #20]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	9305      	str	r3, [sp, #20]
 8004e1e:	e774      	b.n	8004d0a <_dtoa_r+0x92a>
 8004e20:	f000 f8dc 	bl	8004fdc <__multadd>
 8004e24:	4639      	mov	r1, r7
 8004e26:	4681      	mov	r9, r0
 8004e28:	2300      	movs	r3, #0
 8004e2a:	220a      	movs	r2, #10
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f000 f8d5 	bl	8004fdc <__multadd>
 8004e32:	4607      	mov	r7, r0
 8004e34:	e7f0      	b.n	8004e18 <_dtoa_r+0xa38>
 8004e36:	f1ba 0f00 	cmp.w	sl, #0
 8004e3a:	9a00      	ldr	r2, [sp, #0]
 8004e3c:	bfcc      	ite	gt
 8004e3e:	46d0      	movgt	r8, sl
 8004e40:	f04f 0801 	movle.w	r8, #1
 8004e44:	4490      	add	r8, r2
 8004e46:	f04f 0900 	mov.w	r9, #0
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	4630      	mov	r0, r6
 8004e50:	9302      	str	r3, [sp, #8]
 8004e52:	f000 fa73 	bl	800533c <__lshift>
 8004e56:	4621      	mov	r1, r4
 8004e58:	4605      	mov	r5, r0
 8004e5a:	f000 fadb 	bl	8005414 <__mcmp>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	dcb1      	bgt.n	8004dc6 <_dtoa_r+0x9e6>
 8004e62:	d102      	bne.n	8004e6a <_dtoa_r+0xa8a>
 8004e64:	9b02      	ldr	r3, [sp, #8]
 8004e66:	07db      	lsls	r3, r3, #31
 8004e68:	d4ad      	bmi.n	8004dc6 <_dtoa_r+0x9e6>
 8004e6a:	4643      	mov	r3, r8
 8004e6c:	4698      	mov	r8, r3
 8004e6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e72:	2a30      	cmp	r2, #48	; 0x30
 8004e74:	d0fa      	beq.n	8004e6c <_dtoa_r+0xa8c>
 8004e76:	e6f6      	b.n	8004c66 <_dtoa_r+0x886>
 8004e78:	9a00      	ldr	r2, [sp, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d1a4      	bne.n	8004dc8 <_dtoa_r+0x9e8>
 8004e7e:	f10b 0b01 	add.w	fp, fp, #1
 8004e82:	2331      	movs	r3, #49	; 0x31
 8004e84:	e778      	b.n	8004d78 <_dtoa_r+0x998>
 8004e86:	4b15      	ldr	r3, [pc, #84]	; (8004edc <_dtoa_r+0xafc>)
 8004e88:	f7ff bb12 	b.w	80044b0 <_dtoa_r+0xd0>
 8004e8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f47f aaee 	bne.w	8004470 <_dtoa_r+0x90>
 8004e94:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <_dtoa_r+0xb00>)
 8004e96:	f7ff bb0b 	b.w	80044b0 <_dtoa_r+0xd0>
 8004e9a:	f1ba 0f00 	cmp.w	sl, #0
 8004e9e:	dc03      	bgt.n	8004ea8 <_dtoa_r+0xac8>
 8004ea0:	9b07      	ldr	r3, [sp, #28]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	f73f aec7 	bgt.w	8004c36 <_dtoa_r+0x856>
 8004ea8:	f8dd 8000 	ldr.w	r8, [sp]
 8004eac:	4621      	mov	r1, r4
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f7ff fa08 	bl	80042c4 <quorem>
 8004eb4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004eb8:	f808 3b01 	strb.w	r3, [r8], #1
 8004ebc:	9a00      	ldr	r2, [sp, #0]
 8004ebe:	eba8 0202 	sub.w	r2, r8, r2
 8004ec2:	4592      	cmp	sl, r2
 8004ec4:	ddb7      	ble.n	8004e36 <_dtoa_r+0xa56>
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	2300      	movs	r3, #0
 8004eca:	220a      	movs	r2, #10
 8004ecc:	4630      	mov	r0, r6
 8004ece:	f000 f885 	bl	8004fdc <__multadd>
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	e7ea      	b.n	8004eac <_dtoa_r+0xacc>
 8004ed6:	bf00      	nop
 8004ed8:	08006723 	.word	0x08006723
 8004edc:	0800667c 	.word	0x0800667c
 8004ee0:	080066a0 	.word	0x080066a0

08004ee4 <_localeconv_r>:
 8004ee4:	4800      	ldr	r0, [pc, #0]	; (8004ee8 <_localeconv_r+0x4>)
 8004ee6:	4770      	bx	lr
 8004ee8:	20000168 	.word	0x20000168

08004eec <malloc>:
 8004eec:	4b02      	ldr	r3, [pc, #8]	; (8004ef8 <malloc+0xc>)
 8004eee:	4601      	mov	r1, r0
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	f000 bbef 	b.w	80056d4 <_malloc_r>
 8004ef6:	bf00      	nop
 8004ef8:	20000014 	.word	0x20000014

08004efc <memcpy>:
 8004efc:	440a      	add	r2, r1
 8004efe:	4291      	cmp	r1, r2
 8004f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f04:	d100      	bne.n	8004f08 <memcpy+0xc>
 8004f06:	4770      	bx	lr
 8004f08:	b510      	push	{r4, lr}
 8004f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f12:	4291      	cmp	r1, r2
 8004f14:	d1f9      	bne.n	8004f0a <memcpy+0xe>
 8004f16:	bd10      	pop	{r4, pc}

08004f18 <_Balloc>:
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	460d      	mov	r5, r1
 8004f20:	b976      	cbnz	r6, 8004f40 <_Balloc+0x28>
 8004f22:	2010      	movs	r0, #16
 8004f24:	f7ff ffe2 	bl	8004eec <malloc>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	6260      	str	r0, [r4, #36]	; 0x24
 8004f2c:	b920      	cbnz	r0, 8004f38 <_Balloc+0x20>
 8004f2e:	4b18      	ldr	r3, [pc, #96]	; (8004f90 <_Balloc+0x78>)
 8004f30:	4818      	ldr	r0, [pc, #96]	; (8004f94 <_Balloc+0x7c>)
 8004f32:	2166      	movs	r1, #102	; 0x66
 8004f34:	f000 fd94 	bl	8005a60 <__assert_func>
 8004f38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f3c:	6006      	str	r6, [r0, #0]
 8004f3e:	60c6      	str	r6, [r0, #12]
 8004f40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004f42:	68f3      	ldr	r3, [r6, #12]
 8004f44:	b183      	cbz	r3, 8004f68 <_Balloc+0x50>
 8004f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f4e:	b9b8      	cbnz	r0, 8004f80 <_Balloc+0x68>
 8004f50:	2101      	movs	r1, #1
 8004f52:	fa01 f605 	lsl.w	r6, r1, r5
 8004f56:	1d72      	adds	r2, r6, #5
 8004f58:	0092      	lsls	r2, r2, #2
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f000 fb5a 	bl	8005614 <_calloc_r>
 8004f60:	b160      	cbz	r0, 8004f7c <_Balloc+0x64>
 8004f62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f66:	e00e      	b.n	8004f86 <_Balloc+0x6e>
 8004f68:	2221      	movs	r2, #33	; 0x21
 8004f6a:	2104      	movs	r1, #4
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f000 fb51 	bl	8005614 <_calloc_r>
 8004f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f74:	60f0      	str	r0, [r6, #12]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e4      	bne.n	8004f46 <_Balloc+0x2e>
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}
 8004f80:	6802      	ldr	r2, [r0, #0]
 8004f82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004f86:	2300      	movs	r3, #0
 8004f88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f8c:	e7f7      	b.n	8004f7e <_Balloc+0x66>
 8004f8e:	bf00      	nop
 8004f90:	080066ad 	.word	0x080066ad
 8004f94:	08006734 	.word	0x08006734

08004f98 <_Bfree>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f9c:	4605      	mov	r5, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	b976      	cbnz	r6, 8004fc0 <_Bfree+0x28>
 8004fa2:	2010      	movs	r0, #16
 8004fa4:	f7ff ffa2 	bl	8004eec <malloc>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	6268      	str	r0, [r5, #36]	; 0x24
 8004fac:	b920      	cbnz	r0, 8004fb8 <_Bfree+0x20>
 8004fae:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <_Bfree+0x3c>)
 8004fb0:	4809      	ldr	r0, [pc, #36]	; (8004fd8 <_Bfree+0x40>)
 8004fb2:	218a      	movs	r1, #138	; 0x8a
 8004fb4:	f000 fd54 	bl	8005a60 <__assert_func>
 8004fb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fbc:	6006      	str	r6, [r0, #0]
 8004fbe:	60c6      	str	r6, [r0, #12]
 8004fc0:	b13c      	cbz	r4, 8004fd2 <_Bfree+0x3a>
 8004fc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004fc4:	6862      	ldr	r2, [r4, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004fcc:	6021      	str	r1, [r4, #0]
 8004fce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}
 8004fd4:	080066ad 	.word	0x080066ad
 8004fd8:	08006734 	.word	0x08006734

08004fdc <__multadd>:
 8004fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe0:	690e      	ldr	r6, [r1, #16]
 8004fe2:	4607      	mov	r7, r0
 8004fe4:	4698      	mov	r8, r3
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	f101 0014 	add.w	r0, r1, #20
 8004fec:	2300      	movs	r3, #0
 8004fee:	6805      	ldr	r5, [r0, #0]
 8004ff0:	b2a9      	uxth	r1, r5
 8004ff2:	fb02 8101 	mla	r1, r2, r1, r8
 8004ff6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004ffa:	0c2d      	lsrs	r5, r5, #16
 8004ffc:	fb02 c505 	mla	r5, r2, r5, ip
 8005000:	b289      	uxth	r1, r1
 8005002:	3301      	adds	r3, #1
 8005004:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005008:	429e      	cmp	r6, r3
 800500a:	f840 1b04 	str.w	r1, [r0], #4
 800500e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005012:	dcec      	bgt.n	8004fee <__multadd+0x12>
 8005014:	f1b8 0f00 	cmp.w	r8, #0
 8005018:	d022      	beq.n	8005060 <__multadd+0x84>
 800501a:	68a3      	ldr	r3, [r4, #8]
 800501c:	42b3      	cmp	r3, r6
 800501e:	dc19      	bgt.n	8005054 <__multadd+0x78>
 8005020:	6861      	ldr	r1, [r4, #4]
 8005022:	4638      	mov	r0, r7
 8005024:	3101      	adds	r1, #1
 8005026:	f7ff ff77 	bl	8004f18 <_Balloc>
 800502a:	4605      	mov	r5, r0
 800502c:	b928      	cbnz	r0, 800503a <__multadd+0x5e>
 800502e:	4602      	mov	r2, r0
 8005030:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <__multadd+0x8c>)
 8005032:	480e      	ldr	r0, [pc, #56]	; (800506c <__multadd+0x90>)
 8005034:	21b5      	movs	r1, #181	; 0xb5
 8005036:	f000 fd13 	bl	8005a60 <__assert_func>
 800503a:	6922      	ldr	r2, [r4, #16]
 800503c:	3202      	adds	r2, #2
 800503e:	f104 010c 	add.w	r1, r4, #12
 8005042:	0092      	lsls	r2, r2, #2
 8005044:	300c      	adds	r0, #12
 8005046:	f7ff ff59 	bl	8004efc <memcpy>
 800504a:	4621      	mov	r1, r4
 800504c:	4638      	mov	r0, r7
 800504e:	f7ff ffa3 	bl	8004f98 <_Bfree>
 8005052:	462c      	mov	r4, r5
 8005054:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005058:	3601      	adds	r6, #1
 800505a:	f8c3 8014 	str.w	r8, [r3, #20]
 800505e:	6126      	str	r6, [r4, #16]
 8005060:	4620      	mov	r0, r4
 8005062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005066:	bf00      	nop
 8005068:	08006723 	.word	0x08006723
 800506c:	08006734 	.word	0x08006734

08005070 <__hi0bits>:
 8005070:	0c03      	lsrs	r3, r0, #16
 8005072:	041b      	lsls	r3, r3, #16
 8005074:	b9d3      	cbnz	r3, 80050ac <__hi0bits+0x3c>
 8005076:	0400      	lsls	r0, r0, #16
 8005078:	2310      	movs	r3, #16
 800507a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800507e:	bf04      	itt	eq
 8005080:	0200      	lsleq	r0, r0, #8
 8005082:	3308      	addeq	r3, #8
 8005084:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005088:	bf04      	itt	eq
 800508a:	0100      	lsleq	r0, r0, #4
 800508c:	3304      	addeq	r3, #4
 800508e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005092:	bf04      	itt	eq
 8005094:	0080      	lsleq	r0, r0, #2
 8005096:	3302      	addeq	r3, #2
 8005098:	2800      	cmp	r0, #0
 800509a:	db05      	blt.n	80050a8 <__hi0bits+0x38>
 800509c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80050a0:	f103 0301 	add.w	r3, r3, #1
 80050a4:	bf08      	it	eq
 80050a6:	2320      	moveq	r3, #32
 80050a8:	4618      	mov	r0, r3
 80050aa:	4770      	bx	lr
 80050ac:	2300      	movs	r3, #0
 80050ae:	e7e4      	b.n	800507a <__hi0bits+0xa>

080050b0 <__lo0bits>:
 80050b0:	6803      	ldr	r3, [r0, #0]
 80050b2:	f013 0207 	ands.w	r2, r3, #7
 80050b6:	4601      	mov	r1, r0
 80050b8:	d00b      	beq.n	80050d2 <__lo0bits+0x22>
 80050ba:	07da      	lsls	r2, r3, #31
 80050bc:	d424      	bmi.n	8005108 <__lo0bits+0x58>
 80050be:	0798      	lsls	r0, r3, #30
 80050c0:	bf49      	itett	mi
 80050c2:	085b      	lsrmi	r3, r3, #1
 80050c4:	089b      	lsrpl	r3, r3, #2
 80050c6:	2001      	movmi	r0, #1
 80050c8:	600b      	strmi	r3, [r1, #0]
 80050ca:	bf5c      	itt	pl
 80050cc:	600b      	strpl	r3, [r1, #0]
 80050ce:	2002      	movpl	r0, #2
 80050d0:	4770      	bx	lr
 80050d2:	b298      	uxth	r0, r3
 80050d4:	b9b0      	cbnz	r0, 8005104 <__lo0bits+0x54>
 80050d6:	0c1b      	lsrs	r3, r3, #16
 80050d8:	2010      	movs	r0, #16
 80050da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80050de:	bf04      	itt	eq
 80050e0:	0a1b      	lsreq	r3, r3, #8
 80050e2:	3008      	addeq	r0, #8
 80050e4:	071a      	lsls	r2, r3, #28
 80050e6:	bf04      	itt	eq
 80050e8:	091b      	lsreq	r3, r3, #4
 80050ea:	3004      	addeq	r0, #4
 80050ec:	079a      	lsls	r2, r3, #30
 80050ee:	bf04      	itt	eq
 80050f0:	089b      	lsreq	r3, r3, #2
 80050f2:	3002      	addeq	r0, #2
 80050f4:	07da      	lsls	r2, r3, #31
 80050f6:	d403      	bmi.n	8005100 <__lo0bits+0x50>
 80050f8:	085b      	lsrs	r3, r3, #1
 80050fa:	f100 0001 	add.w	r0, r0, #1
 80050fe:	d005      	beq.n	800510c <__lo0bits+0x5c>
 8005100:	600b      	str	r3, [r1, #0]
 8005102:	4770      	bx	lr
 8005104:	4610      	mov	r0, r2
 8005106:	e7e8      	b.n	80050da <__lo0bits+0x2a>
 8005108:	2000      	movs	r0, #0
 800510a:	4770      	bx	lr
 800510c:	2020      	movs	r0, #32
 800510e:	4770      	bx	lr

08005110 <__i2b>:
 8005110:	b510      	push	{r4, lr}
 8005112:	460c      	mov	r4, r1
 8005114:	2101      	movs	r1, #1
 8005116:	f7ff feff 	bl	8004f18 <_Balloc>
 800511a:	4602      	mov	r2, r0
 800511c:	b928      	cbnz	r0, 800512a <__i2b+0x1a>
 800511e:	4b05      	ldr	r3, [pc, #20]	; (8005134 <__i2b+0x24>)
 8005120:	4805      	ldr	r0, [pc, #20]	; (8005138 <__i2b+0x28>)
 8005122:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005126:	f000 fc9b 	bl	8005a60 <__assert_func>
 800512a:	2301      	movs	r3, #1
 800512c:	6144      	str	r4, [r0, #20]
 800512e:	6103      	str	r3, [r0, #16]
 8005130:	bd10      	pop	{r4, pc}
 8005132:	bf00      	nop
 8005134:	08006723 	.word	0x08006723
 8005138:	08006734 	.word	0x08006734

0800513c <__multiply>:
 800513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005140:	4614      	mov	r4, r2
 8005142:	690a      	ldr	r2, [r1, #16]
 8005144:	6923      	ldr	r3, [r4, #16]
 8005146:	429a      	cmp	r2, r3
 8005148:	bfb8      	it	lt
 800514a:	460b      	movlt	r3, r1
 800514c:	460d      	mov	r5, r1
 800514e:	bfbc      	itt	lt
 8005150:	4625      	movlt	r5, r4
 8005152:	461c      	movlt	r4, r3
 8005154:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005158:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800515c:	68ab      	ldr	r3, [r5, #8]
 800515e:	6869      	ldr	r1, [r5, #4]
 8005160:	eb0a 0709 	add.w	r7, sl, r9
 8005164:	42bb      	cmp	r3, r7
 8005166:	b085      	sub	sp, #20
 8005168:	bfb8      	it	lt
 800516a:	3101      	addlt	r1, #1
 800516c:	f7ff fed4 	bl	8004f18 <_Balloc>
 8005170:	b930      	cbnz	r0, 8005180 <__multiply+0x44>
 8005172:	4602      	mov	r2, r0
 8005174:	4b42      	ldr	r3, [pc, #264]	; (8005280 <__multiply+0x144>)
 8005176:	4843      	ldr	r0, [pc, #268]	; (8005284 <__multiply+0x148>)
 8005178:	f240 115d 	movw	r1, #349	; 0x15d
 800517c:	f000 fc70 	bl	8005a60 <__assert_func>
 8005180:	f100 0614 	add.w	r6, r0, #20
 8005184:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005188:	4633      	mov	r3, r6
 800518a:	2200      	movs	r2, #0
 800518c:	4543      	cmp	r3, r8
 800518e:	d31e      	bcc.n	80051ce <__multiply+0x92>
 8005190:	f105 0c14 	add.w	ip, r5, #20
 8005194:	f104 0314 	add.w	r3, r4, #20
 8005198:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800519c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80051a0:	9202      	str	r2, [sp, #8]
 80051a2:	ebac 0205 	sub.w	r2, ip, r5
 80051a6:	3a15      	subs	r2, #21
 80051a8:	f022 0203 	bic.w	r2, r2, #3
 80051ac:	3204      	adds	r2, #4
 80051ae:	f105 0115 	add.w	r1, r5, #21
 80051b2:	458c      	cmp	ip, r1
 80051b4:	bf38      	it	cc
 80051b6:	2204      	movcc	r2, #4
 80051b8:	9201      	str	r2, [sp, #4]
 80051ba:	9a02      	ldr	r2, [sp, #8]
 80051bc:	9303      	str	r3, [sp, #12]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d808      	bhi.n	80051d4 <__multiply+0x98>
 80051c2:	2f00      	cmp	r7, #0
 80051c4:	dc55      	bgt.n	8005272 <__multiply+0x136>
 80051c6:	6107      	str	r7, [r0, #16]
 80051c8:	b005      	add	sp, #20
 80051ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ce:	f843 2b04 	str.w	r2, [r3], #4
 80051d2:	e7db      	b.n	800518c <__multiply+0x50>
 80051d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80051d8:	f1ba 0f00 	cmp.w	sl, #0
 80051dc:	d020      	beq.n	8005220 <__multiply+0xe4>
 80051de:	f105 0e14 	add.w	lr, r5, #20
 80051e2:	46b1      	mov	r9, r6
 80051e4:	2200      	movs	r2, #0
 80051e6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80051ea:	f8d9 b000 	ldr.w	fp, [r9]
 80051ee:	b2a1      	uxth	r1, r4
 80051f0:	fa1f fb8b 	uxth.w	fp, fp
 80051f4:	fb0a b101 	mla	r1, sl, r1, fp
 80051f8:	4411      	add	r1, r2
 80051fa:	f8d9 2000 	ldr.w	r2, [r9]
 80051fe:	0c24      	lsrs	r4, r4, #16
 8005200:	0c12      	lsrs	r2, r2, #16
 8005202:	fb0a 2404 	mla	r4, sl, r4, r2
 8005206:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800520a:	b289      	uxth	r1, r1
 800520c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005210:	45f4      	cmp	ip, lr
 8005212:	f849 1b04 	str.w	r1, [r9], #4
 8005216:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800521a:	d8e4      	bhi.n	80051e6 <__multiply+0xaa>
 800521c:	9901      	ldr	r1, [sp, #4]
 800521e:	5072      	str	r2, [r6, r1]
 8005220:	9a03      	ldr	r2, [sp, #12]
 8005222:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005226:	3304      	adds	r3, #4
 8005228:	f1b9 0f00 	cmp.w	r9, #0
 800522c:	d01f      	beq.n	800526e <__multiply+0x132>
 800522e:	6834      	ldr	r4, [r6, #0]
 8005230:	f105 0114 	add.w	r1, r5, #20
 8005234:	46b6      	mov	lr, r6
 8005236:	f04f 0a00 	mov.w	sl, #0
 800523a:	880a      	ldrh	r2, [r1, #0]
 800523c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005240:	fb09 b202 	mla	r2, r9, r2, fp
 8005244:	4492      	add	sl, r2
 8005246:	b2a4      	uxth	r4, r4
 8005248:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800524c:	f84e 4b04 	str.w	r4, [lr], #4
 8005250:	f851 4b04 	ldr.w	r4, [r1], #4
 8005254:	f8be 2000 	ldrh.w	r2, [lr]
 8005258:	0c24      	lsrs	r4, r4, #16
 800525a:	fb09 2404 	mla	r4, r9, r4, r2
 800525e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005262:	458c      	cmp	ip, r1
 8005264:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005268:	d8e7      	bhi.n	800523a <__multiply+0xfe>
 800526a:	9a01      	ldr	r2, [sp, #4]
 800526c:	50b4      	str	r4, [r6, r2]
 800526e:	3604      	adds	r6, #4
 8005270:	e7a3      	b.n	80051ba <__multiply+0x7e>
 8005272:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1a5      	bne.n	80051c6 <__multiply+0x8a>
 800527a:	3f01      	subs	r7, #1
 800527c:	e7a1      	b.n	80051c2 <__multiply+0x86>
 800527e:	bf00      	nop
 8005280:	08006723 	.word	0x08006723
 8005284:	08006734 	.word	0x08006734

08005288 <__pow5mult>:
 8005288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800528c:	4615      	mov	r5, r2
 800528e:	f012 0203 	ands.w	r2, r2, #3
 8005292:	4606      	mov	r6, r0
 8005294:	460f      	mov	r7, r1
 8005296:	d007      	beq.n	80052a8 <__pow5mult+0x20>
 8005298:	4c25      	ldr	r4, [pc, #148]	; (8005330 <__pow5mult+0xa8>)
 800529a:	3a01      	subs	r2, #1
 800529c:	2300      	movs	r3, #0
 800529e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80052a2:	f7ff fe9b 	bl	8004fdc <__multadd>
 80052a6:	4607      	mov	r7, r0
 80052a8:	10ad      	asrs	r5, r5, #2
 80052aa:	d03d      	beq.n	8005328 <__pow5mult+0xa0>
 80052ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80052ae:	b97c      	cbnz	r4, 80052d0 <__pow5mult+0x48>
 80052b0:	2010      	movs	r0, #16
 80052b2:	f7ff fe1b 	bl	8004eec <malloc>
 80052b6:	4602      	mov	r2, r0
 80052b8:	6270      	str	r0, [r6, #36]	; 0x24
 80052ba:	b928      	cbnz	r0, 80052c8 <__pow5mult+0x40>
 80052bc:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <__pow5mult+0xac>)
 80052be:	481e      	ldr	r0, [pc, #120]	; (8005338 <__pow5mult+0xb0>)
 80052c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80052c4:	f000 fbcc 	bl	8005a60 <__assert_func>
 80052c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052cc:	6004      	str	r4, [r0, #0]
 80052ce:	60c4      	str	r4, [r0, #12]
 80052d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80052d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80052d8:	b94c      	cbnz	r4, 80052ee <__pow5mult+0x66>
 80052da:	f240 2171 	movw	r1, #625	; 0x271
 80052de:	4630      	mov	r0, r6
 80052e0:	f7ff ff16 	bl	8005110 <__i2b>
 80052e4:	2300      	movs	r3, #0
 80052e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80052ea:	4604      	mov	r4, r0
 80052ec:	6003      	str	r3, [r0, #0]
 80052ee:	f04f 0900 	mov.w	r9, #0
 80052f2:	07eb      	lsls	r3, r5, #31
 80052f4:	d50a      	bpl.n	800530c <__pow5mult+0x84>
 80052f6:	4639      	mov	r1, r7
 80052f8:	4622      	mov	r2, r4
 80052fa:	4630      	mov	r0, r6
 80052fc:	f7ff ff1e 	bl	800513c <__multiply>
 8005300:	4639      	mov	r1, r7
 8005302:	4680      	mov	r8, r0
 8005304:	4630      	mov	r0, r6
 8005306:	f7ff fe47 	bl	8004f98 <_Bfree>
 800530a:	4647      	mov	r7, r8
 800530c:	106d      	asrs	r5, r5, #1
 800530e:	d00b      	beq.n	8005328 <__pow5mult+0xa0>
 8005310:	6820      	ldr	r0, [r4, #0]
 8005312:	b938      	cbnz	r0, 8005324 <__pow5mult+0x9c>
 8005314:	4622      	mov	r2, r4
 8005316:	4621      	mov	r1, r4
 8005318:	4630      	mov	r0, r6
 800531a:	f7ff ff0f 	bl	800513c <__multiply>
 800531e:	6020      	str	r0, [r4, #0]
 8005320:	f8c0 9000 	str.w	r9, [r0]
 8005324:	4604      	mov	r4, r0
 8005326:	e7e4      	b.n	80052f2 <__pow5mult+0x6a>
 8005328:	4638      	mov	r0, r7
 800532a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800532e:	bf00      	nop
 8005330:	08006888 	.word	0x08006888
 8005334:	080066ad 	.word	0x080066ad
 8005338:	08006734 	.word	0x08006734

0800533c <__lshift>:
 800533c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005340:	460c      	mov	r4, r1
 8005342:	6849      	ldr	r1, [r1, #4]
 8005344:	6923      	ldr	r3, [r4, #16]
 8005346:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800534a:	68a3      	ldr	r3, [r4, #8]
 800534c:	4607      	mov	r7, r0
 800534e:	4691      	mov	r9, r2
 8005350:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005354:	f108 0601 	add.w	r6, r8, #1
 8005358:	42b3      	cmp	r3, r6
 800535a:	db0b      	blt.n	8005374 <__lshift+0x38>
 800535c:	4638      	mov	r0, r7
 800535e:	f7ff fddb 	bl	8004f18 <_Balloc>
 8005362:	4605      	mov	r5, r0
 8005364:	b948      	cbnz	r0, 800537a <__lshift+0x3e>
 8005366:	4602      	mov	r2, r0
 8005368:	4b28      	ldr	r3, [pc, #160]	; (800540c <__lshift+0xd0>)
 800536a:	4829      	ldr	r0, [pc, #164]	; (8005410 <__lshift+0xd4>)
 800536c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005370:	f000 fb76 	bl	8005a60 <__assert_func>
 8005374:	3101      	adds	r1, #1
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	e7ee      	b.n	8005358 <__lshift+0x1c>
 800537a:	2300      	movs	r3, #0
 800537c:	f100 0114 	add.w	r1, r0, #20
 8005380:	f100 0210 	add.w	r2, r0, #16
 8005384:	4618      	mov	r0, r3
 8005386:	4553      	cmp	r3, sl
 8005388:	db33      	blt.n	80053f2 <__lshift+0xb6>
 800538a:	6920      	ldr	r0, [r4, #16]
 800538c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005390:	f104 0314 	add.w	r3, r4, #20
 8005394:	f019 091f 	ands.w	r9, r9, #31
 8005398:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800539c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80053a0:	d02b      	beq.n	80053fa <__lshift+0xbe>
 80053a2:	f1c9 0e20 	rsb	lr, r9, #32
 80053a6:	468a      	mov	sl, r1
 80053a8:	2200      	movs	r2, #0
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	fa00 f009 	lsl.w	r0, r0, r9
 80053b0:	4302      	orrs	r2, r0
 80053b2:	f84a 2b04 	str.w	r2, [sl], #4
 80053b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80053ba:	459c      	cmp	ip, r3
 80053bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80053c0:	d8f3      	bhi.n	80053aa <__lshift+0x6e>
 80053c2:	ebac 0304 	sub.w	r3, ip, r4
 80053c6:	3b15      	subs	r3, #21
 80053c8:	f023 0303 	bic.w	r3, r3, #3
 80053cc:	3304      	adds	r3, #4
 80053ce:	f104 0015 	add.w	r0, r4, #21
 80053d2:	4584      	cmp	ip, r0
 80053d4:	bf38      	it	cc
 80053d6:	2304      	movcc	r3, #4
 80053d8:	50ca      	str	r2, [r1, r3]
 80053da:	b10a      	cbz	r2, 80053e0 <__lshift+0xa4>
 80053dc:	f108 0602 	add.w	r6, r8, #2
 80053e0:	3e01      	subs	r6, #1
 80053e2:	4638      	mov	r0, r7
 80053e4:	612e      	str	r6, [r5, #16]
 80053e6:	4621      	mov	r1, r4
 80053e8:	f7ff fdd6 	bl	8004f98 <_Bfree>
 80053ec:	4628      	mov	r0, r5
 80053ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80053f6:	3301      	adds	r3, #1
 80053f8:	e7c5      	b.n	8005386 <__lshift+0x4a>
 80053fa:	3904      	subs	r1, #4
 80053fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005400:	f841 2f04 	str.w	r2, [r1, #4]!
 8005404:	459c      	cmp	ip, r3
 8005406:	d8f9      	bhi.n	80053fc <__lshift+0xc0>
 8005408:	e7ea      	b.n	80053e0 <__lshift+0xa4>
 800540a:	bf00      	nop
 800540c:	08006723 	.word	0x08006723
 8005410:	08006734 	.word	0x08006734

08005414 <__mcmp>:
 8005414:	b530      	push	{r4, r5, lr}
 8005416:	6902      	ldr	r2, [r0, #16]
 8005418:	690c      	ldr	r4, [r1, #16]
 800541a:	1b12      	subs	r2, r2, r4
 800541c:	d10e      	bne.n	800543c <__mcmp+0x28>
 800541e:	f100 0314 	add.w	r3, r0, #20
 8005422:	3114      	adds	r1, #20
 8005424:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005428:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800542c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005430:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005434:	42a5      	cmp	r5, r4
 8005436:	d003      	beq.n	8005440 <__mcmp+0x2c>
 8005438:	d305      	bcc.n	8005446 <__mcmp+0x32>
 800543a:	2201      	movs	r2, #1
 800543c:	4610      	mov	r0, r2
 800543e:	bd30      	pop	{r4, r5, pc}
 8005440:	4283      	cmp	r3, r0
 8005442:	d3f3      	bcc.n	800542c <__mcmp+0x18>
 8005444:	e7fa      	b.n	800543c <__mcmp+0x28>
 8005446:	f04f 32ff 	mov.w	r2, #4294967295
 800544a:	e7f7      	b.n	800543c <__mcmp+0x28>

0800544c <__mdiff>:
 800544c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005450:	460c      	mov	r4, r1
 8005452:	4606      	mov	r6, r0
 8005454:	4611      	mov	r1, r2
 8005456:	4620      	mov	r0, r4
 8005458:	4617      	mov	r7, r2
 800545a:	f7ff ffdb 	bl	8005414 <__mcmp>
 800545e:	1e05      	subs	r5, r0, #0
 8005460:	d110      	bne.n	8005484 <__mdiff+0x38>
 8005462:	4629      	mov	r1, r5
 8005464:	4630      	mov	r0, r6
 8005466:	f7ff fd57 	bl	8004f18 <_Balloc>
 800546a:	b930      	cbnz	r0, 800547a <__mdiff+0x2e>
 800546c:	4b39      	ldr	r3, [pc, #228]	; (8005554 <__mdiff+0x108>)
 800546e:	4602      	mov	r2, r0
 8005470:	f240 2132 	movw	r1, #562	; 0x232
 8005474:	4838      	ldr	r0, [pc, #224]	; (8005558 <__mdiff+0x10c>)
 8005476:	f000 faf3 	bl	8005a60 <__assert_func>
 800547a:	2301      	movs	r3, #1
 800547c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005484:	bfa4      	itt	ge
 8005486:	463b      	movge	r3, r7
 8005488:	4627      	movge	r7, r4
 800548a:	4630      	mov	r0, r6
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	bfa6      	itte	ge
 8005490:	461c      	movge	r4, r3
 8005492:	2500      	movge	r5, #0
 8005494:	2501      	movlt	r5, #1
 8005496:	f7ff fd3f 	bl	8004f18 <_Balloc>
 800549a:	b920      	cbnz	r0, 80054a6 <__mdiff+0x5a>
 800549c:	4b2d      	ldr	r3, [pc, #180]	; (8005554 <__mdiff+0x108>)
 800549e:	4602      	mov	r2, r0
 80054a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80054a4:	e7e6      	b.n	8005474 <__mdiff+0x28>
 80054a6:	693e      	ldr	r6, [r7, #16]
 80054a8:	60c5      	str	r5, [r0, #12]
 80054aa:	6925      	ldr	r5, [r4, #16]
 80054ac:	f107 0114 	add.w	r1, r7, #20
 80054b0:	f104 0914 	add.w	r9, r4, #20
 80054b4:	f100 0e14 	add.w	lr, r0, #20
 80054b8:	f107 0210 	add.w	r2, r7, #16
 80054bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80054c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80054c4:	46f2      	mov	sl, lr
 80054c6:	2700      	movs	r7, #0
 80054c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80054cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80054d0:	fa1f f883 	uxth.w	r8, r3
 80054d4:	fa17 f78b 	uxtah	r7, r7, fp
 80054d8:	0c1b      	lsrs	r3, r3, #16
 80054da:	eba7 0808 	sub.w	r8, r7, r8
 80054de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80054e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80054e6:	fa1f f888 	uxth.w	r8, r8
 80054ea:	141f      	asrs	r7, r3, #16
 80054ec:	454d      	cmp	r5, r9
 80054ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80054f2:	f84a 3b04 	str.w	r3, [sl], #4
 80054f6:	d8e7      	bhi.n	80054c8 <__mdiff+0x7c>
 80054f8:	1b2b      	subs	r3, r5, r4
 80054fa:	3b15      	subs	r3, #21
 80054fc:	f023 0303 	bic.w	r3, r3, #3
 8005500:	3304      	adds	r3, #4
 8005502:	3415      	adds	r4, #21
 8005504:	42a5      	cmp	r5, r4
 8005506:	bf38      	it	cc
 8005508:	2304      	movcc	r3, #4
 800550a:	4419      	add	r1, r3
 800550c:	4473      	add	r3, lr
 800550e:	469e      	mov	lr, r3
 8005510:	460d      	mov	r5, r1
 8005512:	4565      	cmp	r5, ip
 8005514:	d30e      	bcc.n	8005534 <__mdiff+0xe8>
 8005516:	f10c 0203 	add.w	r2, ip, #3
 800551a:	1a52      	subs	r2, r2, r1
 800551c:	f022 0203 	bic.w	r2, r2, #3
 8005520:	3903      	subs	r1, #3
 8005522:	458c      	cmp	ip, r1
 8005524:	bf38      	it	cc
 8005526:	2200      	movcc	r2, #0
 8005528:	441a      	add	r2, r3
 800552a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800552e:	b17b      	cbz	r3, 8005550 <__mdiff+0x104>
 8005530:	6106      	str	r6, [r0, #16]
 8005532:	e7a5      	b.n	8005480 <__mdiff+0x34>
 8005534:	f855 8b04 	ldr.w	r8, [r5], #4
 8005538:	fa17 f488 	uxtah	r4, r7, r8
 800553c:	1422      	asrs	r2, r4, #16
 800553e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005542:	b2a4      	uxth	r4, r4
 8005544:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005548:	f84e 4b04 	str.w	r4, [lr], #4
 800554c:	1417      	asrs	r7, r2, #16
 800554e:	e7e0      	b.n	8005512 <__mdiff+0xc6>
 8005550:	3e01      	subs	r6, #1
 8005552:	e7ea      	b.n	800552a <__mdiff+0xde>
 8005554:	08006723 	.word	0x08006723
 8005558:	08006734 	.word	0x08006734

0800555c <__d2b>:
 800555c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005560:	4689      	mov	r9, r1
 8005562:	2101      	movs	r1, #1
 8005564:	ec57 6b10 	vmov	r6, r7, d0
 8005568:	4690      	mov	r8, r2
 800556a:	f7ff fcd5 	bl	8004f18 <_Balloc>
 800556e:	4604      	mov	r4, r0
 8005570:	b930      	cbnz	r0, 8005580 <__d2b+0x24>
 8005572:	4602      	mov	r2, r0
 8005574:	4b25      	ldr	r3, [pc, #148]	; (800560c <__d2b+0xb0>)
 8005576:	4826      	ldr	r0, [pc, #152]	; (8005610 <__d2b+0xb4>)
 8005578:	f240 310a 	movw	r1, #778	; 0x30a
 800557c:	f000 fa70 	bl	8005a60 <__assert_func>
 8005580:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005584:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005588:	bb35      	cbnz	r5, 80055d8 <__d2b+0x7c>
 800558a:	2e00      	cmp	r6, #0
 800558c:	9301      	str	r3, [sp, #4]
 800558e:	d028      	beq.n	80055e2 <__d2b+0x86>
 8005590:	4668      	mov	r0, sp
 8005592:	9600      	str	r6, [sp, #0]
 8005594:	f7ff fd8c 	bl	80050b0 <__lo0bits>
 8005598:	9900      	ldr	r1, [sp, #0]
 800559a:	b300      	cbz	r0, 80055de <__d2b+0x82>
 800559c:	9a01      	ldr	r2, [sp, #4]
 800559e:	f1c0 0320 	rsb	r3, r0, #32
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	430b      	orrs	r3, r1
 80055a8:	40c2      	lsrs	r2, r0
 80055aa:	6163      	str	r3, [r4, #20]
 80055ac:	9201      	str	r2, [sp, #4]
 80055ae:	9b01      	ldr	r3, [sp, #4]
 80055b0:	61a3      	str	r3, [r4, #24]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bf14      	ite	ne
 80055b6:	2202      	movne	r2, #2
 80055b8:	2201      	moveq	r2, #1
 80055ba:	6122      	str	r2, [r4, #16]
 80055bc:	b1d5      	cbz	r5, 80055f4 <__d2b+0x98>
 80055be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80055c2:	4405      	add	r5, r0
 80055c4:	f8c9 5000 	str.w	r5, [r9]
 80055c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80055cc:	f8c8 0000 	str.w	r0, [r8]
 80055d0:	4620      	mov	r0, r4
 80055d2:	b003      	add	sp, #12
 80055d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055dc:	e7d5      	b.n	800558a <__d2b+0x2e>
 80055de:	6161      	str	r1, [r4, #20]
 80055e0:	e7e5      	b.n	80055ae <__d2b+0x52>
 80055e2:	a801      	add	r0, sp, #4
 80055e4:	f7ff fd64 	bl	80050b0 <__lo0bits>
 80055e8:	9b01      	ldr	r3, [sp, #4]
 80055ea:	6163      	str	r3, [r4, #20]
 80055ec:	2201      	movs	r2, #1
 80055ee:	6122      	str	r2, [r4, #16]
 80055f0:	3020      	adds	r0, #32
 80055f2:	e7e3      	b.n	80055bc <__d2b+0x60>
 80055f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80055f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80055fc:	f8c9 0000 	str.w	r0, [r9]
 8005600:	6918      	ldr	r0, [r3, #16]
 8005602:	f7ff fd35 	bl	8005070 <__hi0bits>
 8005606:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800560a:	e7df      	b.n	80055cc <__d2b+0x70>
 800560c:	08006723 	.word	0x08006723
 8005610:	08006734 	.word	0x08006734

08005614 <_calloc_r>:
 8005614:	b513      	push	{r0, r1, r4, lr}
 8005616:	434a      	muls	r2, r1
 8005618:	4611      	mov	r1, r2
 800561a:	9201      	str	r2, [sp, #4]
 800561c:	f000 f85a 	bl	80056d4 <_malloc_r>
 8005620:	4604      	mov	r4, r0
 8005622:	b118      	cbz	r0, 800562c <_calloc_r+0x18>
 8005624:	9a01      	ldr	r2, [sp, #4]
 8005626:	2100      	movs	r1, #0
 8005628:	f7fe f9e2 	bl	80039f0 <memset>
 800562c:	4620      	mov	r0, r4
 800562e:	b002      	add	sp, #8
 8005630:	bd10      	pop	{r4, pc}
	...

08005634 <_free_r>:
 8005634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005636:	2900      	cmp	r1, #0
 8005638:	d048      	beq.n	80056cc <_free_r+0x98>
 800563a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800563e:	9001      	str	r0, [sp, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	f1a1 0404 	sub.w	r4, r1, #4
 8005646:	bfb8      	it	lt
 8005648:	18e4      	addlt	r4, r4, r3
 800564a:	f000 fa65 	bl	8005b18 <__malloc_lock>
 800564e:	4a20      	ldr	r2, [pc, #128]	; (80056d0 <_free_r+0x9c>)
 8005650:	9801      	ldr	r0, [sp, #4]
 8005652:	6813      	ldr	r3, [r2, #0]
 8005654:	4615      	mov	r5, r2
 8005656:	b933      	cbnz	r3, 8005666 <_free_r+0x32>
 8005658:	6063      	str	r3, [r4, #4]
 800565a:	6014      	str	r4, [r2, #0]
 800565c:	b003      	add	sp, #12
 800565e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005662:	f000 ba5f 	b.w	8005b24 <__malloc_unlock>
 8005666:	42a3      	cmp	r3, r4
 8005668:	d90b      	bls.n	8005682 <_free_r+0x4e>
 800566a:	6821      	ldr	r1, [r4, #0]
 800566c:	1862      	adds	r2, r4, r1
 800566e:	4293      	cmp	r3, r2
 8005670:	bf04      	itt	eq
 8005672:	681a      	ldreq	r2, [r3, #0]
 8005674:	685b      	ldreq	r3, [r3, #4]
 8005676:	6063      	str	r3, [r4, #4]
 8005678:	bf04      	itt	eq
 800567a:	1852      	addeq	r2, r2, r1
 800567c:	6022      	streq	r2, [r4, #0]
 800567e:	602c      	str	r4, [r5, #0]
 8005680:	e7ec      	b.n	800565c <_free_r+0x28>
 8005682:	461a      	mov	r2, r3
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	b10b      	cbz	r3, 800568c <_free_r+0x58>
 8005688:	42a3      	cmp	r3, r4
 800568a:	d9fa      	bls.n	8005682 <_free_r+0x4e>
 800568c:	6811      	ldr	r1, [r2, #0]
 800568e:	1855      	adds	r5, r2, r1
 8005690:	42a5      	cmp	r5, r4
 8005692:	d10b      	bne.n	80056ac <_free_r+0x78>
 8005694:	6824      	ldr	r4, [r4, #0]
 8005696:	4421      	add	r1, r4
 8005698:	1854      	adds	r4, r2, r1
 800569a:	42a3      	cmp	r3, r4
 800569c:	6011      	str	r1, [r2, #0]
 800569e:	d1dd      	bne.n	800565c <_free_r+0x28>
 80056a0:	681c      	ldr	r4, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	6053      	str	r3, [r2, #4]
 80056a6:	4421      	add	r1, r4
 80056a8:	6011      	str	r1, [r2, #0]
 80056aa:	e7d7      	b.n	800565c <_free_r+0x28>
 80056ac:	d902      	bls.n	80056b4 <_free_r+0x80>
 80056ae:	230c      	movs	r3, #12
 80056b0:	6003      	str	r3, [r0, #0]
 80056b2:	e7d3      	b.n	800565c <_free_r+0x28>
 80056b4:	6825      	ldr	r5, [r4, #0]
 80056b6:	1961      	adds	r1, r4, r5
 80056b8:	428b      	cmp	r3, r1
 80056ba:	bf04      	itt	eq
 80056bc:	6819      	ldreq	r1, [r3, #0]
 80056be:	685b      	ldreq	r3, [r3, #4]
 80056c0:	6063      	str	r3, [r4, #4]
 80056c2:	bf04      	itt	eq
 80056c4:	1949      	addeq	r1, r1, r5
 80056c6:	6021      	streq	r1, [r4, #0]
 80056c8:	6054      	str	r4, [r2, #4]
 80056ca:	e7c7      	b.n	800565c <_free_r+0x28>
 80056cc:	b003      	add	sp, #12
 80056ce:	bd30      	pop	{r4, r5, pc}
 80056d0:	20000280 	.word	0x20000280

080056d4 <_malloc_r>:
 80056d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d6:	1ccd      	adds	r5, r1, #3
 80056d8:	f025 0503 	bic.w	r5, r5, #3
 80056dc:	3508      	adds	r5, #8
 80056de:	2d0c      	cmp	r5, #12
 80056e0:	bf38      	it	cc
 80056e2:	250c      	movcc	r5, #12
 80056e4:	2d00      	cmp	r5, #0
 80056e6:	4606      	mov	r6, r0
 80056e8:	db01      	blt.n	80056ee <_malloc_r+0x1a>
 80056ea:	42a9      	cmp	r1, r5
 80056ec:	d903      	bls.n	80056f6 <_malloc_r+0x22>
 80056ee:	230c      	movs	r3, #12
 80056f0:	6033      	str	r3, [r6, #0]
 80056f2:	2000      	movs	r0, #0
 80056f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f6:	f000 fa0f 	bl	8005b18 <__malloc_lock>
 80056fa:	4921      	ldr	r1, [pc, #132]	; (8005780 <_malloc_r+0xac>)
 80056fc:	680a      	ldr	r2, [r1, #0]
 80056fe:	4614      	mov	r4, r2
 8005700:	b99c      	cbnz	r4, 800572a <_malloc_r+0x56>
 8005702:	4f20      	ldr	r7, [pc, #128]	; (8005784 <_malloc_r+0xb0>)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	b923      	cbnz	r3, 8005712 <_malloc_r+0x3e>
 8005708:	4621      	mov	r1, r4
 800570a:	4630      	mov	r0, r6
 800570c:	f000 f998 	bl	8005a40 <_sbrk_r>
 8005710:	6038      	str	r0, [r7, #0]
 8005712:	4629      	mov	r1, r5
 8005714:	4630      	mov	r0, r6
 8005716:	f000 f993 	bl	8005a40 <_sbrk_r>
 800571a:	1c43      	adds	r3, r0, #1
 800571c:	d123      	bne.n	8005766 <_malloc_r+0x92>
 800571e:	230c      	movs	r3, #12
 8005720:	6033      	str	r3, [r6, #0]
 8005722:	4630      	mov	r0, r6
 8005724:	f000 f9fe 	bl	8005b24 <__malloc_unlock>
 8005728:	e7e3      	b.n	80056f2 <_malloc_r+0x1e>
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	1b5b      	subs	r3, r3, r5
 800572e:	d417      	bmi.n	8005760 <_malloc_r+0x8c>
 8005730:	2b0b      	cmp	r3, #11
 8005732:	d903      	bls.n	800573c <_malloc_r+0x68>
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	441c      	add	r4, r3
 8005738:	6025      	str	r5, [r4, #0]
 800573a:	e004      	b.n	8005746 <_malloc_r+0x72>
 800573c:	6863      	ldr	r3, [r4, #4]
 800573e:	42a2      	cmp	r2, r4
 8005740:	bf0c      	ite	eq
 8005742:	600b      	streq	r3, [r1, #0]
 8005744:	6053      	strne	r3, [r2, #4]
 8005746:	4630      	mov	r0, r6
 8005748:	f000 f9ec 	bl	8005b24 <__malloc_unlock>
 800574c:	f104 000b 	add.w	r0, r4, #11
 8005750:	1d23      	adds	r3, r4, #4
 8005752:	f020 0007 	bic.w	r0, r0, #7
 8005756:	1ac2      	subs	r2, r0, r3
 8005758:	d0cc      	beq.n	80056f4 <_malloc_r+0x20>
 800575a:	1a1b      	subs	r3, r3, r0
 800575c:	50a3      	str	r3, [r4, r2]
 800575e:	e7c9      	b.n	80056f4 <_malloc_r+0x20>
 8005760:	4622      	mov	r2, r4
 8005762:	6864      	ldr	r4, [r4, #4]
 8005764:	e7cc      	b.n	8005700 <_malloc_r+0x2c>
 8005766:	1cc4      	adds	r4, r0, #3
 8005768:	f024 0403 	bic.w	r4, r4, #3
 800576c:	42a0      	cmp	r0, r4
 800576e:	d0e3      	beq.n	8005738 <_malloc_r+0x64>
 8005770:	1a21      	subs	r1, r4, r0
 8005772:	4630      	mov	r0, r6
 8005774:	f000 f964 	bl	8005a40 <_sbrk_r>
 8005778:	3001      	adds	r0, #1
 800577a:	d1dd      	bne.n	8005738 <_malloc_r+0x64>
 800577c:	e7cf      	b.n	800571e <_malloc_r+0x4a>
 800577e:	bf00      	nop
 8005780:	20000280 	.word	0x20000280
 8005784:	20000284 	.word	0x20000284

08005788 <__ssputs_r>:
 8005788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800578c:	688e      	ldr	r6, [r1, #8]
 800578e:	429e      	cmp	r6, r3
 8005790:	4682      	mov	sl, r0
 8005792:	460c      	mov	r4, r1
 8005794:	4690      	mov	r8, r2
 8005796:	461f      	mov	r7, r3
 8005798:	d838      	bhi.n	800580c <__ssputs_r+0x84>
 800579a:	898a      	ldrh	r2, [r1, #12]
 800579c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057a0:	d032      	beq.n	8005808 <__ssputs_r+0x80>
 80057a2:	6825      	ldr	r5, [r4, #0]
 80057a4:	6909      	ldr	r1, [r1, #16]
 80057a6:	eba5 0901 	sub.w	r9, r5, r1
 80057aa:	6965      	ldr	r5, [r4, #20]
 80057ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057b4:	3301      	adds	r3, #1
 80057b6:	444b      	add	r3, r9
 80057b8:	106d      	asrs	r5, r5, #1
 80057ba:	429d      	cmp	r5, r3
 80057bc:	bf38      	it	cc
 80057be:	461d      	movcc	r5, r3
 80057c0:	0553      	lsls	r3, r2, #21
 80057c2:	d531      	bpl.n	8005828 <__ssputs_r+0xa0>
 80057c4:	4629      	mov	r1, r5
 80057c6:	f7ff ff85 	bl	80056d4 <_malloc_r>
 80057ca:	4606      	mov	r6, r0
 80057cc:	b950      	cbnz	r0, 80057e4 <__ssputs_r+0x5c>
 80057ce:	230c      	movs	r3, #12
 80057d0:	f8ca 3000 	str.w	r3, [sl]
 80057d4:	89a3      	ldrh	r3, [r4, #12]
 80057d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057da:	81a3      	strh	r3, [r4, #12]
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295
 80057e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e4:	6921      	ldr	r1, [r4, #16]
 80057e6:	464a      	mov	r2, r9
 80057e8:	f7ff fb88 	bl	8004efc <memcpy>
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f6:	81a3      	strh	r3, [r4, #12]
 80057f8:	6126      	str	r6, [r4, #16]
 80057fa:	6165      	str	r5, [r4, #20]
 80057fc:	444e      	add	r6, r9
 80057fe:	eba5 0509 	sub.w	r5, r5, r9
 8005802:	6026      	str	r6, [r4, #0]
 8005804:	60a5      	str	r5, [r4, #8]
 8005806:	463e      	mov	r6, r7
 8005808:	42be      	cmp	r6, r7
 800580a:	d900      	bls.n	800580e <__ssputs_r+0x86>
 800580c:	463e      	mov	r6, r7
 800580e:	4632      	mov	r2, r6
 8005810:	6820      	ldr	r0, [r4, #0]
 8005812:	4641      	mov	r1, r8
 8005814:	f000 f966 	bl	8005ae4 <memmove>
 8005818:	68a3      	ldr	r3, [r4, #8]
 800581a:	6822      	ldr	r2, [r4, #0]
 800581c:	1b9b      	subs	r3, r3, r6
 800581e:	4432      	add	r2, r6
 8005820:	60a3      	str	r3, [r4, #8]
 8005822:	6022      	str	r2, [r4, #0]
 8005824:	2000      	movs	r0, #0
 8005826:	e7db      	b.n	80057e0 <__ssputs_r+0x58>
 8005828:	462a      	mov	r2, r5
 800582a:	f000 f981 	bl	8005b30 <_realloc_r>
 800582e:	4606      	mov	r6, r0
 8005830:	2800      	cmp	r0, #0
 8005832:	d1e1      	bne.n	80057f8 <__ssputs_r+0x70>
 8005834:	6921      	ldr	r1, [r4, #16]
 8005836:	4650      	mov	r0, sl
 8005838:	f7ff fefc 	bl	8005634 <_free_r>
 800583c:	e7c7      	b.n	80057ce <__ssputs_r+0x46>
	...

08005840 <_svfiprintf_r>:
 8005840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	4698      	mov	r8, r3
 8005846:	898b      	ldrh	r3, [r1, #12]
 8005848:	061b      	lsls	r3, r3, #24
 800584a:	b09d      	sub	sp, #116	; 0x74
 800584c:	4607      	mov	r7, r0
 800584e:	460d      	mov	r5, r1
 8005850:	4614      	mov	r4, r2
 8005852:	d50e      	bpl.n	8005872 <_svfiprintf_r+0x32>
 8005854:	690b      	ldr	r3, [r1, #16]
 8005856:	b963      	cbnz	r3, 8005872 <_svfiprintf_r+0x32>
 8005858:	2140      	movs	r1, #64	; 0x40
 800585a:	f7ff ff3b 	bl	80056d4 <_malloc_r>
 800585e:	6028      	str	r0, [r5, #0]
 8005860:	6128      	str	r0, [r5, #16]
 8005862:	b920      	cbnz	r0, 800586e <_svfiprintf_r+0x2e>
 8005864:	230c      	movs	r3, #12
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	f04f 30ff 	mov.w	r0, #4294967295
 800586c:	e0d1      	b.n	8005a12 <_svfiprintf_r+0x1d2>
 800586e:	2340      	movs	r3, #64	; 0x40
 8005870:	616b      	str	r3, [r5, #20]
 8005872:	2300      	movs	r3, #0
 8005874:	9309      	str	r3, [sp, #36]	; 0x24
 8005876:	2320      	movs	r3, #32
 8005878:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800587c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005880:	2330      	movs	r3, #48	; 0x30
 8005882:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a2c <_svfiprintf_r+0x1ec>
 8005886:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800588a:	f04f 0901 	mov.w	r9, #1
 800588e:	4623      	mov	r3, r4
 8005890:	469a      	mov	sl, r3
 8005892:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005896:	b10a      	cbz	r2, 800589c <_svfiprintf_r+0x5c>
 8005898:	2a25      	cmp	r2, #37	; 0x25
 800589a:	d1f9      	bne.n	8005890 <_svfiprintf_r+0x50>
 800589c:	ebba 0b04 	subs.w	fp, sl, r4
 80058a0:	d00b      	beq.n	80058ba <_svfiprintf_r+0x7a>
 80058a2:	465b      	mov	r3, fp
 80058a4:	4622      	mov	r2, r4
 80058a6:	4629      	mov	r1, r5
 80058a8:	4638      	mov	r0, r7
 80058aa:	f7ff ff6d 	bl	8005788 <__ssputs_r>
 80058ae:	3001      	adds	r0, #1
 80058b0:	f000 80aa 	beq.w	8005a08 <_svfiprintf_r+0x1c8>
 80058b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058b6:	445a      	add	r2, fp
 80058b8:	9209      	str	r2, [sp, #36]	; 0x24
 80058ba:	f89a 3000 	ldrb.w	r3, [sl]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 80a2 	beq.w	8005a08 <_svfiprintf_r+0x1c8>
 80058c4:	2300      	movs	r3, #0
 80058c6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058ce:	f10a 0a01 	add.w	sl, sl, #1
 80058d2:	9304      	str	r3, [sp, #16]
 80058d4:	9307      	str	r3, [sp, #28]
 80058d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058da:	931a      	str	r3, [sp, #104]	; 0x68
 80058dc:	4654      	mov	r4, sl
 80058de:	2205      	movs	r2, #5
 80058e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058e4:	4851      	ldr	r0, [pc, #324]	; (8005a2c <_svfiprintf_r+0x1ec>)
 80058e6:	f7fa fcb3 	bl	8000250 <memchr>
 80058ea:	9a04      	ldr	r2, [sp, #16]
 80058ec:	b9d8      	cbnz	r0, 8005926 <_svfiprintf_r+0xe6>
 80058ee:	06d0      	lsls	r0, r2, #27
 80058f0:	bf44      	itt	mi
 80058f2:	2320      	movmi	r3, #32
 80058f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058f8:	0711      	lsls	r1, r2, #28
 80058fa:	bf44      	itt	mi
 80058fc:	232b      	movmi	r3, #43	; 0x2b
 80058fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005902:	f89a 3000 	ldrb.w	r3, [sl]
 8005906:	2b2a      	cmp	r3, #42	; 0x2a
 8005908:	d015      	beq.n	8005936 <_svfiprintf_r+0xf6>
 800590a:	9a07      	ldr	r2, [sp, #28]
 800590c:	4654      	mov	r4, sl
 800590e:	2000      	movs	r0, #0
 8005910:	f04f 0c0a 	mov.w	ip, #10
 8005914:	4621      	mov	r1, r4
 8005916:	f811 3b01 	ldrb.w	r3, [r1], #1
 800591a:	3b30      	subs	r3, #48	; 0x30
 800591c:	2b09      	cmp	r3, #9
 800591e:	d94e      	bls.n	80059be <_svfiprintf_r+0x17e>
 8005920:	b1b0      	cbz	r0, 8005950 <_svfiprintf_r+0x110>
 8005922:	9207      	str	r2, [sp, #28]
 8005924:	e014      	b.n	8005950 <_svfiprintf_r+0x110>
 8005926:	eba0 0308 	sub.w	r3, r0, r8
 800592a:	fa09 f303 	lsl.w	r3, r9, r3
 800592e:	4313      	orrs	r3, r2
 8005930:	9304      	str	r3, [sp, #16]
 8005932:	46a2      	mov	sl, r4
 8005934:	e7d2      	b.n	80058dc <_svfiprintf_r+0x9c>
 8005936:	9b03      	ldr	r3, [sp, #12]
 8005938:	1d19      	adds	r1, r3, #4
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	9103      	str	r1, [sp, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	bfbb      	ittet	lt
 8005942:	425b      	neglt	r3, r3
 8005944:	f042 0202 	orrlt.w	r2, r2, #2
 8005948:	9307      	strge	r3, [sp, #28]
 800594a:	9307      	strlt	r3, [sp, #28]
 800594c:	bfb8      	it	lt
 800594e:	9204      	strlt	r2, [sp, #16]
 8005950:	7823      	ldrb	r3, [r4, #0]
 8005952:	2b2e      	cmp	r3, #46	; 0x2e
 8005954:	d10c      	bne.n	8005970 <_svfiprintf_r+0x130>
 8005956:	7863      	ldrb	r3, [r4, #1]
 8005958:	2b2a      	cmp	r3, #42	; 0x2a
 800595a:	d135      	bne.n	80059c8 <_svfiprintf_r+0x188>
 800595c:	9b03      	ldr	r3, [sp, #12]
 800595e:	1d1a      	adds	r2, r3, #4
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	9203      	str	r2, [sp, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	bfb8      	it	lt
 8005968:	f04f 33ff 	movlt.w	r3, #4294967295
 800596c:	3402      	adds	r4, #2
 800596e:	9305      	str	r3, [sp, #20]
 8005970:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a3c <_svfiprintf_r+0x1fc>
 8005974:	7821      	ldrb	r1, [r4, #0]
 8005976:	2203      	movs	r2, #3
 8005978:	4650      	mov	r0, sl
 800597a:	f7fa fc69 	bl	8000250 <memchr>
 800597e:	b140      	cbz	r0, 8005992 <_svfiprintf_r+0x152>
 8005980:	2340      	movs	r3, #64	; 0x40
 8005982:	eba0 000a 	sub.w	r0, r0, sl
 8005986:	fa03 f000 	lsl.w	r0, r3, r0
 800598a:	9b04      	ldr	r3, [sp, #16]
 800598c:	4303      	orrs	r3, r0
 800598e:	3401      	adds	r4, #1
 8005990:	9304      	str	r3, [sp, #16]
 8005992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005996:	4826      	ldr	r0, [pc, #152]	; (8005a30 <_svfiprintf_r+0x1f0>)
 8005998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800599c:	2206      	movs	r2, #6
 800599e:	f7fa fc57 	bl	8000250 <memchr>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d038      	beq.n	8005a18 <_svfiprintf_r+0x1d8>
 80059a6:	4b23      	ldr	r3, [pc, #140]	; (8005a34 <_svfiprintf_r+0x1f4>)
 80059a8:	bb1b      	cbnz	r3, 80059f2 <_svfiprintf_r+0x1b2>
 80059aa:	9b03      	ldr	r3, [sp, #12]
 80059ac:	3307      	adds	r3, #7
 80059ae:	f023 0307 	bic.w	r3, r3, #7
 80059b2:	3308      	adds	r3, #8
 80059b4:	9303      	str	r3, [sp, #12]
 80059b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b8:	4433      	add	r3, r6
 80059ba:	9309      	str	r3, [sp, #36]	; 0x24
 80059bc:	e767      	b.n	800588e <_svfiprintf_r+0x4e>
 80059be:	fb0c 3202 	mla	r2, ip, r2, r3
 80059c2:	460c      	mov	r4, r1
 80059c4:	2001      	movs	r0, #1
 80059c6:	e7a5      	b.n	8005914 <_svfiprintf_r+0xd4>
 80059c8:	2300      	movs	r3, #0
 80059ca:	3401      	adds	r4, #1
 80059cc:	9305      	str	r3, [sp, #20]
 80059ce:	4619      	mov	r1, r3
 80059d0:	f04f 0c0a 	mov.w	ip, #10
 80059d4:	4620      	mov	r0, r4
 80059d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059da:	3a30      	subs	r2, #48	; 0x30
 80059dc:	2a09      	cmp	r2, #9
 80059de:	d903      	bls.n	80059e8 <_svfiprintf_r+0x1a8>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0c5      	beq.n	8005970 <_svfiprintf_r+0x130>
 80059e4:	9105      	str	r1, [sp, #20]
 80059e6:	e7c3      	b.n	8005970 <_svfiprintf_r+0x130>
 80059e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80059ec:	4604      	mov	r4, r0
 80059ee:	2301      	movs	r3, #1
 80059f0:	e7f0      	b.n	80059d4 <_svfiprintf_r+0x194>
 80059f2:	ab03      	add	r3, sp, #12
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	462a      	mov	r2, r5
 80059f8:	4b0f      	ldr	r3, [pc, #60]	; (8005a38 <_svfiprintf_r+0x1f8>)
 80059fa:	a904      	add	r1, sp, #16
 80059fc:	4638      	mov	r0, r7
 80059fe:	f7fe f88f 	bl	8003b20 <_printf_float>
 8005a02:	1c42      	adds	r2, r0, #1
 8005a04:	4606      	mov	r6, r0
 8005a06:	d1d6      	bne.n	80059b6 <_svfiprintf_r+0x176>
 8005a08:	89ab      	ldrh	r3, [r5, #12]
 8005a0a:	065b      	lsls	r3, r3, #25
 8005a0c:	f53f af2c 	bmi.w	8005868 <_svfiprintf_r+0x28>
 8005a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a12:	b01d      	add	sp, #116	; 0x74
 8005a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a18:	ab03      	add	r3, sp, #12
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	462a      	mov	r2, r5
 8005a1e:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <_svfiprintf_r+0x1f8>)
 8005a20:	a904      	add	r1, sp, #16
 8005a22:	4638      	mov	r0, r7
 8005a24:	f7fe fb08 	bl	8004038 <_printf_i>
 8005a28:	e7eb      	b.n	8005a02 <_svfiprintf_r+0x1c2>
 8005a2a:	bf00      	nop
 8005a2c:	08006894 	.word	0x08006894
 8005a30:	0800689e 	.word	0x0800689e
 8005a34:	08003b21 	.word	0x08003b21
 8005a38:	08005789 	.word	0x08005789
 8005a3c:	0800689a 	.word	0x0800689a

08005a40 <_sbrk_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4d06      	ldr	r5, [pc, #24]	; (8005a5c <_sbrk_r+0x1c>)
 8005a44:	2300      	movs	r3, #0
 8005a46:	4604      	mov	r4, r0
 8005a48:	4608      	mov	r0, r1
 8005a4a:	602b      	str	r3, [r5, #0]
 8005a4c:	f7fb f9fe 	bl	8000e4c <_sbrk>
 8005a50:	1c43      	adds	r3, r0, #1
 8005a52:	d102      	bne.n	8005a5a <_sbrk_r+0x1a>
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	b103      	cbz	r3, 8005a5a <_sbrk_r+0x1a>
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	bd38      	pop	{r3, r4, r5, pc}
 8005a5c:	2000035c 	.word	0x2000035c

08005a60 <__assert_func>:
 8005a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a62:	4614      	mov	r4, r2
 8005a64:	461a      	mov	r2, r3
 8005a66:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <__assert_func+0x2c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4605      	mov	r5, r0
 8005a6c:	68d8      	ldr	r0, [r3, #12]
 8005a6e:	b14c      	cbz	r4, 8005a84 <__assert_func+0x24>
 8005a70:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <__assert_func+0x30>)
 8005a72:	9100      	str	r1, [sp, #0]
 8005a74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a78:	4906      	ldr	r1, [pc, #24]	; (8005a94 <__assert_func+0x34>)
 8005a7a:	462b      	mov	r3, r5
 8005a7c:	f000 f80e 	bl	8005a9c <fiprintf>
 8005a80:	f000 faa4 	bl	8005fcc <abort>
 8005a84:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <__assert_func+0x38>)
 8005a86:	461c      	mov	r4, r3
 8005a88:	e7f3      	b.n	8005a72 <__assert_func+0x12>
 8005a8a:	bf00      	nop
 8005a8c:	20000014 	.word	0x20000014
 8005a90:	080068a5 	.word	0x080068a5
 8005a94:	080068b2 	.word	0x080068b2
 8005a98:	080068e0 	.word	0x080068e0

08005a9c <fiprintf>:
 8005a9c:	b40e      	push	{r1, r2, r3}
 8005a9e:	b503      	push	{r0, r1, lr}
 8005aa0:	4601      	mov	r1, r0
 8005aa2:	ab03      	add	r3, sp, #12
 8005aa4:	4805      	ldr	r0, [pc, #20]	; (8005abc <fiprintf+0x20>)
 8005aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aaa:	6800      	ldr	r0, [r0, #0]
 8005aac:	9301      	str	r3, [sp, #4]
 8005aae:	f000 f88f 	bl	8005bd0 <_vfiprintf_r>
 8005ab2:	b002      	add	sp, #8
 8005ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ab8:	b003      	add	sp, #12
 8005aba:	4770      	bx	lr
 8005abc:	20000014 	.word	0x20000014

08005ac0 <__ascii_mbtowc>:
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	b901      	cbnz	r1, 8005ac6 <__ascii_mbtowc+0x6>
 8005ac4:	a901      	add	r1, sp, #4
 8005ac6:	b142      	cbz	r2, 8005ada <__ascii_mbtowc+0x1a>
 8005ac8:	b14b      	cbz	r3, 8005ade <__ascii_mbtowc+0x1e>
 8005aca:	7813      	ldrb	r3, [r2, #0]
 8005acc:	600b      	str	r3, [r1, #0]
 8005ace:	7812      	ldrb	r2, [r2, #0]
 8005ad0:	1e10      	subs	r0, r2, #0
 8005ad2:	bf18      	it	ne
 8005ad4:	2001      	movne	r0, #1
 8005ad6:	b002      	add	sp, #8
 8005ad8:	4770      	bx	lr
 8005ada:	4610      	mov	r0, r2
 8005adc:	e7fb      	b.n	8005ad6 <__ascii_mbtowc+0x16>
 8005ade:	f06f 0001 	mvn.w	r0, #1
 8005ae2:	e7f8      	b.n	8005ad6 <__ascii_mbtowc+0x16>

08005ae4 <memmove>:
 8005ae4:	4288      	cmp	r0, r1
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	eb01 0402 	add.w	r4, r1, r2
 8005aec:	d902      	bls.n	8005af4 <memmove+0x10>
 8005aee:	4284      	cmp	r4, r0
 8005af0:	4623      	mov	r3, r4
 8005af2:	d807      	bhi.n	8005b04 <memmove+0x20>
 8005af4:	1e43      	subs	r3, r0, #1
 8005af6:	42a1      	cmp	r1, r4
 8005af8:	d008      	beq.n	8005b0c <memmove+0x28>
 8005afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b02:	e7f8      	b.n	8005af6 <memmove+0x12>
 8005b04:	4402      	add	r2, r0
 8005b06:	4601      	mov	r1, r0
 8005b08:	428a      	cmp	r2, r1
 8005b0a:	d100      	bne.n	8005b0e <memmove+0x2a>
 8005b0c:	bd10      	pop	{r4, pc}
 8005b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b16:	e7f7      	b.n	8005b08 <memmove+0x24>

08005b18 <__malloc_lock>:
 8005b18:	4801      	ldr	r0, [pc, #4]	; (8005b20 <__malloc_lock+0x8>)
 8005b1a:	f000 bc17 	b.w	800634c <__retarget_lock_acquire_recursive>
 8005b1e:	bf00      	nop
 8005b20:	20000364 	.word	0x20000364

08005b24 <__malloc_unlock>:
 8005b24:	4801      	ldr	r0, [pc, #4]	; (8005b2c <__malloc_unlock+0x8>)
 8005b26:	f000 bc12 	b.w	800634e <__retarget_lock_release_recursive>
 8005b2a:	bf00      	nop
 8005b2c:	20000364 	.word	0x20000364

08005b30 <_realloc_r>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	4607      	mov	r7, r0
 8005b34:	4614      	mov	r4, r2
 8005b36:	460e      	mov	r6, r1
 8005b38:	b921      	cbnz	r1, 8005b44 <_realloc_r+0x14>
 8005b3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b3e:	4611      	mov	r1, r2
 8005b40:	f7ff bdc8 	b.w	80056d4 <_malloc_r>
 8005b44:	b922      	cbnz	r2, 8005b50 <_realloc_r+0x20>
 8005b46:	f7ff fd75 	bl	8005634 <_free_r>
 8005b4a:	4625      	mov	r5, r4
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b50:	f000 fc62 	bl	8006418 <_malloc_usable_size_r>
 8005b54:	42a0      	cmp	r0, r4
 8005b56:	d20f      	bcs.n	8005b78 <_realloc_r+0x48>
 8005b58:	4621      	mov	r1, r4
 8005b5a:	4638      	mov	r0, r7
 8005b5c:	f7ff fdba 	bl	80056d4 <_malloc_r>
 8005b60:	4605      	mov	r5, r0
 8005b62:	2800      	cmp	r0, #0
 8005b64:	d0f2      	beq.n	8005b4c <_realloc_r+0x1c>
 8005b66:	4631      	mov	r1, r6
 8005b68:	4622      	mov	r2, r4
 8005b6a:	f7ff f9c7 	bl	8004efc <memcpy>
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4638      	mov	r0, r7
 8005b72:	f7ff fd5f 	bl	8005634 <_free_r>
 8005b76:	e7e9      	b.n	8005b4c <_realloc_r+0x1c>
 8005b78:	4635      	mov	r5, r6
 8005b7a:	e7e7      	b.n	8005b4c <_realloc_r+0x1c>

08005b7c <__sfputc_r>:
 8005b7c:	6893      	ldr	r3, [r2, #8]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	b410      	push	{r4}
 8005b84:	6093      	str	r3, [r2, #8]
 8005b86:	da08      	bge.n	8005b9a <__sfputc_r+0x1e>
 8005b88:	6994      	ldr	r4, [r2, #24]
 8005b8a:	42a3      	cmp	r3, r4
 8005b8c:	db01      	blt.n	8005b92 <__sfputc_r+0x16>
 8005b8e:	290a      	cmp	r1, #10
 8005b90:	d103      	bne.n	8005b9a <__sfputc_r+0x1e>
 8005b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b96:	f000 b94b 	b.w	8005e30 <__swbuf_r>
 8005b9a:	6813      	ldr	r3, [r2, #0]
 8005b9c:	1c58      	adds	r0, r3, #1
 8005b9e:	6010      	str	r0, [r2, #0]
 8005ba0:	7019      	strb	r1, [r3, #0]
 8005ba2:	4608      	mov	r0, r1
 8005ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <__sfputs_r>:
 8005baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bac:	4606      	mov	r6, r0
 8005bae:	460f      	mov	r7, r1
 8005bb0:	4614      	mov	r4, r2
 8005bb2:	18d5      	adds	r5, r2, r3
 8005bb4:	42ac      	cmp	r4, r5
 8005bb6:	d101      	bne.n	8005bbc <__sfputs_r+0x12>
 8005bb8:	2000      	movs	r0, #0
 8005bba:	e007      	b.n	8005bcc <__sfputs_r+0x22>
 8005bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc0:	463a      	mov	r2, r7
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f7ff ffda 	bl	8005b7c <__sfputc_r>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d1f3      	bne.n	8005bb4 <__sfputs_r+0xa>
 8005bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bd0 <_vfiprintf_r>:
 8005bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd4:	460d      	mov	r5, r1
 8005bd6:	b09d      	sub	sp, #116	; 0x74
 8005bd8:	4614      	mov	r4, r2
 8005bda:	4698      	mov	r8, r3
 8005bdc:	4606      	mov	r6, r0
 8005bde:	b118      	cbz	r0, 8005be8 <_vfiprintf_r+0x18>
 8005be0:	6983      	ldr	r3, [r0, #24]
 8005be2:	b90b      	cbnz	r3, 8005be8 <_vfiprintf_r+0x18>
 8005be4:	f000 fb14 	bl	8006210 <__sinit>
 8005be8:	4b89      	ldr	r3, [pc, #548]	; (8005e10 <_vfiprintf_r+0x240>)
 8005bea:	429d      	cmp	r5, r3
 8005bec:	d11b      	bne.n	8005c26 <_vfiprintf_r+0x56>
 8005bee:	6875      	ldr	r5, [r6, #4]
 8005bf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bf2:	07d9      	lsls	r1, r3, #31
 8005bf4:	d405      	bmi.n	8005c02 <_vfiprintf_r+0x32>
 8005bf6:	89ab      	ldrh	r3, [r5, #12]
 8005bf8:	059a      	lsls	r2, r3, #22
 8005bfa:	d402      	bmi.n	8005c02 <_vfiprintf_r+0x32>
 8005bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bfe:	f000 fba5 	bl	800634c <__retarget_lock_acquire_recursive>
 8005c02:	89ab      	ldrh	r3, [r5, #12]
 8005c04:	071b      	lsls	r3, r3, #28
 8005c06:	d501      	bpl.n	8005c0c <_vfiprintf_r+0x3c>
 8005c08:	692b      	ldr	r3, [r5, #16]
 8005c0a:	b9eb      	cbnz	r3, 8005c48 <_vfiprintf_r+0x78>
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	4630      	mov	r0, r6
 8005c10:	f000 f96e 	bl	8005ef0 <__swsetup_r>
 8005c14:	b1c0      	cbz	r0, 8005c48 <_vfiprintf_r+0x78>
 8005c16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c18:	07dc      	lsls	r4, r3, #31
 8005c1a:	d50e      	bpl.n	8005c3a <_vfiprintf_r+0x6a>
 8005c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c20:	b01d      	add	sp, #116	; 0x74
 8005c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c26:	4b7b      	ldr	r3, [pc, #492]	; (8005e14 <_vfiprintf_r+0x244>)
 8005c28:	429d      	cmp	r5, r3
 8005c2a:	d101      	bne.n	8005c30 <_vfiprintf_r+0x60>
 8005c2c:	68b5      	ldr	r5, [r6, #8]
 8005c2e:	e7df      	b.n	8005bf0 <_vfiprintf_r+0x20>
 8005c30:	4b79      	ldr	r3, [pc, #484]	; (8005e18 <_vfiprintf_r+0x248>)
 8005c32:	429d      	cmp	r5, r3
 8005c34:	bf08      	it	eq
 8005c36:	68f5      	ldreq	r5, [r6, #12]
 8005c38:	e7da      	b.n	8005bf0 <_vfiprintf_r+0x20>
 8005c3a:	89ab      	ldrh	r3, [r5, #12]
 8005c3c:	0598      	lsls	r0, r3, #22
 8005c3e:	d4ed      	bmi.n	8005c1c <_vfiprintf_r+0x4c>
 8005c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c42:	f000 fb84 	bl	800634e <__retarget_lock_release_recursive>
 8005c46:	e7e9      	b.n	8005c1c <_vfiprintf_r+0x4c>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c4c:	2320      	movs	r3, #32
 8005c4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c56:	2330      	movs	r3, #48	; 0x30
 8005c58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e1c <_vfiprintf_r+0x24c>
 8005c5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c60:	f04f 0901 	mov.w	r9, #1
 8005c64:	4623      	mov	r3, r4
 8005c66:	469a      	mov	sl, r3
 8005c68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c6c:	b10a      	cbz	r2, 8005c72 <_vfiprintf_r+0xa2>
 8005c6e:	2a25      	cmp	r2, #37	; 0x25
 8005c70:	d1f9      	bne.n	8005c66 <_vfiprintf_r+0x96>
 8005c72:	ebba 0b04 	subs.w	fp, sl, r4
 8005c76:	d00b      	beq.n	8005c90 <_vfiprintf_r+0xc0>
 8005c78:	465b      	mov	r3, fp
 8005c7a:	4622      	mov	r2, r4
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f7ff ff93 	bl	8005baa <__sfputs_r>
 8005c84:	3001      	adds	r0, #1
 8005c86:	f000 80aa 	beq.w	8005dde <_vfiprintf_r+0x20e>
 8005c8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c8c:	445a      	add	r2, fp
 8005c8e:	9209      	str	r2, [sp, #36]	; 0x24
 8005c90:	f89a 3000 	ldrb.w	r3, [sl]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 80a2 	beq.w	8005dde <_vfiprintf_r+0x20e>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ca4:	f10a 0a01 	add.w	sl, sl, #1
 8005ca8:	9304      	str	r3, [sp, #16]
 8005caa:	9307      	str	r3, [sp, #28]
 8005cac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cb0:	931a      	str	r3, [sp, #104]	; 0x68
 8005cb2:	4654      	mov	r4, sl
 8005cb4:	2205      	movs	r2, #5
 8005cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cba:	4858      	ldr	r0, [pc, #352]	; (8005e1c <_vfiprintf_r+0x24c>)
 8005cbc:	f7fa fac8 	bl	8000250 <memchr>
 8005cc0:	9a04      	ldr	r2, [sp, #16]
 8005cc2:	b9d8      	cbnz	r0, 8005cfc <_vfiprintf_r+0x12c>
 8005cc4:	06d1      	lsls	r1, r2, #27
 8005cc6:	bf44      	itt	mi
 8005cc8:	2320      	movmi	r3, #32
 8005cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cce:	0713      	lsls	r3, r2, #28
 8005cd0:	bf44      	itt	mi
 8005cd2:	232b      	movmi	r3, #43	; 0x2b
 8005cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8005cde:	d015      	beq.n	8005d0c <_vfiprintf_r+0x13c>
 8005ce0:	9a07      	ldr	r2, [sp, #28]
 8005ce2:	4654      	mov	r4, sl
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	f04f 0c0a 	mov.w	ip, #10
 8005cea:	4621      	mov	r1, r4
 8005cec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cf0:	3b30      	subs	r3, #48	; 0x30
 8005cf2:	2b09      	cmp	r3, #9
 8005cf4:	d94e      	bls.n	8005d94 <_vfiprintf_r+0x1c4>
 8005cf6:	b1b0      	cbz	r0, 8005d26 <_vfiprintf_r+0x156>
 8005cf8:	9207      	str	r2, [sp, #28]
 8005cfa:	e014      	b.n	8005d26 <_vfiprintf_r+0x156>
 8005cfc:	eba0 0308 	sub.w	r3, r0, r8
 8005d00:	fa09 f303 	lsl.w	r3, r9, r3
 8005d04:	4313      	orrs	r3, r2
 8005d06:	9304      	str	r3, [sp, #16]
 8005d08:	46a2      	mov	sl, r4
 8005d0a:	e7d2      	b.n	8005cb2 <_vfiprintf_r+0xe2>
 8005d0c:	9b03      	ldr	r3, [sp, #12]
 8005d0e:	1d19      	adds	r1, r3, #4
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	9103      	str	r1, [sp, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	bfbb      	ittet	lt
 8005d18:	425b      	neglt	r3, r3
 8005d1a:	f042 0202 	orrlt.w	r2, r2, #2
 8005d1e:	9307      	strge	r3, [sp, #28]
 8005d20:	9307      	strlt	r3, [sp, #28]
 8005d22:	bfb8      	it	lt
 8005d24:	9204      	strlt	r2, [sp, #16]
 8005d26:	7823      	ldrb	r3, [r4, #0]
 8005d28:	2b2e      	cmp	r3, #46	; 0x2e
 8005d2a:	d10c      	bne.n	8005d46 <_vfiprintf_r+0x176>
 8005d2c:	7863      	ldrb	r3, [r4, #1]
 8005d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d30:	d135      	bne.n	8005d9e <_vfiprintf_r+0x1ce>
 8005d32:	9b03      	ldr	r3, [sp, #12]
 8005d34:	1d1a      	adds	r2, r3, #4
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	9203      	str	r2, [sp, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	bfb8      	it	lt
 8005d3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d42:	3402      	adds	r4, #2
 8005d44:	9305      	str	r3, [sp, #20]
 8005d46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e2c <_vfiprintf_r+0x25c>
 8005d4a:	7821      	ldrb	r1, [r4, #0]
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	4650      	mov	r0, sl
 8005d50:	f7fa fa7e 	bl	8000250 <memchr>
 8005d54:	b140      	cbz	r0, 8005d68 <_vfiprintf_r+0x198>
 8005d56:	2340      	movs	r3, #64	; 0x40
 8005d58:	eba0 000a 	sub.w	r0, r0, sl
 8005d5c:	fa03 f000 	lsl.w	r0, r3, r0
 8005d60:	9b04      	ldr	r3, [sp, #16]
 8005d62:	4303      	orrs	r3, r0
 8005d64:	3401      	adds	r4, #1
 8005d66:	9304      	str	r3, [sp, #16]
 8005d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d6c:	482c      	ldr	r0, [pc, #176]	; (8005e20 <_vfiprintf_r+0x250>)
 8005d6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d72:	2206      	movs	r2, #6
 8005d74:	f7fa fa6c 	bl	8000250 <memchr>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	d03f      	beq.n	8005dfc <_vfiprintf_r+0x22c>
 8005d7c:	4b29      	ldr	r3, [pc, #164]	; (8005e24 <_vfiprintf_r+0x254>)
 8005d7e:	bb1b      	cbnz	r3, 8005dc8 <_vfiprintf_r+0x1f8>
 8005d80:	9b03      	ldr	r3, [sp, #12]
 8005d82:	3307      	adds	r3, #7
 8005d84:	f023 0307 	bic.w	r3, r3, #7
 8005d88:	3308      	adds	r3, #8
 8005d8a:	9303      	str	r3, [sp, #12]
 8005d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d8e:	443b      	add	r3, r7
 8005d90:	9309      	str	r3, [sp, #36]	; 0x24
 8005d92:	e767      	b.n	8005c64 <_vfiprintf_r+0x94>
 8005d94:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d98:	460c      	mov	r4, r1
 8005d9a:	2001      	movs	r0, #1
 8005d9c:	e7a5      	b.n	8005cea <_vfiprintf_r+0x11a>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	3401      	adds	r4, #1
 8005da2:	9305      	str	r3, [sp, #20]
 8005da4:	4619      	mov	r1, r3
 8005da6:	f04f 0c0a 	mov.w	ip, #10
 8005daa:	4620      	mov	r0, r4
 8005dac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005db0:	3a30      	subs	r2, #48	; 0x30
 8005db2:	2a09      	cmp	r2, #9
 8005db4:	d903      	bls.n	8005dbe <_vfiprintf_r+0x1ee>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0c5      	beq.n	8005d46 <_vfiprintf_r+0x176>
 8005dba:	9105      	str	r1, [sp, #20]
 8005dbc:	e7c3      	b.n	8005d46 <_vfiprintf_r+0x176>
 8005dbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e7f0      	b.n	8005daa <_vfiprintf_r+0x1da>
 8005dc8:	ab03      	add	r3, sp, #12
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	462a      	mov	r2, r5
 8005dce:	4b16      	ldr	r3, [pc, #88]	; (8005e28 <_vfiprintf_r+0x258>)
 8005dd0:	a904      	add	r1, sp, #16
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f7fd fea4 	bl	8003b20 <_printf_float>
 8005dd8:	4607      	mov	r7, r0
 8005dda:	1c78      	adds	r0, r7, #1
 8005ddc:	d1d6      	bne.n	8005d8c <_vfiprintf_r+0x1bc>
 8005dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005de0:	07d9      	lsls	r1, r3, #31
 8005de2:	d405      	bmi.n	8005df0 <_vfiprintf_r+0x220>
 8005de4:	89ab      	ldrh	r3, [r5, #12]
 8005de6:	059a      	lsls	r2, r3, #22
 8005de8:	d402      	bmi.n	8005df0 <_vfiprintf_r+0x220>
 8005dea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dec:	f000 faaf 	bl	800634e <__retarget_lock_release_recursive>
 8005df0:	89ab      	ldrh	r3, [r5, #12]
 8005df2:	065b      	lsls	r3, r3, #25
 8005df4:	f53f af12 	bmi.w	8005c1c <_vfiprintf_r+0x4c>
 8005df8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dfa:	e711      	b.n	8005c20 <_vfiprintf_r+0x50>
 8005dfc:	ab03      	add	r3, sp, #12
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	462a      	mov	r2, r5
 8005e02:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <_vfiprintf_r+0x258>)
 8005e04:	a904      	add	r1, sp, #16
 8005e06:	4630      	mov	r0, r6
 8005e08:	f7fe f916 	bl	8004038 <_printf_i>
 8005e0c:	e7e4      	b.n	8005dd8 <_vfiprintf_r+0x208>
 8005e0e:	bf00      	nop
 8005e10:	08006a0c 	.word	0x08006a0c
 8005e14:	08006a2c 	.word	0x08006a2c
 8005e18:	080069ec 	.word	0x080069ec
 8005e1c:	08006894 	.word	0x08006894
 8005e20:	0800689e 	.word	0x0800689e
 8005e24:	08003b21 	.word	0x08003b21
 8005e28:	08005bab 	.word	0x08005bab
 8005e2c:	0800689a 	.word	0x0800689a

08005e30 <__swbuf_r>:
 8005e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e32:	460e      	mov	r6, r1
 8005e34:	4614      	mov	r4, r2
 8005e36:	4605      	mov	r5, r0
 8005e38:	b118      	cbz	r0, 8005e42 <__swbuf_r+0x12>
 8005e3a:	6983      	ldr	r3, [r0, #24]
 8005e3c:	b90b      	cbnz	r3, 8005e42 <__swbuf_r+0x12>
 8005e3e:	f000 f9e7 	bl	8006210 <__sinit>
 8005e42:	4b21      	ldr	r3, [pc, #132]	; (8005ec8 <__swbuf_r+0x98>)
 8005e44:	429c      	cmp	r4, r3
 8005e46:	d12b      	bne.n	8005ea0 <__swbuf_r+0x70>
 8005e48:	686c      	ldr	r4, [r5, #4]
 8005e4a:	69a3      	ldr	r3, [r4, #24]
 8005e4c:	60a3      	str	r3, [r4, #8]
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	071a      	lsls	r2, r3, #28
 8005e52:	d52f      	bpl.n	8005eb4 <__swbuf_r+0x84>
 8005e54:	6923      	ldr	r3, [r4, #16]
 8005e56:	b36b      	cbz	r3, 8005eb4 <__swbuf_r+0x84>
 8005e58:	6923      	ldr	r3, [r4, #16]
 8005e5a:	6820      	ldr	r0, [r4, #0]
 8005e5c:	1ac0      	subs	r0, r0, r3
 8005e5e:	6963      	ldr	r3, [r4, #20]
 8005e60:	b2f6      	uxtb	r6, r6
 8005e62:	4283      	cmp	r3, r0
 8005e64:	4637      	mov	r7, r6
 8005e66:	dc04      	bgt.n	8005e72 <__swbuf_r+0x42>
 8005e68:	4621      	mov	r1, r4
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 f93c 	bl	80060e8 <_fflush_r>
 8005e70:	bb30      	cbnz	r0, 8005ec0 <__swbuf_r+0x90>
 8005e72:	68a3      	ldr	r3, [r4, #8]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	60a3      	str	r3, [r4, #8]
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	6022      	str	r2, [r4, #0]
 8005e7e:	701e      	strb	r6, [r3, #0]
 8005e80:	6963      	ldr	r3, [r4, #20]
 8005e82:	3001      	adds	r0, #1
 8005e84:	4283      	cmp	r3, r0
 8005e86:	d004      	beq.n	8005e92 <__swbuf_r+0x62>
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	07db      	lsls	r3, r3, #31
 8005e8c:	d506      	bpl.n	8005e9c <__swbuf_r+0x6c>
 8005e8e:	2e0a      	cmp	r6, #10
 8005e90:	d104      	bne.n	8005e9c <__swbuf_r+0x6c>
 8005e92:	4621      	mov	r1, r4
 8005e94:	4628      	mov	r0, r5
 8005e96:	f000 f927 	bl	80060e8 <_fflush_r>
 8005e9a:	b988      	cbnz	r0, 8005ec0 <__swbuf_r+0x90>
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <__swbuf_r+0x9c>)
 8005ea2:	429c      	cmp	r4, r3
 8005ea4:	d101      	bne.n	8005eaa <__swbuf_r+0x7a>
 8005ea6:	68ac      	ldr	r4, [r5, #8]
 8005ea8:	e7cf      	b.n	8005e4a <__swbuf_r+0x1a>
 8005eaa:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <__swbuf_r+0xa0>)
 8005eac:	429c      	cmp	r4, r3
 8005eae:	bf08      	it	eq
 8005eb0:	68ec      	ldreq	r4, [r5, #12]
 8005eb2:	e7ca      	b.n	8005e4a <__swbuf_r+0x1a>
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f000 f81a 	bl	8005ef0 <__swsetup_r>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d0cb      	beq.n	8005e58 <__swbuf_r+0x28>
 8005ec0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ec4:	e7ea      	b.n	8005e9c <__swbuf_r+0x6c>
 8005ec6:	bf00      	nop
 8005ec8:	08006a0c 	.word	0x08006a0c
 8005ecc:	08006a2c 	.word	0x08006a2c
 8005ed0:	080069ec 	.word	0x080069ec

08005ed4 <__ascii_wctomb>:
 8005ed4:	b149      	cbz	r1, 8005eea <__ascii_wctomb+0x16>
 8005ed6:	2aff      	cmp	r2, #255	; 0xff
 8005ed8:	bf85      	ittet	hi
 8005eda:	238a      	movhi	r3, #138	; 0x8a
 8005edc:	6003      	strhi	r3, [r0, #0]
 8005ede:	700a      	strbls	r2, [r1, #0]
 8005ee0:	f04f 30ff 	movhi.w	r0, #4294967295
 8005ee4:	bf98      	it	ls
 8005ee6:	2001      	movls	r0, #1
 8005ee8:	4770      	bx	lr
 8005eea:	4608      	mov	r0, r1
 8005eec:	4770      	bx	lr
	...

08005ef0 <__swsetup_r>:
 8005ef0:	4b32      	ldr	r3, [pc, #200]	; (8005fbc <__swsetup_r+0xcc>)
 8005ef2:	b570      	push	{r4, r5, r6, lr}
 8005ef4:	681d      	ldr	r5, [r3, #0]
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	460c      	mov	r4, r1
 8005efa:	b125      	cbz	r5, 8005f06 <__swsetup_r+0x16>
 8005efc:	69ab      	ldr	r3, [r5, #24]
 8005efe:	b913      	cbnz	r3, 8005f06 <__swsetup_r+0x16>
 8005f00:	4628      	mov	r0, r5
 8005f02:	f000 f985 	bl	8006210 <__sinit>
 8005f06:	4b2e      	ldr	r3, [pc, #184]	; (8005fc0 <__swsetup_r+0xd0>)
 8005f08:	429c      	cmp	r4, r3
 8005f0a:	d10f      	bne.n	8005f2c <__swsetup_r+0x3c>
 8005f0c:	686c      	ldr	r4, [r5, #4]
 8005f0e:	89a3      	ldrh	r3, [r4, #12]
 8005f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f14:	0719      	lsls	r1, r3, #28
 8005f16:	d42c      	bmi.n	8005f72 <__swsetup_r+0x82>
 8005f18:	06dd      	lsls	r5, r3, #27
 8005f1a:	d411      	bmi.n	8005f40 <__swsetup_r+0x50>
 8005f1c:	2309      	movs	r3, #9
 8005f1e:	6033      	str	r3, [r6, #0]
 8005f20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f24:	81a3      	strh	r3, [r4, #12]
 8005f26:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2a:	e03e      	b.n	8005faa <__swsetup_r+0xba>
 8005f2c:	4b25      	ldr	r3, [pc, #148]	; (8005fc4 <__swsetup_r+0xd4>)
 8005f2e:	429c      	cmp	r4, r3
 8005f30:	d101      	bne.n	8005f36 <__swsetup_r+0x46>
 8005f32:	68ac      	ldr	r4, [r5, #8]
 8005f34:	e7eb      	b.n	8005f0e <__swsetup_r+0x1e>
 8005f36:	4b24      	ldr	r3, [pc, #144]	; (8005fc8 <__swsetup_r+0xd8>)
 8005f38:	429c      	cmp	r4, r3
 8005f3a:	bf08      	it	eq
 8005f3c:	68ec      	ldreq	r4, [r5, #12]
 8005f3e:	e7e6      	b.n	8005f0e <__swsetup_r+0x1e>
 8005f40:	0758      	lsls	r0, r3, #29
 8005f42:	d512      	bpl.n	8005f6a <__swsetup_r+0x7a>
 8005f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f46:	b141      	cbz	r1, 8005f5a <__swsetup_r+0x6a>
 8005f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f4c:	4299      	cmp	r1, r3
 8005f4e:	d002      	beq.n	8005f56 <__swsetup_r+0x66>
 8005f50:	4630      	mov	r0, r6
 8005f52:	f7ff fb6f 	bl	8005634 <_free_r>
 8005f56:	2300      	movs	r3, #0
 8005f58:	6363      	str	r3, [r4, #52]	; 0x34
 8005f5a:	89a3      	ldrh	r3, [r4, #12]
 8005f5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f60:	81a3      	strh	r3, [r4, #12]
 8005f62:	2300      	movs	r3, #0
 8005f64:	6063      	str	r3, [r4, #4]
 8005f66:	6923      	ldr	r3, [r4, #16]
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	f043 0308 	orr.w	r3, r3, #8
 8005f70:	81a3      	strh	r3, [r4, #12]
 8005f72:	6923      	ldr	r3, [r4, #16]
 8005f74:	b94b      	cbnz	r3, 8005f8a <__swsetup_r+0x9a>
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f80:	d003      	beq.n	8005f8a <__swsetup_r+0x9a>
 8005f82:	4621      	mov	r1, r4
 8005f84:	4630      	mov	r0, r6
 8005f86:	f000 fa07 	bl	8006398 <__smakebuf_r>
 8005f8a:	89a0      	ldrh	r0, [r4, #12]
 8005f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f90:	f010 0301 	ands.w	r3, r0, #1
 8005f94:	d00a      	beq.n	8005fac <__swsetup_r+0xbc>
 8005f96:	2300      	movs	r3, #0
 8005f98:	60a3      	str	r3, [r4, #8]
 8005f9a:	6963      	ldr	r3, [r4, #20]
 8005f9c:	425b      	negs	r3, r3
 8005f9e:	61a3      	str	r3, [r4, #24]
 8005fa0:	6923      	ldr	r3, [r4, #16]
 8005fa2:	b943      	cbnz	r3, 8005fb6 <__swsetup_r+0xc6>
 8005fa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005fa8:	d1ba      	bne.n	8005f20 <__swsetup_r+0x30>
 8005faa:	bd70      	pop	{r4, r5, r6, pc}
 8005fac:	0781      	lsls	r1, r0, #30
 8005fae:	bf58      	it	pl
 8005fb0:	6963      	ldrpl	r3, [r4, #20]
 8005fb2:	60a3      	str	r3, [r4, #8]
 8005fb4:	e7f4      	b.n	8005fa0 <__swsetup_r+0xb0>
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	e7f7      	b.n	8005faa <__swsetup_r+0xba>
 8005fba:	bf00      	nop
 8005fbc:	20000014 	.word	0x20000014
 8005fc0:	08006a0c 	.word	0x08006a0c
 8005fc4:	08006a2c 	.word	0x08006a2c
 8005fc8:	080069ec 	.word	0x080069ec

08005fcc <abort>:
 8005fcc:	b508      	push	{r3, lr}
 8005fce:	2006      	movs	r0, #6
 8005fd0:	f000 fa52 	bl	8006478 <raise>
 8005fd4:	2001      	movs	r0, #1
 8005fd6:	f7fa fec1 	bl	8000d5c <_exit>
	...

08005fdc <__sflush_r>:
 8005fdc:	898a      	ldrh	r2, [r1, #12]
 8005fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	0710      	lsls	r0, r2, #28
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	d458      	bmi.n	800609c <__sflush_r+0xc0>
 8005fea:	684b      	ldr	r3, [r1, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	dc05      	bgt.n	8005ffc <__sflush_r+0x20>
 8005ff0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	dc02      	bgt.n	8005ffc <__sflush_r+0x20>
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ffe:	2e00      	cmp	r6, #0
 8006000:	d0f9      	beq.n	8005ff6 <__sflush_r+0x1a>
 8006002:	2300      	movs	r3, #0
 8006004:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006008:	682f      	ldr	r7, [r5, #0]
 800600a:	602b      	str	r3, [r5, #0]
 800600c:	d032      	beq.n	8006074 <__sflush_r+0x98>
 800600e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	075a      	lsls	r2, r3, #29
 8006014:	d505      	bpl.n	8006022 <__sflush_r+0x46>
 8006016:	6863      	ldr	r3, [r4, #4]
 8006018:	1ac0      	subs	r0, r0, r3
 800601a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800601c:	b10b      	cbz	r3, 8006022 <__sflush_r+0x46>
 800601e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006020:	1ac0      	subs	r0, r0, r3
 8006022:	2300      	movs	r3, #0
 8006024:	4602      	mov	r2, r0
 8006026:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006028:	6a21      	ldr	r1, [r4, #32]
 800602a:	4628      	mov	r0, r5
 800602c:	47b0      	blx	r6
 800602e:	1c43      	adds	r3, r0, #1
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	d106      	bne.n	8006042 <__sflush_r+0x66>
 8006034:	6829      	ldr	r1, [r5, #0]
 8006036:	291d      	cmp	r1, #29
 8006038:	d82c      	bhi.n	8006094 <__sflush_r+0xb8>
 800603a:	4a2a      	ldr	r2, [pc, #168]	; (80060e4 <__sflush_r+0x108>)
 800603c:	40ca      	lsrs	r2, r1
 800603e:	07d6      	lsls	r6, r2, #31
 8006040:	d528      	bpl.n	8006094 <__sflush_r+0xb8>
 8006042:	2200      	movs	r2, #0
 8006044:	6062      	str	r2, [r4, #4]
 8006046:	04d9      	lsls	r1, r3, #19
 8006048:	6922      	ldr	r2, [r4, #16]
 800604a:	6022      	str	r2, [r4, #0]
 800604c:	d504      	bpl.n	8006058 <__sflush_r+0x7c>
 800604e:	1c42      	adds	r2, r0, #1
 8006050:	d101      	bne.n	8006056 <__sflush_r+0x7a>
 8006052:	682b      	ldr	r3, [r5, #0]
 8006054:	b903      	cbnz	r3, 8006058 <__sflush_r+0x7c>
 8006056:	6560      	str	r0, [r4, #84]	; 0x54
 8006058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800605a:	602f      	str	r7, [r5, #0]
 800605c:	2900      	cmp	r1, #0
 800605e:	d0ca      	beq.n	8005ff6 <__sflush_r+0x1a>
 8006060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006064:	4299      	cmp	r1, r3
 8006066:	d002      	beq.n	800606e <__sflush_r+0x92>
 8006068:	4628      	mov	r0, r5
 800606a:	f7ff fae3 	bl	8005634 <_free_r>
 800606e:	2000      	movs	r0, #0
 8006070:	6360      	str	r0, [r4, #52]	; 0x34
 8006072:	e7c1      	b.n	8005ff8 <__sflush_r+0x1c>
 8006074:	6a21      	ldr	r1, [r4, #32]
 8006076:	2301      	movs	r3, #1
 8006078:	4628      	mov	r0, r5
 800607a:	47b0      	blx	r6
 800607c:	1c41      	adds	r1, r0, #1
 800607e:	d1c7      	bne.n	8006010 <__sflush_r+0x34>
 8006080:	682b      	ldr	r3, [r5, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0c4      	beq.n	8006010 <__sflush_r+0x34>
 8006086:	2b1d      	cmp	r3, #29
 8006088:	d001      	beq.n	800608e <__sflush_r+0xb2>
 800608a:	2b16      	cmp	r3, #22
 800608c:	d101      	bne.n	8006092 <__sflush_r+0xb6>
 800608e:	602f      	str	r7, [r5, #0]
 8006090:	e7b1      	b.n	8005ff6 <__sflush_r+0x1a>
 8006092:	89a3      	ldrh	r3, [r4, #12]
 8006094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006098:	81a3      	strh	r3, [r4, #12]
 800609a:	e7ad      	b.n	8005ff8 <__sflush_r+0x1c>
 800609c:	690f      	ldr	r7, [r1, #16]
 800609e:	2f00      	cmp	r7, #0
 80060a0:	d0a9      	beq.n	8005ff6 <__sflush_r+0x1a>
 80060a2:	0793      	lsls	r3, r2, #30
 80060a4:	680e      	ldr	r6, [r1, #0]
 80060a6:	bf08      	it	eq
 80060a8:	694b      	ldreq	r3, [r1, #20]
 80060aa:	600f      	str	r7, [r1, #0]
 80060ac:	bf18      	it	ne
 80060ae:	2300      	movne	r3, #0
 80060b0:	eba6 0807 	sub.w	r8, r6, r7
 80060b4:	608b      	str	r3, [r1, #8]
 80060b6:	f1b8 0f00 	cmp.w	r8, #0
 80060ba:	dd9c      	ble.n	8005ff6 <__sflush_r+0x1a>
 80060bc:	6a21      	ldr	r1, [r4, #32]
 80060be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80060c0:	4643      	mov	r3, r8
 80060c2:	463a      	mov	r2, r7
 80060c4:	4628      	mov	r0, r5
 80060c6:	47b0      	blx	r6
 80060c8:	2800      	cmp	r0, #0
 80060ca:	dc06      	bgt.n	80060da <__sflush_r+0xfe>
 80060cc:	89a3      	ldrh	r3, [r4, #12]
 80060ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060d2:	81a3      	strh	r3, [r4, #12]
 80060d4:	f04f 30ff 	mov.w	r0, #4294967295
 80060d8:	e78e      	b.n	8005ff8 <__sflush_r+0x1c>
 80060da:	4407      	add	r7, r0
 80060dc:	eba8 0800 	sub.w	r8, r8, r0
 80060e0:	e7e9      	b.n	80060b6 <__sflush_r+0xda>
 80060e2:	bf00      	nop
 80060e4:	20400001 	.word	0x20400001

080060e8 <_fflush_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	690b      	ldr	r3, [r1, #16]
 80060ec:	4605      	mov	r5, r0
 80060ee:	460c      	mov	r4, r1
 80060f0:	b913      	cbnz	r3, 80060f8 <_fflush_r+0x10>
 80060f2:	2500      	movs	r5, #0
 80060f4:	4628      	mov	r0, r5
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	b118      	cbz	r0, 8006102 <_fflush_r+0x1a>
 80060fa:	6983      	ldr	r3, [r0, #24]
 80060fc:	b90b      	cbnz	r3, 8006102 <_fflush_r+0x1a>
 80060fe:	f000 f887 	bl	8006210 <__sinit>
 8006102:	4b14      	ldr	r3, [pc, #80]	; (8006154 <_fflush_r+0x6c>)
 8006104:	429c      	cmp	r4, r3
 8006106:	d11b      	bne.n	8006140 <_fflush_r+0x58>
 8006108:	686c      	ldr	r4, [r5, #4]
 800610a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0ef      	beq.n	80060f2 <_fflush_r+0xa>
 8006112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006114:	07d0      	lsls	r0, r2, #31
 8006116:	d404      	bmi.n	8006122 <_fflush_r+0x3a>
 8006118:	0599      	lsls	r1, r3, #22
 800611a:	d402      	bmi.n	8006122 <_fflush_r+0x3a>
 800611c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800611e:	f000 f915 	bl	800634c <__retarget_lock_acquire_recursive>
 8006122:	4628      	mov	r0, r5
 8006124:	4621      	mov	r1, r4
 8006126:	f7ff ff59 	bl	8005fdc <__sflush_r>
 800612a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800612c:	07da      	lsls	r2, r3, #31
 800612e:	4605      	mov	r5, r0
 8006130:	d4e0      	bmi.n	80060f4 <_fflush_r+0xc>
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	059b      	lsls	r3, r3, #22
 8006136:	d4dd      	bmi.n	80060f4 <_fflush_r+0xc>
 8006138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800613a:	f000 f908 	bl	800634e <__retarget_lock_release_recursive>
 800613e:	e7d9      	b.n	80060f4 <_fflush_r+0xc>
 8006140:	4b05      	ldr	r3, [pc, #20]	; (8006158 <_fflush_r+0x70>)
 8006142:	429c      	cmp	r4, r3
 8006144:	d101      	bne.n	800614a <_fflush_r+0x62>
 8006146:	68ac      	ldr	r4, [r5, #8]
 8006148:	e7df      	b.n	800610a <_fflush_r+0x22>
 800614a:	4b04      	ldr	r3, [pc, #16]	; (800615c <_fflush_r+0x74>)
 800614c:	429c      	cmp	r4, r3
 800614e:	bf08      	it	eq
 8006150:	68ec      	ldreq	r4, [r5, #12]
 8006152:	e7da      	b.n	800610a <_fflush_r+0x22>
 8006154:	08006a0c 	.word	0x08006a0c
 8006158:	08006a2c 	.word	0x08006a2c
 800615c:	080069ec 	.word	0x080069ec

08006160 <std>:
 8006160:	2300      	movs	r3, #0
 8006162:	b510      	push	{r4, lr}
 8006164:	4604      	mov	r4, r0
 8006166:	e9c0 3300 	strd	r3, r3, [r0]
 800616a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800616e:	6083      	str	r3, [r0, #8]
 8006170:	8181      	strh	r1, [r0, #12]
 8006172:	6643      	str	r3, [r0, #100]	; 0x64
 8006174:	81c2      	strh	r2, [r0, #14]
 8006176:	6183      	str	r3, [r0, #24]
 8006178:	4619      	mov	r1, r3
 800617a:	2208      	movs	r2, #8
 800617c:	305c      	adds	r0, #92	; 0x5c
 800617e:	f7fd fc37 	bl	80039f0 <memset>
 8006182:	4b05      	ldr	r3, [pc, #20]	; (8006198 <std+0x38>)
 8006184:	6263      	str	r3, [r4, #36]	; 0x24
 8006186:	4b05      	ldr	r3, [pc, #20]	; (800619c <std+0x3c>)
 8006188:	62a3      	str	r3, [r4, #40]	; 0x28
 800618a:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <std+0x40>)
 800618c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800618e:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <std+0x44>)
 8006190:	6224      	str	r4, [r4, #32]
 8006192:	6323      	str	r3, [r4, #48]	; 0x30
 8006194:	bd10      	pop	{r4, pc}
 8006196:	bf00      	nop
 8006198:	080064b1 	.word	0x080064b1
 800619c:	080064d3 	.word	0x080064d3
 80061a0:	0800650b 	.word	0x0800650b
 80061a4:	0800652f 	.word	0x0800652f

080061a8 <_cleanup_r>:
 80061a8:	4901      	ldr	r1, [pc, #4]	; (80061b0 <_cleanup_r+0x8>)
 80061aa:	f000 b8af 	b.w	800630c <_fwalk_reent>
 80061ae:	bf00      	nop
 80061b0:	080060e9 	.word	0x080060e9

080061b4 <__sfmoreglue>:
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	1e4a      	subs	r2, r1, #1
 80061b8:	2568      	movs	r5, #104	; 0x68
 80061ba:	4355      	muls	r5, r2
 80061bc:	460e      	mov	r6, r1
 80061be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80061c2:	f7ff fa87 	bl	80056d4 <_malloc_r>
 80061c6:	4604      	mov	r4, r0
 80061c8:	b140      	cbz	r0, 80061dc <__sfmoreglue+0x28>
 80061ca:	2100      	movs	r1, #0
 80061cc:	e9c0 1600 	strd	r1, r6, [r0]
 80061d0:	300c      	adds	r0, #12
 80061d2:	60a0      	str	r0, [r4, #8]
 80061d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061d8:	f7fd fc0a 	bl	80039f0 <memset>
 80061dc:	4620      	mov	r0, r4
 80061de:	bd70      	pop	{r4, r5, r6, pc}

080061e0 <__sfp_lock_acquire>:
 80061e0:	4801      	ldr	r0, [pc, #4]	; (80061e8 <__sfp_lock_acquire+0x8>)
 80061e2:	f000 b8b3 	b.w	800634c <__retarget_lock_acquire_recursive>
 80061e6:	bf00      	nop
 80061e8:	20000368 	.word	0x20000368

080061ec <__sfp_lock_release>:
 80061ec:	4801      	ldr	r0, [pc, #4]	; (80061f4 <__sfp_lock_release+0x8>)
 80061ee:	f000 b8ae 	b.w	800634e <__retarget_lock_release_recursive>
 80061f2:	bf00      	nop
 80061f4:	20000368 	.word	0x20000368

080061f8 <__sinit_lock_acquire>:
 80061f8:	4801      	ldr	r0, [pc, #4]	; (8006200 <__sinit_lock_acquire+0x8>)
 80061fa:	f000 b8a7 	b.w	800634c <__retarget_lock_acquire_recursive>
 80061fe:	bf00      	nop
 8006200:	20000363 	.word	0x20000363

08006204 <__sinit_lock_release>:
 8006204:	4801      	ldr	r0, [pc, #4]	; (800620c <__sinit_lock_release+0x8>)
 8006206:	f000 b8a2 	b.w	800634e <__retarget_lock_release_recursive>
 800620a:	bf00      	nop
 800620c:	20000363 	.word	0x20000363

08006210 <__sinit>:
 8006210:	b510      	push	{r4, lr}
 8006212:	4604      	mov	r4, r0
 8006214:	f7ff fff0 	bl	80061f8 <__sinit_lock_acquire>
 8006218:	69a3      	ldr	r3, [r4, #24]
 800621a:	b11b      	cbz	r3, 8006224 <__sinit+0x14>
 800621c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006220:	f7ff bff0 	b.w	8006204 <__sinit_lock_release>
 8006224:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006228:	6523      	str	r3, [r4, #80]	; 0x50
 800622a:	4b13      	ldr	r3, [pc, #76]	; (8006278 <__sinit+0x68>)
 800622c:	4a13      	ldr	r2, [pc, #76]	; (800627c <__sinit+0x6c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	62a2      	str	r2, [r4, #40]	; 0x28
 8006232:	42a3      	cmp	r3, r4
 8006234:	bf04      	itt	eq
 8006236:	2301      	moveq	r3, #1
 8006238:	61a3      	streq	r3, [r4, #24]
 800623a:	4620      	mov	r0, r4
 800623c:	f000 f820 	bl	8006280 <__sfp>
 8006240:	6060      	str	r0, [r4, #4]
 8006242:	4620      	mov	r0, r4
 8006244:	f000 f81c 	bl	8006280 <__sfp>
 8006248:	60a0      	str	r0, [r4, #8]
 800624a:	4620      	mov	r0, r4
 800624c:	f000 f818 	bl	8006280 <__sfp>
 8006250:	2200      	movs	r2, #0
 8006252:	60e0      	str	r0, [r4, #12]
 8006254:	2104      	movs	r1, #4
 8006256:	6860      	ldr	r0, [r4, #4]
 8006258:	f7ff ff82 	bl	8006160 <std>
 800625c:	68a0      	ldr	r0, [r4, #8]
 800625e:	2201      	movs	r2, #1
 8006260:	2109      	movs	r1, #9
 8006262:	f7ff ff7d 	bl	8006160 <std>
 8006266:	68e0      	ldr	r0, [r4, #12]
 8006268:	2202      	movs	r2, #2
 800626a:	2112      	movs	r1, #18
 800626c:	f7ff ff78 	bl	8006160 <std>
 8006270:	2301      	movs	r3, #1
 8006272:	61a3      	str	r3, [r4, #24]
 8006274:	e7d2      	b.n	800621c <__sinit+0xc>
 8006276:	bf00      	nop
 8006278:	08006668 	.word	0x08006668
 800627c:	080061a9 	.word	0x080061a9

08006280 <__sfp>:
 8006280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006282:	4607      	mov	r7, r0
 8006284:	f7ff ffac 	bl	80061e0 <__sfp_lock_acquire>
 8006288:	4b1e      	ldr	r3, [pc, #120]	; (8006304 <__sfp+0x84>)
 800628a:	681e      	ldr	r6, [r3, #0]
 800628c:	69b3      	ldr	r3, [r6, #24]
 800628e:	b913      	cbnz	r3, 8006296 <__sfp+0x16>
 8006290:	4630      	mov	r0, r6
 8006292:	f7ff ffbd 	bl	8006210 <__sinit>
 8006296:	3648      	adds	r6, #72	; 0x48
 8006298:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800629c:	3b01      	subs	r3, #1
 800629e:	d503      	bpl.n	80062a8 <__sfp+0x28>
 80062a0:	6833      	ldr	r3, [r6, #0]
 80062a2:	b30b      	cbz	r3, 80062e8 <__sfp+0x68>
 80062a4:	6836      	ldr	r6, [r6, #0]
 80062a6:	e7f7      	b.n	8006298 <__sfp+0x18>
 80062a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062ac:	b9d5      	cbnz	r5, 80062e4 <__sfp+0x64>
 80062ae:	4b16      	ldr	r3, [pc, #88]	; (8006308 <__sfp+0x88>)
 80062b0:	60e3      	str	r3, [r4, #12]
 80062b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80062b6:	6665      	str	r5, [r4, #100]	; 0x64
 80062b8:	f000 f847 	bl	800634a <__retarget_lock_init_recursive>
 80062bc:	f7ff ff96 	bl	80061ec <__sfp_lock_release>
 80062c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80062c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80062c8:	6025      	str	r5, [r4, #0]
 80062ca:	61a5      	str	r5, [r4, #24]
 80062cc:	2208      	movs	r2, #8
 80062ce:	4629      	mov	r1, r5
 80062d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062d4:	f7fd fb8c 	bl	80039f0 <memset>
 80062d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062e0:	4620      	mov	r0, r4
 80062e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e4:	3468      	adds	r4, #104	; 0x68
 80062e6:	e7d9      	b.n	800629c <__sfp+0x1c>
 80062e8:	2104      	movs	r1, #4
 80062ea:	4638      	mov	r0, r7
 80062ec:	f7ff ff62 	bl	80061b4 <__sfmoreglue>
 80062f0:	4604      	mov	r4, r0
 80062f2:	6030      	str	r0, [r6, #0]
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d1d5      	bne.n	80062a4 <__sfp+0x24>
 80062f8:	f7ff ff78 	bl	80061ec <__sfp_lock_release>
 80062fc:	230c      	movs	r3, #12
 80062fe:	603b      	str	r3, [r7, #0]
 8006300:	e7ee      	b.n	80062e0 <__sfp+0x60>
 8006302:	bf00      	nop
 8006304:	08006668 	.word	0x08006668
 8006308:	ffff0001 	.word	0xffff0001

0800630c <_fwalk_reent>:
 800630c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006310:	4606      	mov	r6, r0
 8006312:	4688      	mov	r8, r1
 8006314:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006318:	2700      	movs	r7, #0
 800631a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800631e:	f1b9 0901 	subs.w	r9, r9, #1
 8006322:	d505      	bpl.n	8006330 <_fwalk_reent+0x24>
 8006324:	6824      	ldr	r4, [r4, #0]
 8006326:	2c00      	cmp	r4, #0
 8006328:	d1f7      	bne.n	800631a <_fwalk_reent+0xe>
 800632a:	4638      	mov	r0, r7
 800632c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006330:	89ab      	ldrh	r3, [r5, #12]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d907      	bls.n	8006346 <_fwalk_reent+0x3a>
 8006336:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800633a:	3301      	adds	r3, #1
 800633c:	d003      	beq.n	8006346 <_fwalk_reent+0x3a>
 800633e:	4629      	mov	r1, r5
 8006340:	4630      	mov	r0, r6
 8006342:	47c0      	blx	r8
 8006344:	4307      	orrs	r7, r0
 8006346:	3568      	adds	r5, #104	; 0x68
 8006348:	e7e9      	b.n	800631e <_fwalk_reent+0x12>

0800634a <__retarget_lock_init_recursive>:
 800634a:	4770      	bx	lr

0800634c <__retarget_lock_acquire_recursive>:
 800634c:	4770      	bx	lr

0800634e <__retarget_lock_release_recursive>:
 800634e:	4770      	bx	lr

08006350 <__swhatbuf_r>:
 8006350:	b570      	push	{r4, r5, r6, lr}
 8006352:	460e      	mov	r6, r1
 8006354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006358:	2900      	cmp	r1, #0
 800635a:	b096      	sub	sp, #88	; 0x58
 800635c:	4614      	mov	r4, r2
 800635e:	461d      	mov	r5, r3
 8006360:	da07      	bge.n	8006372 <__swhatbuf_r+0x22>
 8006362:	2300      	movs	r3, #0
 8006364:	602b      	str	r3, [r5, #0]
 8006366:	89b3      	ldrh	r3, [r6, #12]
 8006368:	061a      	lsls	r2, r3, #24
 800636a:	d410      	bmi.n	800638e <__swhatbuf_r+0x3e>
 800636c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006370:	e00e      	b.n	8006390 <__swhatbuf_r+0x40>
 8006372:	466a      	mov	r2, sp
 8006374:	f000 f902 	bl	800657c <_fstat_r>
 8006378:	2800      	cmp	r0, #0
 800637a:	dbf2      	blt.n	8006362 <__swhatbuf_r+0x12>
 800637c:	9a01      	ldr	r2, [sp, #4]
 800637e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006382:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006386:	425a      	negs	r2, r3
 8006388:	415a      	adcs	r2, r3
 800638a:	602a      	str	r2, [r5, #0]
 800638c:	e7ee      	b.n	800636c <__swhatbuf_r+0x1c>
 800638e:	2340      	movs	r3, #64	; 0x40
 8006390:	2000      	movs	r0, #0
 8006392:	6023      	str	r3, [r4, #0]
 8006394:	b016      	add	sp, #88	; 0x58
 8006396:	bd70      	pop	{r4, r5, r6, pc}

08006398 <__smakebuf_r>:
 8006398:	898b      	ldrh	r3, [r1, #12]
 800639a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800639c:	079d      	lsls	r5, r3, #30
 800639e:	4606      	mov	r6, r0
 80063a0:	460c      	mov	r4, r1
 80063a2:	d507      	bpl.n	80063b4 <__smakebuf_r+0x1c>
 80063a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	6123      	str	r3, [r4, #16]
 80063ac:	2301      	movs	r3, #1
 80063ae:	6163      	str	r3, [r4, #20]
 80063b0:	b002      	add	sp, #8
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
 80063b4:	ab01      	add	r3, sp, #4
 80063b6:	466a      	mov	r2, sp
 80063b8:	f7ff ffca 	bl	8006350 <__swhatbuf_r>
 80063bc:	9900      	ldr	r1, [sp, #0]
 80063be:	4605      	mov	r5, r0
 80063c0:	4630      	mov	r0, r6
 80063c2:	f7ff f987 	bl	80056d4 <_malloc_r>
 80063c6:	b948      	cbnz	r0, 80063dc <__smakebuf_r+0x44>
 80063c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063cc:	059a      	lsls	r2, r3, #22
 80063ce:	d4ef      	bmi.n	80063b0 <__smakebuf_r+0x18>
 80063d0:	f023 0303 	bic.w	r3, r3, #3
 80063d4:	f043 0302 	orr.w	r3, r3, #2
 80063d8:	81a3      	strh	r3, [r4, #12]
 80063da:	e7e3      	b.n	80063a4 <__smakebuf_r+0xc>
 80063dc:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <__smakebuf_r+0x7c>)
 80063de:	62b3      	str	r3, [r6, #40]	; 0x28
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	6020      	str	r0, [r4, #0]
 80063e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e8:	81a3      	strh	r3, [r4, #12]
 80063ea:	9b00      	ldr	r3, [sp, #0]
 80063ec:	6163      	str	r3, [r4, #20]
 80063ee:	9b01      	ldr	r3, [sp, #4]
 80063f0:	6120      	str	r0, [r4, #16]
 80063f2:	b15b      	cbz	r3, 800640c <__smakebuf_r+0x74>
 80063f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063f8:	4630      	mov	r0, r6
 80063fa:	f000 f8d1 	bl	80065a0 <_isatty_r>
 80063fe:	b128      	cbz	r0, 800640c <__smakebuf_r+0x74>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	89a0      	ldrh	r0, [r4, #12]
 800640e:	4305      	orrs	r5, r0
 8006410:	81a5      	strh	r5, [r4, #12]
 8006412:	e7cd      	b.n	80063b0 <__smakebuf_r+0x18>
 8006414:	080061a9 	.word	0x080061a9

08006418 <_malloc_usable_size_r>:
 8006418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800641c:	1f18      	subs	r0, r3, #4
 800641e:	2b00      	cmp	r3, #0
 8006420:	bfbc      	itt	lt
 8006422:	580b      	ldrlt	r3, [r1, r0]
 8006424:	18c0      	addlt	r0, r0, r3
 8006426:	4770      	bx	lr

08006428 <_raise_r>:
 8006428:	291f      	cmp	r1, #31
 800642a:	b538      	push	{r3, r4, r5, lr}
 800642c:	4604      	mov	r4, r0
 800642e:	460d      	mov	r5, r1
 8006430:	d904      	bls.n	800643c <_raise_r+0x14>
 8006432:	2316      	movs	r3, #22
 8006434:	6003      	str	r3, [r0, #0]
 8006436:	f04f 30ff 	mov.w	r0, #4294967295
 800643a:	bd38      	pop	{r3, r4, r5, pc}
 800643c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800643e:	b112      	cbz	r2, 8006446 <_raise_r+0x1e>
 8006440:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006444:	b94b      	cbnz	r3, 800645a <_raise_r+0x32>
 8006446:	4620      	mov	r0, r4
 8006448:	f000 f830 	bl	80064ac <_getpid_r>
 800644c:	462a      	mov	r2, r5
 800644e:	4601      	mov	r1, r0
 8006450:	4620      	mov	r0, r4
 8006452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006456:	f000 b817 	b.w	8006488 <_kill_r>
 800645a:	2b01      	cmp	r3, #1
 800645c:	d00a      	beq.n	8006474 <_raise_r+0x4c>
 800645e:	1c59      	adds	r1, r3, #1
 8006460:	d103      	bne.n	800646a <_raise_r+0x42>
 8006462:	2316      	movs	r3, #22
 8006464:	6003      	str	r3, [r0, #0]
 8006466:	2001      	movs	r0, #1
 8006468:	e7e7      	b.n	800643a <_raise_r+0x12>
 800646a:	2400      	movs	r4, #0
 800646c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006470:	4628      	mov	r0, r5
 8006472:	4798      	blx	r3
 8006474:	2000      	movs	r0, #0
 8006476:	e7e0      	b.n	800643a <_raise_r+0x12>

08006478 <raise>:
 8006478:	4b02      	ldr	r3, [pc, #8]	; (8006484 <raise+0xc>)
 800647a:	4601      	mov	r1, r0
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	f7ff bfd3 	b.w	8006428 <_raise_r>
 8006482:	bf00      	nop
 8006484:	20000014 	.word	0x20000014

08006488 <_kill_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	4d07      	ldr	r5, [pc, #28]	; (80064a8 <_kill_r+0x20>)
 800648c:	2300      	movs	r3, #0
 800648e:	4604      	mov	r4, r0
 8006490:	4608      	mov	r0, r1
 8006492:	4611      	mov	r1, r2
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	f7fa fc51 	bl	8000d3c <_kill>
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	d102      	bne.n	80064a4 <_kill_r+0x1c>
 800649e:	682b      	ldr	r3, [r5, #0]
 80064a0:	b103      	cbz	r3, 80064a4 <_kill_r+0x1c>
 80064a2:	6023      	str	r3, [r4, #0]
 80064a4:	bd38      	pop	{r3, r4, r5, pc}
 80064a6:	bf00      	nop
 80064a8:	2000035c 	.word	0x2000035c

080064ac <_getpid_r>:
 80064ac:	f7fa bc3e 	b.w	8000d2c <_getpid>

080064b0 <__sread>:
 80064b0:	b510      	push	{r4, lr}
 80064b2:	460c      	mov	r4, r1
 80064b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b8:	f000 f894 	bl	80065e4 <_read_r>
 80064bc:	2800      	cmp	r0, #0
 80064be:	bfab      	itete	ge
 80064c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064c2:	89a3      	ldrhlt	r3, [r4, #12]
 80064c4:	181b      	addge	r3, r3, r0
 80064c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064ca:	bfac      	ite	ge
 80064cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80064ce:	81a3      	strhlt	r3, [r4, #12]
 80064d0:	bd10      	pop	{r4, pc}

080064d2 <__swrite>:
 80064d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d6:	461f      	mov	r7, r3
 80064d8:	898b      	ldrh	r3, [r1, #12]
 80064da:	05db      	lsls	r3, r3, #23
 80064dc:	4605      	mov	r5, r0
 80064de:	460c      	mov	r4, r1
 80064e0:	4616      	mov	r6, r2
 80064e2:	d505      	bpl.n	80064f0 <__swrite+0x1e>
 80064e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e8:	2302      	movs	r3, #2
 80064ea:	2200      	movs	r2, #0
 80064ec:	f000 f868 	bl	80065c0 <_lseek_r>
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064fa:	81a3      	strh	r3, [r4, #12]
 80064fc:	4632      	mov	r2, r6
 80064fe:	463b      	mov	r3, r7
 8006500:	4628      	mov	r0, r5
 8006502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006506:	f000 b817 	b.w	8006538 <_write_r>

0800650a <__sseek>:
 800650a:	b510      	push	{r4, lr}
 800650c:	460c      	mov	r4, r1
 800650e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006512:	f000 f855 	bl	80065c0 <_lseek_r>
 8006516:	1c43      	adds	r3, r0, #1
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	bf15      	itete	ne
 800651c:	6560      	strne	r0, [r4, #84]	; 0x54
 800651e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006522:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006526:	81a3      	strheq	r3, [r4, #12]
 8006528:	bf18      	it	ne
 800652a:	81a3      	strhne	r3, [r4, #12]
 800652c:	bd10      	pop	{r4, pc}

0800652e <__sclose>:
 800652e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006532:	f000 b813 	b.w	800655c <_close_r>
	...

08006538 <_write_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4d07      	ldr	r5, [pc, #28]	; (8006558 <_write_r+0x20>)
 800653c:	4604      	mov	r4, r0
 800653e:	4608      	mov	r0, r1
 8006540:	4611      	mov	r1, r2
 8006542:	2200      	movs	r2, #0
 8006544:	602a      	str	r2, [r5, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	f7fa fc2f 	bl	8000daa <_write>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_write_r+0x1e>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	b103      	cbz	r3, 8006556 <_write_r+0x1e>
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	2000035c 	.word	0x2000035c

0800655c <_close_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4d06      	ldr	r5, [pc, #24]	; (8006578 <_close_r+0x1c>)
 8006560:	2300      	movs	r3, #0
 8006562:	4604      	mov	r4, r0
 8006564:	4608      	mov	r0, r1
 8006566:	602b      	str	r3, [r5, #0]
 8006568:	f7fa fc3b 	bl	8000de2 <_close>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_close_r+0x1a>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_close_r+0x1a>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	2000035c 	.word	0x2000035c

0800657c <_fstat_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4d07      	ldr	r5, [pc, #28]	; (800659c <_fstat_r+0x20>)
 8006580:	2300      	movs	r3, #0
 8006582:	4604      	mov	r4, r0
 8006584:	4608      	mov	r0, r1
 8006586:	4611      	mov	r1, r2
 8006588:	602b      	str	r3, [r5, #0]
 800658a:	f7fa fc36 	bl	8000dfa <_fstat>
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	d102      	bne.n	8006598 <_fstat_r+0x1c>
 8006592:	682b      	ldr	r3, [r5, #0]
 8006594:	b103      	cbz	r3, 8006598 <_fstat_r+0x1c>
 8006596:	6023      	str	r3, [r4, #0]
 8006598:	bd38      	pop	{r3, r4, r5, pc}
 800659a:	bf00      	nop
 800659c:	2000035c 	.word	0x2000035c

080065a0 <_isatty_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4d06      	ldr	r5, [pc, #24]	; (80065bc <_isatty_r+0x1c>)
 80065a4:	2300      	movs	r3, #0
 80065a6:	4604      	mov	r4, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	602b      	str	r3, [r5, #0]
 80065ac:	f7fa fc35 	bl	8000e1a <_isatty>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_isatty_r+0x1a>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_isatty_r+0x1a>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	2000035c 	.word	0x2000035c

080065c0 <_lseek_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	4d07      	ldr	r5, [pc, #28]	; (80065e0 <_lseek_r+0x20>)
 80065c4:	4604      	mov	r4, r0
 80065c6:	4608      	mov	r0, r1
 80065c8:	4611      	mov	r1, r2
 80065ca:	2200      	movs	r2, #0
 80065cc:	602a      	str	r2, [r5, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	f7fa fc2e 	bl	8000e30 <_lseek>
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	d102      	bne.n	80065de <_lseek_r+0x1e>
 80065d8:	682b      	ldr	r3, [r5, #0]
 80065da:	b103      	cbz	r3, 80065de <_lseek_r+0x1e>
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	bd38      	pop	{r3, r4, r5, pc}
 80065e0:	2000035c 	.word	0x2000035c

080065e4 <_read_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4d07      	ldr	r5, [pc, #28]	; (8006604 <_read_r+0x20>)
 80065e8:	4604      	mov	r4, r0
 80065ea:	4608      	mov	r0, r1
 80065ec:	4611      	mov	r1, r2
 80065ee:	2200      	movs	r2, #0
 80065f0:	602a      	str	r2, [r5, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	f7fa fbbc 	bl	8000d70 <_read>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d102      	bne.n	8006602 <_read_r+0x1e>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	b103      	cbz	r3, 8006602 <_read_r+0x1e>
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	bd38      	pop	{r3, r4, r5, pc}
 8006604:	2000035c 	.word	0x2000035c

08006608 <_init>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	bf00      	nop
 800660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660e:	bc08      	pop	{r3}
 8006610:	469e      	mov	lr, r3
 8006612:	4770      	bx	lr

08006614 <_fini>:
 8006614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006616:	bf00      	nop
 8006618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661a:	bc08      	pop	{r3}
 800661c:	469e      	mov	lr, r3
 800661e:	4770      	bx	lr
